// Copyright (c) 2015 AEFIS, all rights reserved.
// http://www.aefis.com/

"use strict";

window.aefis = window.aefis || {};
var aefis = window.aefis;

/**
 * Name space setup / initialization
 */
aefis.FormItems = function () {
	var that = this;

	this.items = {};

	this.initialize = function ($rootContainer) {
		if ($rootContainer.is("body")) {
			$(".aefis-formitem").each(function () {
				var type = $(this).attr("data-aefis-formitem-code");
				var formItem = that.createFormItem(type);
				formItem.initialize($(this));
				if (!that.items[type]) {
					that.items[type] = [];
				}
				that.items[type][that.items[type].length] = formItem;
			});
		} else {
			$rootContainer.find(".aefis-formitem").each(function () {
				var type = $(this).attr("data-aefis-formitem-code");
				var formItem = that.createFormItem(type);
				formItem.initialize($(this));
				if (!that.items[type]) {
					that.items[type] = [];
				}
				that.items[type][that.items[type].length] = formItem;
			});
		}
	};

	this.createFormItem = function (type) {
		var formItemClass = eval("aefis.FormItems." + type);
		if (formItemClass == undefined) {
			return new aefis.FormItems.Item();
		}
		return new formItemClass();
	};

	this.getFormItem = function (formItemType, formItemId, embeddedParentSecondaryId) {
		var formItemId = parseInt(formItemId);
		var embeddedParentSecondaryId = parseInt(embeddedParentSecondaryId);
		var typeItems = this.items[formItemType];
		if ($.isArray(typeItems)) {
			for (var i = 0; i < typeItems.length; i++) {
				if ($.isArray(typeItems[i].items) && formItemType != "RELATIONALDATA") {
					var typeItemsItems = typeItems[i].items;
					for (var j = 0; j < typeItemsItems.length; j++) {
						if (embeddedParentSecondaryId) {
							if (
								parseInt(typeItemsItems[j].id) === formItemId &&
								parseInt(typeItemsItems[j].embeddedQuestionSecondaryId) ===
									embeddedParentSecondaryId
							) {
								return typeItems[i];
							}
						} else {
							if (parseInt(typeItemsItems[j].id) === formItemId) {
								return typeItems[i];
							}
						}
					}
				} else {
					if (embeddedParentSecondaryId) {
						if (
							parseInt(typeItems[i].id) === formItemId &&
							parseInt(typeItems[i].embeddedQuestionSecondaryId) ===
								embeddedParentSecondaryId
						) {
							return typeItems[i];
						}
					} else {
						if (parseInt(typeItems[i].id) === formItemId) {
							return typeItems[i];
						}
					}
				}
			}
		}
		return undefined;
	};
};

/**
 * DEFAULT ITEM default for any items not specifically added to the FormItems object
 */
aefis.FormItems.Item = function () {};

aefis.FormItems.Item.prototype = {
	id: 0,
	newValue: {},
	oldValue: {},
	onChangeHandler: function (e) {
		this.newValue = this.getValue();
		this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
		if (this.setSaving) {
			this.setSaving(true);
		}
	},

	/**
	 * @register true to register, false to not
	 */
	registerChangeHandler: function (register) {
		if (register)
			this.$item
				.off("change", $.proxy(this.onChangeHandler, this))
				.on("change", $.proxy(this.onChangeHandler, this));
		else this.$item.off("change", $.proxy(this.onChangeHandler, this));
	},

	/**
	 * any overrides by types should be sure to set this scoped '$item', '$container', 'embeddedQuestionSecondaryId' and, if has sub items, an 'items' array containing inited items (see MCMA)
	 * @$container form item container. scope for events and calls defaults to this.
	 * @item (optional) specific item in container to attach events and use as scope for calls (can be used for 'sub' items in form item if needed... like checkboxes)
	 */
	initialize: function ($container, $item) {
		var that = this;
		this.$container = $container;
		this.id = $container.attr("data-aefis-formitem-id");
		if (typeof $item === "undefined") {
			this.$item = $container;
		} else {
			this.$item = $item;
		}
		this.oldValue = this.getValue();
		this.newValue = this.getValue();
		this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
		this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
		this.registerChangeHandler(true);
		this.$item.on("revert", function (e) {
			that.revertValue.call(that, that.oldValue);
			if (that.setSaving) {
				that.setSaving.call(that, false);
			}
		});
		this.$item.on("saved", function (e) {
			that.oldValue = that.newValue;
			if (that.setSaving) {
				that.setSaving.call(that, false);
			}
		});
		this.getActions();
	},

	getValue: function () {},

	// @value same as returned from getValue()
	setValue: function (value) {
		for (var i = 0; i < value.options.length; i++) {
			var option = value.options[i];
			var $currentItem = this.$item.find(
				"#form-item-" + this.$item.attr("data-aefis-formitem-id") + "-" + option.optionId
			);
			$currentItem.val(option.content).change();
		}
	},

	setSaving: function (saving) {
		if (saving) {
			this.registerChangeHandler(false);
			//this.setEnabled(false);
			this.setEnabled.call(this, false);
		} else {
			this.registerChangeHandler(true);
			//this.setEnabled(true);
			this.setEnabled.call(this, true);
		}
	},

	setEnabled: function (enable) {},

	revertValue: function (oldValue) {},

	getEmbededQuestionSecondaryId: function () {
		var $embeddedContainer = this.$item.parents(
			".aefis-form-item-embedded-questions-container"
		);
		if ($embeddedContainer.length) {
			var embeddedParentSecondaryId = $embeddedContainer.attr(
				"data-aefis-embedded-questions-parent-secondary-id"
			);
		}
		return embeddedParentSecondaryId ? embeddedParentSecondaryId : undefined;
	},

	getEmbeddedQuestionParentOptionId: function () {
		var $embeddedContainer = this.$item.parents(
			".aefis-form-item-embedded-questions-container"
		);
		if ($embeddedContainer.length) {
			var embeddedParentOptionId = $embeddedContainer.attr(
				"data-aefis-embedded-questions-parent-option-id"
			);
		}
		return embeddedParentOptionId ? embeddedParentOptionId : undefined;
	},

	getEmbeddedQuestionCopyToSecondaryIdArray: function () {
		var $embeddedContainer = this.$item.parents(
			".aefis-form-item-embedded-questions-container"
		);
		if ($embeddedContainer.length) {
			var copyToSecondaryIdList = $embeddedContainer.attr(
				"data-aefis-copy-to-secondary-id-list"
			);
			return $.makeArray(copyToSecondaryIdList.split(",")).filter(function (elem) {
				return elem !== "";
			});
		}
		return [];
	},

	getHistoryId: function () {
		return this.$item.attr("data-aefis-history-id");
	},

	setHistoryId: function (historyId) {
		this.$item.attr("data-aefis-history-id", historyId);
	},

	getActions: function () {
		var actionsObj = this.$item
			.closest(".aefis-question-wrapper")
			.attr("data-aefis-formitem-actions");
	},

	clearResponse: function () {},

	/**
	 * utility. returns new object with properties from obj named in propertyKeyArray
	 */
	filterProperties: function (obj, propertyKeyArray) {
		var copyToData = {};
		for (var k in obj) {
			if ($.inArray(k, propertyKeyArray) >= 0) copyToData[k] = obj[k];
		}
		return copyToData;
	}
};

/**
 * FORMITEMCOMMENT form item comment
 */
aefis.FormItems.FORMITEMCOMMENT = function () {};
aefis.FormItems.FORMITEMCOMMENT.prototype = new aefis.FormItems.Item();

aefis.FormItems.FORMITEMCOMMENT.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("textarea").prop("disabled", false);
	} else {
		this.$item.find("textarea").prop("disabled", true);
	}
};

aefis.FormItems.FORMITEMCOMMENT.prototype.getValue = function () {
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		historyId: this.$item.attr("data-aefis-history-id"),
		content: this.$item.find("textarea").val()
	};
	return value;
};

aefis.FormItems.FORMITEMCOMMENT.prototype.setValue = function (value) {
	var that = this;
	//var $currentItem = this.$item.find('#form-item-' + this.$item.attr('data-aefis-formitem-id'));
	var content = value;
	if (typeof value === "object") {
		content = value.content;
	}
	this.$item.find("textarea").val(content).change();
};

aefis.FormItems.FORMITEMCOMMENT.prototype.revertValue = function (oldValue) {
	this.$item.find("textarea").val(oldValue.content);
};

/**
 * TEXT single text box that saves contents to a single form item option
 */
aefis.FormItems.TEXT = function () {};
aefis.FormItems.TEXT.prototype = new aefis.FormItems.Item();

aefis.FormItems.TEXT.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".btn-add-text-area")
			.off("click", $.proxy(this.addTextArea, this))
			.on("click", $.proxy(this.addTextArea, this));
		this.$item
			.find(".btn-remove-text-area")
			.off("click", $.proxy(this.removeTextArea, this))
			.on("click", $.proxy(this.removeTextArea, this));
		this.$item
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item.find(".btn-add-text-area").off("click", $.proxy(this.addTextArea, this));
		this.$item.find(".btn-remove-text-area").off("click", $.proxy(this.removeTextArea, this));
		this.$item.off("change", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.TEXT.prototype.addTextArea = function (e) {
	var that = this;
	var $btn = $(e.target);
	var $item = $btn.closest(".row-fluid");
	var $itemContainer = $btn.closest(".aefis-formitem-options-container");

	var $contentDiv = $("<div>");
	var txtarea = $itemContainer
		.attr("data-aefis-empty-textarea")
		.replace(new RegExp("idhere", "g"), "id" + Math.random().toString(36).substr(2, 16));
	$contentDiv.append(txtarea);
	$('<div class="span1 aefis-form-item-btn">')
		.append($item.find(".aefis-form-item-btn").clone().html())
		.appendTo($contentDiv);

	$item.after($('<div class="row-fluid control-group">').append($contentDiv.html()));

	that.initializeTinyMCE();
	that.registerChangeHandler(true);
};

aefis.FormItems.TEXT.prototype.removeTextArea = function (e) {
	var that = this;
	var $btn = $(e.target);
	var $item = $btn.closest(".row-fluid");
	var $itemContainer = $btn.closest(".aefis-formitem-options-container");
	if ($itemContainer.find(".row-fluid").length <= 1) {
		aefis.ui.alert("Remove", "There must be at least one input area.");
	} else {
		$item.remove();
		that.newValue = that.getValue();
		that.$item.trigger("formitemchanged", { oldValue: that.oldValue, newValue: that.newValue });
	}
};

aefis.FormItems.TEXT.prototype.setEnabled = function (enable) {
	var $textFormItems = this.$item.find("textarea[data-aefis-formitem-option-id]");
	$textFormItems.each(function (index) {
		var $textFormItem = $(this);
		var mceEditor = tinymce.get($textFormItem.attr("id"));
		if (mceEditor) {
			if (enable) {
				mceEditor.getBody().setAttribute("contenteditable", true);
			} else {
				if (aefis.util.getAefisBrowserType() != "Firefox") {
					mceEditor.getBody().setAttribute("contenteditable", false);
				}
			}
		} else {
			if (enable) {
				$textFormItem.prop("disabled", false);
			} else {
				$textFormItem.prop("disabled", true);
			}
		}
	});
};

aefis.FormItems.TEXT.prototype.getValue = function () {
	var enableMultipleEntries = this.$item.attr("data-aefis-enable-multiple-entires");
	var $responses = this.$item.find("textarea[data-aefis-formitem-option-id]");
	var content = "";
	if (enableMultipleEntries == false) {
		var formItemOptionId = this.$item
			.find("textarea[data-aefis-formitem-option-id]")
			.attr("data-aefis-formitem-option-id");
		var mceEditor = tinymce.get(
			this.$item.find("textarea[data-aefis-formitem-option-id]").attr("id")
		);
		if (mceEditor) {
			content = $(mceEditor.getBody()).html();
		} else {
			content = this.$item.find("textarea[data-aefis-formitem-option-id]").val();
		}
	} else {
		var formItemOptionId = $($responses[0]).attr("data-aefis-formitem-option-id");
		var contentItems = [];
		$responses.each(function (index) {
			var $response = $(this);
			var mceEditor = tinymce.get($response.attr("id"));
			if (mceEditor) {
				contentItems.push($(mceEditor.getBody()).html());
			} else {
				contentItems.push($response.val());
			}
		});
		content = JSON.stringify(contentItems);
	}

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};

	return value;
};

aefis.FormItems.TEXT.prototype.setValue = function (valueToSet) {
	var enableMultipleEntries = this.$item.attr("data-aefis-enable-multiple-entires");
	if (typeof enableMultipleEntries === "undefined" || enableMultipleEntries == false) {
		var contentObj = JSON.parse(valueToSet.options[0].content);
		$(
			tinymce
				.get(this.$item.find("textarea[data-aefis-formitem-option-id]").attr("id"))
				.getBody()
		).html(contentObj[0]);
	} else {
		if (valueToSet.options[0].content) {
			var $textFormItems = this.$item.find("textarea[data-aefis-formitem-option-id]");
			var responses = JSON.parse(valueToSet.options[0].content);
			var iCounter = 0;
			$textFormItems.each(function (index) {
				var $textFormItem = $(this);
				var $mceEditor = $(tinymce.get($textFormItem.attr("id")).getBody());
				$mceEditor.html(responses[iCounter++]);
			});
		}
	}
	this.$item.trigger("change");
};

aefis.FormItems.TEXT.prototype.revertValue = function (oldValue) {
	var enableMultipleEntries = this.$item.attr("data-aefis-enable-multiple-entires");
	if (typeof enableMultipleEntries === "undefined" || enableMultipleEntries == false) {
		$(
			tinymce
				.get(this.$item.find("textarea[data-aefis-formitem-option-id]").attr("id"))
				.getBody()
		).html(oldValue.options[0].content);
	} else {
		if (oldValue.options[0].content) {
			var $textFormItems = this.$item.find("textarea[data-aefis-formitem-option-id]");
			var responses = JSON.parse(oldValue.options[0].content);
			var iCounter = 0;
			$textFormItems.each(function (index) {
				var $textFormItem = $(this);
				var $mceEditor = $(tinymce.get($textFormItem.attr("id")).getBody());
				$mceEditor.html(responses[iCounter++]);
			});
		}
	}
};

aefis.FormItems.TEXT.prototype.clearResponse = function () {
	$(
		tinymce.get(this.$item.find("textarea[data-aefis-formitem-option-id]").attr("id")).getBody()
	).html("");
};

aefis.FormItems.TEXT.prototype.initializeTinyMCE = function () {
	var isInit = tinymce.editors.length;
	if (isInit) {
		var toolbar =
			"undo redo | styleselect | cut copy paste | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table | link image | forecolor backcolor | code ";
		tinymce.init({
			selector: "textarea.editor",
			forced_root_block: "",
			force_br_newlines: true,
			force_p_newlines: false,
			menubar: false,
			statusbar: true,
			theme: "modern",
			convert_urls: true,
			relative_urls: false,
			browser_spellcheck: true,
			plugins: [
				"paste print preview textcolor link image code advlist lists contextmenu table advlist"
			],
			image_advtab: true,
			toolbar1: toolbar,
			paste_word_valid_elements:
				"b,strong,i,em,h1,h2,p,ol,ul,li,a,u,table,tr,td,th,thead,tbody",
			resize: "height",
			init_instance_callback: "aefis.app.initTinyMCE",
			setup: function (editor, event) {
				editor.on("focus", function () {});
				editor.on("blur", function () {
					tinymce.triggerSave();
					$("#" + this.id).trigger("change");
				});
				editor.on("change", function () {});
				editor.on("PostProcess", function (e, o) {
					aefis.app.log("TinyMCE Process");
					var content = e.content;
					content = content.replace(/<!--[\s\S]*?-->/g, "");
					content = content.replace(/<!--[\s\S]*?-->/g, "");
					content = content.replace(/<!--[\s\S]*?-->/g, "");
					content = content.replace(/<!--[\s\S]*?-->/g, "");
					e.content = content;
				});
			}
		});
	}
};

/**
 * SLT single line text box that saves contents to a single form item option
 */
aefis.FormItems.SLT = function () {};
aefis.FormItems.SLT.prototype = new aefis.FormItems.Item();

aefis.FormItems.SLT.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("input").prop("disabled", false);
	} else {
		this.$item.find("input").prop("disabled", true);
	}
};

aefis.FormItems.SLT.prototype.getValue = function () {
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: this.$item
					.find("input[data-aefis-formitem-option-id]")
					.attr("data-aefis-formitem-option-id"),
				content: this.$item.find("input[data-aefis-formitem-option-id]").val()
			}
		]
	};
	return value;
};

aefis.FormItems.SLT.prototype.revertValue = function (oldValue) {
	this.$item.find("input[data-aefis-formitem-option-id]").val(oldValue.options[0].content);
};

aefis.FormItems.SLT.prototype.clearResponse = function (oldValue) {
	this.$item.find("input[data-aefis-formitem-option-id]").val("");
};

/**
 * TABLE draws a table based on question attributes data. then saves normalized table contents (head/body) to a single form item option
 */
aefis.FormItems.TABLE = function () {};
aefis.FormItems.TABLE.prototype = new aefis.FormItems.Item();

aefis.FormItems.TABLE.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.find("table.aefis-editable-table").on("deletedRow", function () {
		that.$item.trigger("formItemChanged", {
			oldValue: that.oldValue,
			newValue: that.getValue()
		});
	});
};

aefis.FormItems.TABLE.prototype.getValue = function () {
	var $theTable = this.$item.find("table[data-aefis-formitem-option-id]");
	var tableValue = "";
	var editTableObj = $theTable.data("aefis-editableTable");
	if (editTableObj) {
		tableValue = editTableObj.val();
	}
	var $fullCopy = $theTable.clone();

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $theTable.attr("data-aefis-formitem-option-id"),
				content: tableValue, 
				fullCopy: $fullCopy.html()
			}
		]
	};

	var $itemForRequired = this.$item.find(".aefis-table-formitem-validator");
	if ($itemForRequired.length) {
		if (tableValue) {
			$itemForRequired.val(JSON.stringify(tableValue));
		} else {
			var initialValue = $itemForRequired.attr("data-aefis-initial-value");
			if (initialValue) {
				$itemForRequired.val(initialValue);
			}
		}
		$itemForRequired.trigger("onFormatFormFieldMarkup");
	}

	return value;
};

aefis.FormItems.TABLE.prototype.revertValue = function (oldValue) {
	this.$item.find("table[data-aefis-formitem-option-id]").html(oldValue.options[0].fullCopy);
};

/**
 * INSTOUTCOME lists outcomes and saves them as ID array in a single form item option
 */
aefis.FormItems.INSTOUTCOMES = function () {};
aefis.FormItems.INSTOUTCOMES.prototype = new aefis.FormItems.Item();

aefis.FormItems.INSTOUTCOMES.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:checkbox").off("ifToggled", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.INSTOUTCOMES.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var checkedOptions = [];
	this.$item.find("input:checkbox").each(function (index, el) {
		if (el.checked) {
			checkedOptions.push($(el).attr("data-aefis-outcome-id"));
		}
	});
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(checkedOptions)
			}
		]
	};
	return value;
};

/**
 * STUDENTOUTCOMES lists outcomes and saves them as ID array in a single form item option
 */
aefis.FormItems.STUDENTOUTCOMES = function () {};
aefis.FormItems.STUDENTOUTCOMES.prototype = new aefis.FormItems.Item();

aefis.FormItems.STUDENTOUTCOMES.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:checkbox").off("ifToggled", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.STUDENTOUTCOMES.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcomeContainer = {};
	outcomeContainer.showPerformanceIndicators = false;
	var showPerfIndicators = $optionsContainer.find(
		"input[name^='form-item-outcome-show-indicators-']:checkbox:first"
	);
	if (showPerfIndicators != null && showPerfIndicators.length > 0)
		outcomeContainer.showPerformanceIndicators = showPerfIndicators[0].checked;

	outcomeContainer.checkedOptions = [];
	this.$item.find("input[data-aefis-for-entity='outcome']:checkbox").each(function (index, el) {
		var outcome = { outcomeId: $(el).attr("data-aefis-outcome-id") };
		outcome.performanceIndicators = [];
		if (el.checked) {
			if (outcomeContainer.showPerformanceIndicators) {
				$(
					"input[name='form-item-outcome-indicators-" + outcome.outcomeId + "']:checkbox"
				).each(function (indicatorIndex, indicatorEl) {
					if (indicatorEl.checked) {
						outcome.performanceIndicators.push(
							$(indicatorEl).attr("data-aefis-outcome-indicator-id")
						);
					}
				});
			}
			outcomeContainer.checkedOptions.push(outcome);
		}
	});
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(outcomeContainer)
			}
		]
	};
	return value;
};

/**
 * PROGRAMOUTCOMEQUESTIONS lists outcomes and saves them as ID array in a single form item option
 */
aefis.FormItems.PROGRAMOUTCOMEQUESTIONS = function () {};
aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("input:checkbox[id^='form-item-studentoutcome-list-item-']")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".add-response-outcomes-button")
			.off("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this))
			.on("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this));
		this.$item
			.find(".edit-response-outcomes-copied-content-button")
			.off("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this))
			.on("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this));
	} else {
		this.$item
			.find("input:checkbox[id^='form-item-studentoutcome-list-item-']")
			.off("ifToggled", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".add-response-outcomes-button")
			.off("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this));
		this.$item
			.find(".edit-response-outcomes-copied-content-button")
			.off("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this));
	}
};

// add outcomes button handler, opens add dialog
aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.addOutcomesForCopyToButtonHandler = function (
	event
) {
	event.preventDefault();
	var thisScope = this;
	var $formItem = thisScope.$item;
	var $addResponseButton = $(event.target).closest(".add-response-outcomes-button");
	var outcomeId = $addResponseButton.attr("data-aefis-outcome-id");
	var outcomeCode = $addResponseButton.attr("data-aefis-outcome-code");
	var formItemId = $addResponseButton.attr("data-aefis-formitem-id");
	var formItemOptionId = $addResponseButton.attr("data-aefis-formitem-option-id");
	var $optionsContainer = $formItem.find(".aefis-form-item-options-container");
	var $outcomesCopyToOptions = $("#program-outcome-questions-add-outcomes-content-" + formItemId);
	var outcomesCopyToOptionsContent = $outcomesCopyToOptions.html();
	var outcomesListSelector = ".modal-body > #program-outcome-questions-add-outcomes";
	// open dialog
	var modalOptions = {
		title: $outcomesCopyToOptions.attr("dialog-title"),
		content: outcomesCopyToOptionsContent,
		size: $outcomesCopyToOptions.attr("dialog-size"),
		showFooterCloseButton: true,
		onShown: function () {
			aefis.ui.initializeAefisInput(outcomesListSelector, function () {
				// setup ui (hide this outcome, check the ones already applied)
				$(outcomesListSelector + " #outcome-" + outcomeId).hide();
				$(outcomesListSelector + " #outcome-" + outcomeId)
					.parent()
					.hide();
				// hide any others being copied to / from
				var outcomeExclusions = "";
				$(
					".aefis-form-item-embedded-questions-container:not([data-aefis-embedded-questions-parent-secondary-id=" +
						outcomeId +
						"])"
				).each(function () {
					var idList = $(this).attr("data-aefis-copy-to-secondary-id-list");
					if (idList.length) {
						var idArray = $.makeArray(idList.split(",")).filter(function (elem) {
							return elem !== "";
						});
						for (var i = 0; i <= idArray.length; i++) {
							$(outcomesListSelector + " #outcome-" + idArray[i]).hide();
							$(outcomesListSelector + " #outcome-" + idArray[i])
								.parent()
								.hide();
						}
						$(
							outcomesListSelector +
								" #outcome-" +
								$(this).attr("data-aefis-embedded-questions-parent-secondary-id")
						).hide();
						$(
							outcomesListSelector +
								" #outcome-" +
								$(this).attr("data-aefis-embedded-questions-parent-secondary-id")
						)
							.parent()
							.hide();
					}
				});
				// remove current outcome, check those already selected before adding listeners
				var $embeddedOptionsContainer = $(
					"#aefis-form-item-embedded-questions-container-" +
						formItemId +
						"-" +
						formItemOptionId +
						"-" +
						outcomeId
				);
				var copyToOutcomeIdArray = $.makeArray(
					$embeddedOptionsContainer
						.attr("data-aefis-copy-to-secondary-id-list")
						.split(",")
				).filter(function (elem) {
					return elem !== "";
				});
				for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
					// check this option in dialog
					$(
						outcomesListSelector +
							" #aefis-program-outcome-questions-add-" +
							formItemId +
							"-" +
							formItemOptionId +
							"-" +
							copyToOutcomeIdArray[i]
					).iCheck("check");
				}
				// register listeners for this outcome
				$(outcomesListSelector + " input:checkbox").on(
					"ifToggled",
					$.proxy(thisScope.addOutcomeForCopyToHandler, this)
				);
				// set this target outcome id
				$(
					outcomesListSelector +
						" [id^=aefis-program-outcome-questions-add-" +
						formItemId +
						"-" +
						formItemOptionId +
						"-]"
				).attr("data-aefis-copy-from-outcome-id", outcomeId);
				$(
					outcomesListSelector +
						" [id^=aefis-program-outcome-questions-add-" +
						formItemId +
						"-" +
						formItemOptionId +
						"-]"
				).attr("data-aefis-copy-from-outcome-code", outcomeCode);
			});
			$(outcomesListSelector).show();
		}
	};
	aefis.ui.modalDialog(modalOptions);
	return false;
};

// checkboxes for selecting / adding outcomes to be copied to (button represents the 'copied to' outcome, not the one doing updating)
aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.addOutcomeForCopyToHandler = function (event) {
	var checked = event.target.checked;
	var $chk = $(event.target);
	var formItemId = $(this).attr("data-aefis-formitem-id");
	var formItemOptionId = $(this).attr("data-aefis-formitem-option-id");
	var copyToOutcomeId = $(this).attr("data-aefis-outcome-id");
	var copyFromOutcomeId = $(this).attr("data-aefis-copy-from-outcome-id");
	var copyFromOutcomeCode = $(this).attr("data-aefis-copy-from-outcome-code");
	// update data attriute in the outcome form outcome checkbox or parent div for use when content in related form is changed
	var $embeddedOptionsContainer = $(
		"#aefis-form-item-embedded-questions-container-" +
			formItemId +
			"-" +
			formItemOptionId +
			"-" +
			copyFromOutcomeId
	);
	var copyToOutcomeIdArray = $.makeArray(
		$embeddedOptionsContainer.attr("data-aefis-copy-to-secondary-id-list").split(",")
	).filter(function (elem) {
		return elem !== "";
	});
	if (checked && $.inArray(copyToOutcomeId, copyToOutcomeIdArray) < 0) {
		$chk.iCheck("check");
		copyToOutcomeIdArray[copyToOutcomeIdArray.length] = copyToOutcomeId;
		$embeddedOptionsContainer.attr(
			"data-aefis-copy-to-secondary-id-list",
			copyToOutcomeIdArray.toString()
		);
		// check the outcome checkbox
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("check", function () {
			// but hide the template content since being copied to from this outcome now
			$(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeId
			).hide();
			$(
				"#form-item-studentoutcome-list-item-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeId
			).iCheck("disable");
		});
		// hide the add outcomes to copy to (plus) button
		$(
			".add-response-outcomes-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).hide();
		// show the edit button
		$(
			".edit-response-outcomes-copied-content-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).show();
		// update target / copy to outcome message
		$(
			".add-response-outcomes-message[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).html("Updated by " + copyFromOutcomeCode);
		// update copy from outcome message
		// get codes first
		var copyToOutcomeCodeArray = [];
		for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
			copyToOutcomeCodeArray[copyToOutcomeCodeArray.length] = $(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeIdArray[i]
			).attr("data-aefis-embedded-questions-parent-secondary-code");
		}
		$(
			".add-response-outcomes-message[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyFromOutcomeId +
				"]"
		).html("Updates " + copyToOutcomeCodeArray.toString());
		// copy responses to checked outcome form items
		$(
			"#aefis-form-item-embedded-questions-container-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		)
			.find(".aefis-formitem")
			.each(function (index) {
				var $formItem = $(this);
				var formItemId = $formItem.attr("data-aefis-formitem-id");
				var formItemCode = $formItem.attr("data-aefis-formitem-code");
				var fromFormItem = aefis.formItems.getFormItem(
					formItemCode,
					formItemId,
					copyFromOutcomeId
				);
				var toFormItem = aefis.formItems.getFormItem(
					formItemCode,
					formItemId,
					copyToOutcomeId
				);
				var val = fromFormItem.getValue();
				if (formItemCode == "RELATIONALDATA") {
					var contentVal = "";
					for (var relationalDataItemType in fromFormItem.items) {
						for (var relationalDataItem of fromFormItem.items[relationalDataItemType]) {
							contentVal = relationalDataItem.getValue().options[0].content;
						}
					}
					for (var relationalDataItemType in toFormItem.items) {
						for (var relationalDataItem of toFormItem.items[relationalDataItemType]) {
							var val = relationalDataItem.getValue();
							val.options[0].content = contentVal;
							relationalDataItem.setValue(val);
						}
					}
				} else {
					toFormItem.setValue(fromFormItem.getValue());
				}
			});
		//show embeded template
		var embeddedTemplate = $(
			".aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id=" +
				formItemOptionId +
				"][data-aefis-embedded-questions-parent-secondary-id=" +
				copyToOutcomeId +
				"]"
		);
		embeddedTemplate.show();
	} else if (!checked && $.inArray(copyToOutcomeId, copyToOutcomeIdArray) >= 0) {
		$chk.iCheck("uncheck");
		copyToOutcomeIdArray.splice($.inArray(copyToOutcomeId, copyToOutcomeIdArray), 1);
		$embeddedOptionsContainer.attr(
			"data-aefis-copy-to-secondary-id-list",
			copyToOutcomeIdArray.toString()
		);
		//todo: toggle embedded form to hide??? (maybe remove, if added, info to say 'being copied to from outcome blah?)
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("uncheck");
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("enable");
		// hide the edit button
		$(
			".edit-response-outcomes-copied-content-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).hide();
		// show the add outcomes to copy to (plus) button
		$(
			".add-response-outcomes-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).show();
		// update message
		$(
			".add-response-outcomes-message[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).html("");
		// update copy from outcome message
		// get codes first
		var copyToOutcomeCodeArray = [];
		for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
			copyToOutcomeCodeArray[copyToOutcomeCodeArray.length] = $(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeIdArray[i]
			).attr("data-aefis-embedded-questions-parent-secondary-code");
		}
		if (copyToOutcomeCodeArray.length) {
			$(
				".add-response-outcomes-message[data-aefis-formitem-id=" +
					formItemId +
					"][data-aefis-formitem-option-id=" +
					formItemOptionId +
					"][data-aefis-outcome-id=" +
					copyFromOutcomeId +
					"]"
			).html("Updates " + copyToOutcomeCodeArray.toString());
		} else {
			$(
				".add-response-outcomes-message[data-aefis-formitem-id=" +
					formItemId +
					"][data-aefis-formitem-option-id=" +
					formItemOptionId +
					"][data-aefis-outcome-id=" +
					copyFromOutcomeId +
					"]"
			).html("");
		}
		//hide embeded template
		var embeddedTemplate = $(
			".aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id=" +
				formItemOptionId +
				"][data-aefis-embedded-questions-parent-secondary-id=" +
				copyToOutcomeId +
				"]"
		);
		embeddedTemplate.hide();
	}
};

// edit button for changing embedded content that is being updated by another outcome's content
aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.editResponseOutcomesCopiedContentButtonHandler =
	function (event) {
		var $addResponseButton = $(event.target).parent(
			".edit-response-outcomes-copied-content-button"
		);
		var outcomeId = $addResponseButton.attr("data-aefis-outcome-id");
		var formItemId = $addResponseButton.attr("data-aefis-formitem-id");
		var formItemOptionId = $addResponseButton.attr("data-aefis-formitem-option-id");
		// show the outcome template content
		$(
			"#aefis-form-item-embedded-questions-container-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				outcomeId
		).show();
	};

aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.onChangeHandler = function (event) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcome = { outcomeId: $(event.target).attr("data-aefis-outcome-id") };
	var embeddedTemplate = $(
		".aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id=" +
			$optionsContainer.attr("data-aefis-formitem-option-id") +
			"][data-aefis-embedded-questions-parent-secondary-id=" +
			outcome.outcomeId +
			"]"
	);
	if (event.target.checked) {
		embeddedTemplate.show();
	} else {
		embeddedTemplate.hide();
	}
	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find(".aefis-program-outcome-question").iCheck("enable");
	} else {
		this.$item.find(".aefis-program-outcome-question").iCheck("disable");
	}
};

aefis.FormItems.PROGRAMOUTCOMEQUESTIONS.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcomeContainer = {};
	outcomeContainer.checkedOptions = [];
	this.$item.find("input[data-aefis-for-entity='outcome']:checkbox").each(function (index, el) {
		var outcome = { outcomeId: $(el).attr("data-aefis-outcome-id") };
		if (el.checked) {
			outcomeContainer.checkedOptions.push(outcome);
		}
	});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(outcomeContainer)
			}
		]
	};

	return value;
};

/**
 * COURSELEARNINGINDICATORS lists course indicators and saves changes in selection as and ID array in a single form item option
 */
aefis.FormItems.COURSELEARNINGINDICATORS = function () {};
aefis.FormItems.COURSELEARNINGINDICATORS.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSELEARNINGINDICATORS.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:checkbox").off("ifToggled", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.COURSELEARNINGINDICATORS.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var checkedOptions = [];
	this.$item.find("input:checkbox").each(function (index, el) {
		if (el.checked) {
			checkedOptions.push($(el).attr("data-aefis-learning-indicator-id"));
		}
	});
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(checkedOptions)
			}
		]
	};
	return value;
};

/**
 * DOC document upload with one document upload option per form item options
 */
aefis.FormItems.DOC = function () {};
aefis.FormItems.DOC.prototype = new aefis.FormItems.Item();

/**
 * specific function for setting document type form items. is called by itself by overriding initialize and handling it's own functionality
 */

aefis.FormItems.DOC.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	if ($container.find(".aefis-dropzone").length != 0) {
		that.initializeDropZone($container);
	} else {
		that.initializeFileUpload($container);
	}
};

aefis.FormItems.DOC.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".document-url")
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item.find(".document-url").off("change", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.DOC.prototype.onChangeHandler = function (event) {
	var that = this;
	this.newValue = this.getValue("url");

	if (this.newValue.options) {
		if (this.newValue.options.length > 0) {
			this.$item
				.find(".document-url")
				.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
			if (this.setSaving) {
				this.setSaving(true);
			}

			if (this.newValue.options[0].content != "") {
				that.enableDocument(false);
			} else {
				that.enableDocument(true);
			}
		}
	}
};

aefis.FormItems.DOC.prototype.enableDocument = function (enable) {
	var that = this;
	var $dropzone = $("#dropzone-document-upload");
	var dropzoneInstance = Dropzone.forElement("#dropzone-document-upload");

	if (enable) {
		dropzoneInstance.setupEventListeners();
		$(".dz-message").html($dropzone.attr("data-aefis-enabled-message"));
	} else {
		dropzoneInstance.removeEventListeners();
		$(".dz-message").html($dropzone.attr("data-aefis-disabled-message"));
	}
};

aefis.FormItems.DOC.prototype.enableUrl = function (enable) {
	var that = this;
	var $documentUrl = $(".document-url");

	if (enable) {
		$documentUrl.removeAttr("disabled").removeClass("disabled");
	} else {
		$documentUrl.attr("disabled", true).addClass("disabled");
	}
};

aefis.FormItems.DOC.prototype.initializeFileUpload = function ($container) {
	var that = this;
	var $formContainer = $container.parents(".aefis-form-container");
	this.$item = $container;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.formEntryId = $formContainer.attr("data-aefis-form-id");
	this.downloadUrl = $formContainer.attr("data-aefis-formitem-document-download-url");
	this.saveUrl = $formContainer.attr("data-aefis-formitem-document-save-url");

	// setup download links ready on init of formitem
	$container.find("a.formItemContentDownloadLink.forInit").each(function (index) {
		var $el = $(this);
		var fileUuid = $el.attr("data-aefis-filename");
		var $formItemOptionContainer = $el.parents(".file-upload-option-container");
		var formItemOptionId = $formItemOptionContainer.attr("data-aefis-formitem-option-id");
		var downloadArgs = {
			fileUuid: fileUuid,
			formEntryId: that.formEntryId,
			formItemId: that.id,
			formItemOptionId: formItemOptionId
		};
		that.setFileDownloadLink(downloadArgs);
	});

	// setup UI triggered file uploads
	$container.find("input[id^='fileuploadformitemoption-']").each(function (index) {
		var $el = $(this);
		var formItemOptionId = $el
			.parents(".file-upload-option-container")
			.attr("data-aefis-formitem-option-id");
		var data = {
			formEntryId: that.formEntryId,
			formItemId: that.id,
			formItemOptionId: formItemOptionId,
			filefieldnamekey: $el.attr("name")
		};
		if (that.embeddedQuestionParentOptionId) {
			data.embeddedParentOptionId = that.embeddedQuestionParentOptionId;
		}
		if (that.embeddedQuestionSecondaryId) {
			data.embeddedParentSecondaryId = that.embeddedQuestionSecondaryId;
		}
		// disable any global question change triggers
		$el.parents(".aefis-formitem").off("formitemchanged");
		$el.parents(".aefis-formitem").off("change");
		$el.fileupload({
			dataType: "json",
			dropZone: null,
			pasteZone: null,
			url: that.saveUrl,
			formData: data,
			progress: function (e, data) {
				var progress = parseInt((data.loaded / data.total) * 100, 10);
				$(data.progressSelector + " .progress-bar").css("width", progress + "%");
			},
			start: function (e, data) {
				$(data.progressSelector).show();
				$(data.errorSelector).hide();
				$(data.errorSelector).html("");
				$(e.target).prop("disabled", true);
				$(e.target).siblings(".filebuttontext").html("Loading...");
			},
			done: function (e, data) {
				var result = data.result.DATA;
				var setArgs = {
					formEntryId: data.formData.formEntryId,
					formItemId: data.formData.formItemId,
					formItemOptionId: data.formData.formItemOptionId,
					fileUuid: result.fileUuid || result.fileuuid,
					filename: result.filename,
					extension: result.extension,
					size: result.size
				};
				var copyToSecondaryIdArray = that.getEmbeddedQuestionCopyToSecondaryIdArray();
				if (that.embeddedQuestionParentOptionId) {
					setArgs.embeddedParentOptionId = that.embeddedQuestionParentOptionId;
				}
				if (that.embeddedQuestionSecondaryId) {
					setArgs.embeddedParentSecondaryId = that.embeddedQuestionSecondaryId;
				}
				that.setFileInfoUi("saved", setArgs, function () {
					that.setOptionValue(setArgs);
				});
			},
			fail: function (e, data) {
				$(data.errorSelector).show();
				$(data.errorSelector).html("There was an error saving the file.");
			},
			always: function (e, data) {
				$(data.progressSelector + " .progress-bar").css("width", "0%");
				$(e.target).siblings(".filebuttontext").html("Select File");
				$(e.target).prop("disabled", false);
			}
		})
			.prop("disabled", !$.support.fileInput)
			.parent()
			.addClass($.support.fileInput ? undefined : "disabled");
	});
};

aefis.FormItems.DOC.prototype.initializeDropZone = function ($container) {
	var that = this;
	if ($container.hasClass("dropzone-processed")) {
		return;
	}

	var $formContainer = $container.parents(".aefis-form-container");

	if (Dropzone) {
		var data = {};

		var embeddedQuestionParentOptionId = that.getEmbeddedQuestionParentOptionId();
		var embeddedQuestionSecondaryId = that.getEmbededQuestionSecondaryId();
		var dzoneSelectorString = "";
		if (embeddedQuestionParentOptionId) {
			data.embeddedParentOptionId = embeddedQuestionParentOptionId;
			dzoneSelectorString +=
				'div.aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id="' +
				data.embeddedParentOptionId +
				'"]';
		}
		if (embeddedQuestionSecondaryId) {
			data.embeddedParentSecondaryId = embeddedQuestionSecondaryId;
			if (dzoneSelectorString.length) {
				dzoneSelectorString +=
					'[data-aefis-embedded-questions-parent-secondary-id="' +
					data.embeddedParentSecondaryId +
					'"]';
			} else {
				dzoneSelectorString +=
					'div.aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-secondary-id="' +
					data.embeddedParentSecondaryId +
					'"]';
			}
		}
		if (dzoneSelectorString.length) {
			dzoneSelectorString += " ";
		}
		dzoneSelectorString += 'div.aefis-formitem[data-aefis-formitem-id="' + this.id + '"]';

		Dropzone.autoDiscover = false;
		var dropzoneInstance = Dropzone.forElement(
			dzoneSelectorString + " #dropzone-document-upload-" + this.id
		);
		dropzoneInstance.options.autoProcessQueue = true;
		dropzoneInstance.options.parallelUploads = 1;
		dropzoneInstance.options.timeout = 120000;

		var $formContainer = $container.parents(".aefis-form-container");
		var id = $container.attr("data-aefis-formitem-id");
		var formEntryId = $formContainer.attr("data-aefis-form-id");
		var $dropzone = $container.find("#dropzone-document-upload-" + this.id);
		var formItemOptionId = $dropzone
			.parents(".file-upload-option-container")
			.attr("data-aefis-formitem-option-id");

		var isDisabled = $dropzone.attr("data-aefis-disabled");
		if (typeof isDisabled !== typeof undefined && isDisabled == "true") {
			dropzoneInstance.disable();
		}

		data.formEntryId = formEntryId;
		data.formItemId = id;
		data.formItemOptionId = formItemOptionId;
		data.filefieldnamekey = "file";
		dropzoneInstance.options.params = data;

		var mocks = $container.find("#dropzone-document-mockFiles-" + this.id).find("label");
		for (var i = 0; i < mocks.length; i++) {
			var mock = {
				name: $(mocks[i]).attr("mockFile-name"),
				size: $(mocks[i]).attr("mockFile-size")
			};

			dropzoneInstance.options.addedfile.call(dropzoneInstance, mock);
			mock.previewElement.classList.add("dz-complete");
			$(mock.previewElement).prop("id", $(mocks[i]).attr("mockFile-id"));
			$(mock.previewElement).attr("fileUuid", $(mocks[i]).attr("mockFile-fileUuid"));
			dropzoneInstance.options.thumbnail.call(
				dropzoneInstance,
				mock,
				"/assets/images/icons/Office/PNG/128/525616 - attach attachment clip office paper paperclip stat.png"
			);
			$container.find(".dz-message").hide();
		}
		if (mocks.length != 0) {
			that.enableUrl(false);
		}

		dropzoneInstance.on("error", function (file, response) {
			var errorText = $(response)
				.find(".label")
				.filter(function () {
					return $(this).html() === "Message";
				})
				.next("td")
				.html();
			$(file.previewElement).find(".dz-error-message").text(errorText);
		});

		dropzoneInstance.on("addedfile", function (file) {
			dropzoneInstance.emit(
				"thumbnail",
				file,
				"/assets/images/icons/Office/PNG/128/525616 - attach attachment clip office paper paperclip stat.png"
			);
			$container.find(".dz-message").hide();
		});

		var $el = $container.find("#dropzone-document-upload-" + this.id);
		$el.off("refresh").on("completed", function (event, data, file) {
			var completedPreview = $el.find(".dz-processing");
			completedPreview.prop("id", data.DATA.Id).removeClass("dz-processing");
			completedPreview.attr("fileUuid", data.DATA.fileUuid);
			that.$item.attr("data-aefis-history-id", data.DATA.historyId);
			$formContainer.attr(
				"data-aefis-latest-form-item-content-history-id",
				data.DATA.historyId
			);

			that.createLink(completedPreview[0]);
		});

		$container.find(".dz-preview").each(function () {
			that.createLink(this);
		});
	}

	if ($container.find(".document-url").length != 0) {
		var url = $container.find(".document-url").val();
		if (url != "") {
			setTimeout(function () {
				that.enableDocument(false);
			}, 1000);
		}
	}

	$container.addClass("dropzone-processed");
};

aefis.FormItems.DOC.prototype.createLink = function (previewItem) {
	var $formContainer = $(previewItem).parents(".aefis-form-container");
	var displayType = $(previewItem).closest(".aefis-dropzone").attr("data-aefis-display-type");
	var that = this;
	var linksDiv = document.createElement("div");
	$(previewItem).append(linksDiv);
	$(linksDiv).attr("style", "padding-top: 15px;");

	var downloadUrl = $formContainer.attr("data-aefis-formitem-document-app-host");
	downloadUrl += $formContainer.attr("data-aefis-formitem-document-download-url");
	downloadUrl += "" + "formEntryId=" + $formContainer.attr("data-aefis-form-id");
	downloadUrl +=
		"&formItemId=" + $(previewItem).parents(".aefis-formitem").attr("data-aefis-formitem-id");
	downloadUrl +=
		"&formItemOptionId=" +
		$(previewItem)
			.parents(".file-upload-option-container")
			.attr("data-aefis-formitem-option-id");
	downloadUrl += "&fileUuid=" + $(previewItem).attr("fileUuid");

	var $embeddedContainer = $(previewItem).parents(
		".aefis-form-item-embedded-questions-container"
	);
	if ($embeddedContainer.length > 0) {
		var parentOptionId = $embeddedContainer.attr(
			"data-aefis-embedded-questions-parent-option-id"
		);
		if (typeof parentOptionId !== "undefined") {
			downloadUrl += "&embeddedParentOptionId=" + parentOptionId;
		}
		var secondaryOptionId = $embeddedContainer.attr(
			"data-aefis-embedded-questions-parent-secondary-id"
		);
		if (typeof secondaryOptionId !== "undefined") {
			downloadUrl += "&embeddedParentSecondaryId=" + secondaryOptionId;
		}
	}

	if (displayType == "form") {
		var deleteLink = document.createElement("a");
		$(deleteLink).attr("style", "z-index: 21;"); // place over preview
		$(deleteLink).text("Remove Document");
		$(deleteLink).attr("href", "javascript:void(0);");
		$(deleteLink).addClass("aefis-object-action delete");

		$(deleteLink)
			.off()
			.on("click", function () {
				that.removeDocument(previewItem);
			});
		$(linksDiv).append(deleteLink);
	} else {
		var downloadLink = document.createElement("a");
		$(downloadLink).attr("style", "z-index: 21;"); // place over preview
		$(downloadLink).text("Download Document");
		$(downloadLink).attr("href", downloadUrl);
		$(downloadLink).addClass("aefis-object-action download");
		$(linksDiv).append(downloadLink);
	}

	var previewLink = document.createElement("a");
	$(previewLink).attr("style", "z-index: 21;"); // place over preview
	$(previewLink).text("Preview Document");
	$(previewLink).attr("href", "javascript:void(0);");
	$(previewLink).addClass("aefis-object-action preview");

	$(previewLink)
		.off()
		.on("click", function () {
			//var documentUrl = 'https://www.ets.org/Media/Tests/GRE/pdf/gre_research_validity_data.pdf';
			if (downloadUrl) {
				aefis.ui.filePreview("", downloadUrl, null, false);
			}
		});
	$(linksDiv).append("<br />").append(previewLink);
	that.enableUrl(false);
};

aefis.FormItems.DOC.prototype.removeDocument = function (previewItem) {
	var that = this;
	var $el = $(previewItem);
	//var $formItemContainer = $el.parents('.aefis-formitem');
	//var $formContainer = $el.parents('.aefis-form-container');
	var url = this.$container
		.find("#dropzone-document-upload-" + this.id)
		.attr("data-aefis-action");

	var $dropzone = this.$container.find("#dropzone-document-upload-" + this.id);
	var $formContainer = this.$container.parents(".aefis-form-container");
	var id = this.$container.attr("data-aefis-formitem-id");
	var formEntryId = $formContainer.attr("data-aefis-form-id");
	var formItemOptionId = $dropzone
		.parents(".file-upload-option-container")
		.attr("data-aefis-formitem-option-id");
	var data = {};
	data.formEntryId = formEntryId;
	data.formItemId = id;
	data.formItemOptionId = formItemOptionId;
	data.fileUuid = $el.attr("fileUuid");

	// embedded and copy to capability
	var copyToSecondaryIdArray = that.getEmbeddedQuestionCopyToSecondaryIdArray();
	var embeddedQuestionParentOptionId = that.getEmbeddedQuestionParentOptionId();
	var embeddedQuestionSecondaryId = that.getEmbededQuestionSecondaryId();

	var dzoneSelectorString = "";
	if (embeddedQuestionParentOptionId) {
		data.embeddedParentOptionId = embeddedQuestionParentOptionId;
		dzoneSelectorString +=
			'div.aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id="' +
			data.embeddedParentOptionId +
			'"]';
	}
	if (embeddedQuestionSecondaryId) {
		data.embeddedParentSecondaryId = embeddedQuestionSecondaryId;
		if (dzoneSelectorString.length) {
			dzoneSelectorString +=
				'[data-aefis-embedded-questions-parent-secondary-id="' +
				data.embeddedParentSecondaryId +
				'"]';
		} else {
			dzoneSelectorString +=
				'div.aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-secondary-id="' +
				data.embeddedParentSecondaryId +
				'"]';
		}
	}
	if (dzoneSelectorString.length) {
		dzoneSelectorString += " ";
	}

	// delete call
	new aefis.ApiWrapper().call(url, {
		type: "POST",
		data: JSON.stringify(data),
		onSuccess: function (data, jqXhr) {
			that.$container.find(".dz-message").show();
			that.$container.find(".dz-preview").hide();
			$(previewItem).remove();
			var dropzoneInstance = Dropzone.forElement(
				dzoneSelectorString + " #dropzone-document-upload-" + this.id
			);

			dropzoneInstance.files = [];
			that.enableUrl(true);
			that.$item.attr("data-aefis-history-id", data.DATA.historyId);
			$formContainer.attr(
				"data-aefis-latest-form-item-content-history-id",
				data.DATA.historyId
			);
		},
		onError: function (e, data) {}
	});
};

//todo: implement a getValue() method that returns data needed to copy (like returned form server) and setValue() that triggers copy of all options
aefis.FormItems.DOC.prototype.getValue = function (type) {
	var that = this;
	if (type == "url") {
		var $optionsContainer = this.$item.find(".file-upload-option-container");
		var value = {
			formItemId: this.$item.attr("data-aefis-formitem-id"),
			options: [
				{
					optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
					content: $optionsContainer.find(".document-url").val()
				}
			]
		};
		return value;
	} else {
		var returnObj = {
			formItemId: this.id,
			options: []
		};
		var $links = this.$item.find("a.formItemContentDownloadLink");
		$links.each(function (index) {
			var idx = returnObj.options.length;
			if ($(this).attr("data-aefis-filename").length) {
				// has doc
				returnObj.options[idx] = {
					formEntryId: that.formEntryId,
					formItemId: that.id,
					formItemOptionId: $(this)
						.parents(".file-upload-option-container")
						.attr("data-aefis-formitem-option-id"),
					fileUuid: $(this).attr("data-aefis-filename")
				};
			} else {
				// has doc
				returnObj.options[idx] = {
					formEntryId: that.formEntryId,
					formItemId: that.id,
					formItemOptionId: $(this)
						.parents(".file-upload-option-container")
						.attr("data-aefis-formitem-option-id")
				};
			}
			if (that.embeddedQuestionParentOptionId) {
				returnObj.options[idx].embeddedParentOptionId = that.embeddedQuestionParentOptionId;
			}
			if (that.embeddedQuestionSecondaryId) {
				returnObj.options[idx].embeddedParentSecondaryId = that.embeddedQuestionSecondaryId;
			}
		});
		return returnObj;
	}
};

aefis.FormItems.DOC.prototype.setValue = function (value) {
	for (var option in value.options) {
		this.setOptionValue(value.options[option]);
	}
};

/**
 * deletes and does ui cleanup if fileUuid is missing.
 * otherwise values should getValue() of formitem to copy from
 * including file info, formitem / option info
 * @value required for delete: { formItemOptionId }, for copy (info related to the item to copy from): { formItemId, formItemOptionId, fileUuid [, embeddedParentOptionId, embeddedParentSecondaryId] }
 */
aefis.FormItems.DOC.prototype.setOptionValue = function (value) {
	var that = this;
	if ($.type(value) !== "object" || !value.hasOwnProperty("formItemOptionId")) {
		aefis.ui.userError("There was a problem setting a value. Option ID was not provided.");
		return;
	}
	var formItemOptionId = value.formItemOptionId;

	/*
       helper functions
       @successCallback called with data returned from server-side copy request
       @errorCallback called with error, data returned
    */
	var copyDocument = function (copyFromData, successCallback, errorCallback) {
		if ($.type(successCallback) !== "function") {
			successCallback = function (data) {};
		}
		if ($.type(errorCallback) !== "function") {
			errorCallback = function (e, data) {};
		}
		var copyToData = {
			formEntryId: that.formEntryId,
			formItemId: that.id,
			formItemOptionId: formItemOptionId
		};
		if (that.embeddedQuestionParentOptionId) {
			copyToData.embeddedParentOptionId = that.embeddedQuestionParentOptionId;
		}
		if (that.embeddedQuestionSecondaryId) {
			copyToData.embeddedParentSecondaryId = that.embeddedQuestionSecondaryId;
		}
		var data = {
			action: "copyandsave",
			copyFromData: copyFromData,
			copyToData: copyToData
		};
		new aefis.ApiWrapper().call(that.saveUrl, {
			type: "POST",
			data: JSON.stringify(data),
			beforeSend: function () {
				if (window.parent) {
					window.parent.aefis.ui.hidePreviewObjectLoadingBar();
				}
			},
			onSuccess: function (data, jqXhr) {
				that.setFileInfoUi("saved", data);
				successCallback(data);
			},
			onError: function (e, data) {
				errorCallback(e, data);
				if (window.parent) {
					window.parent.aefis.ui.hidePreviewObjectLoadingBar();
				}
			},
			onComplete: function () {
				if (window.parent) {
					window.parent.aefis.ui.hidePreviewObjectLoadingBar();
				}
			}
		});
	}; // copyDocument()

	/*
       @successCallback called with data returned from server-side copy request
       @errorCallback called with error, data returned
    */
	var deleteDocument = function (formItemOptionId, successCallback, errorCallback) {
		if ($.type(successCallback) !== "function") {
			successCallback = function (data) {};
		}
		if ($.type(errorCallback) !== "function") {
			errorCallback = function (e, data) {};
		}
		var $el = that.$item.find(
			"#fileuploadformitemoption-" +
				formItemOptionId +
				"-fileinfo .delete-formitem-document-link"
		);
		//var $formItemContainer = $el.parents('.aefis-formitem');
		var $formContainer = $el.parents(".aefis-form-container");
		var url = $formContainer.attr("data-aefis-formitem-document-save-url");
		var data = {
			formEntryId: $formContainer.attr("data-aefis-form-id"),
			formItemId: that.$item.attr("data-aefis-formitem-id"),
			formItemOptionId: formItemOptionId,
			fileUuid: $el.attr("data-aefis-filename")
		};
		// embedded and copy to capability
		var copyToSecondaryIdArray = that.getEmbeddedQuestionCopyToSecondaryIdArray();
		var embeddedParentOptionId = that.getEmbeddedQuestionParentOptionId();
		var embeddedParentSecondaryId = that.getEmbededQuestionSecondaryId();
		if (embeddedParentOptionId) {
			data.embeddedParentOptionId = embeddedParentOptionId;
		}
		if (embeddedParentSecondaryId) {
			data.embeddedParentSecondaryId = embeddedParentSecondaryId;
		}
		// delete call
		new aefis.ApiWrapper().call(url, {
			type: "POST",
			data: JSON.stringify(data),
			onSuccess: function (data, jqXhr) {
				// removed
				// related embedded container delete
				for (var i = 0; i < copyToSecondaryIdArray.length; i++) {
					aefis.formItems
						.getFormItem("DOC", data.formItemId, copyToSecondaryIdArray[i])
						.setOptionValue({ formItemOptionId: data.formItemOptionId });
				}
				// do ui clean up and process related copies
				that.setFileInfoUi("removed", data);
				successCallback(data);
			},
			onError: function (e, data) {
				errorCallback(e, data);
			}
		});
	}; // deleteDocument()

	var currentItemFileUuid = that.$item
		.find(
			'.file-upload-option-container[data-aefis-formitem-option-id="' +
				value.formItemOptionId +
				'"]'
		)
		.find("#fileuploadformitemoption-" + value.formItemOptionId + "-fileinfo")
		.find(".formItemContentDownloadLink")
		.attr("data-aefis-filename");
	if (value.hasOwnProperty("fileUuid")) {
		if (value.fileUuid !== currentItemFileUuid) {
			if (currentItemFileUuid.length) {
				// delete with callback to copy / set new document info
				deleteDocument(value.formItemOptionId, copyDocument(value));
			} else {
				// copy / set new document info
				copyDocument(value, function () {
					var copyToSecondaryIdArray = that.getEmbeddedQuestionCopyToSecondaryIdArray();
					for (var i = 0; i < copyToSecondaryIdArray.length; i++) {
						aefis.formItems
							.getFormItem("DOC", that.id, copyToSecondaryIdArray[i])
							.setOptionValue(value);
					}
				});
			}
		} else {
			// seems the ui is already there for this uuid
			var copyToSecondaryIdArray = that.getEmbeddedQuestionCopyToSecondaryIdArray();
			for (var i = 0; i < copyToSecondaryIdArray.length; i++) {
				aefis.formItems
					.getFormItem("DOC", that.id, copyToSecondaryIdArray[i])
					.setOptionValue(value);
			}
		}
	} else {
		// delete
		deleteDocument(value.formItemOptionId);
	}
};

/**
 * adapter for direct ui delete call
 */
aefis.FormItems.DOC.deleteDocument = function (el) {
	var $el = $(el);
	var $embeddedContainer = $el.parents(".aefis-form-item-embedded-questions-container");
	var $formItemContainer = $el.parents(".aefis-formitem");
	var formItemId = $formItemContainer.attr("data-aefis-formitem-id");
	var $formItemOptionContainer = $el.parents(".file-upload-option-container");
	var formItemOptionId = $formItemOptionContainer.attr("data-aefis-formitem-option-id");
	if ($embeddedContainer.length) {
		var embeddedParentSecondaryId = $embeddedContainer.attr(
			"data-aefis-embedded-questions-parent-secondary-id"
		);
		aefis.formItems
			.getFormItem("DOC", formItemId, embeddedParentSecondaryId)
			.setOptionValue({ formItemOptionId: formItemOptionId });
	} else {
		aefis.formItems
			.getFormItem("DOC", formItemId)
			.setOptionValue({ formItemOptionId: formItemOptionId });
	}
	return false;
};

/**
 * @values { formItemOptionId [, fileUuid, filename, extension, size] }
 * @callback called with values as argument
 */
aefis.FormItems.DOC.prototype.setFileInfoUi = function (state, values, callback) {
	var that = this;
	if ($.type(callback) !== "function") {
		callback = function (data) {};
	}
	// show file info, hide button
	var $input = that.$item.find("#fileuploadformitemoption-" + values.formItemOptionId);
	var $placeholder = that.$item.find(
		"#fileuploadformitemoption-" + values.formItemOptionId + "-placeholder"
	);
	var $error = that.$item.find("#fileuploadformitemoption-" + values.formItemOptionId + "-error");
	var $fileInfo = that.$item.find(
		"#fileuploadformitemoption-" + values.formItemOptionId + "-fileinfo"
	);

	var $overriddenItem = that.$item.find("#overridden-formitem-" + values.formItemOptionId);
	if (state === "saved") {
		$placeholder.val(values.filename).trigger("focus").trigger("blur");
		$error.hide();
		if (values.fileUuid) {
			// delete link
			var $fileDeleteLink = $fileInfo.find(".delete-formitem-document-link");
			$fileDeleteLink.attr("data-aefis-filename", values.fileUuid);
			// download link
			that.setFileDownloadLink(values, true);
			$fileInfo.show();

			if ($overriddenItem.length > 0) {
				$fileDeleteLink.show();
				$overriddenItem.hide();
			} else {
				$input.closest(".btn-file").hide();
			}
		}
	} else if (state === "removed") {
		if ($overriddenItem.length > 0) {
			$placeholder.val(values.filename).trigger("focus").trigger("blur");
			$error.hide();
			if (values.fileUuid) {
				// delete link
				var $fileDeleteLink = $fileInfo.find(".delete-formitem-document-link");
				$fileDeleteLink.attr("data-aefis-filename", values.fileUuid);
				// download link
				that.setFileDownloadLink(values, true);
				$fileInfo.show();
				$input.closest(".btn-file").hide();
				$fileDeleteLink.hide();
				$overriddenItem.show();
			}
		} else {
			$fileInfo.find(".formItemContentDownloadLink").attr("data-aefis-filename", "");
			$fileInfo.find(".formItemContentDownloadLink").attr("href", "");
			$fileInfo.find(".formItemContentDownloadLink").html("");
			$fileInfo.find(".delete-formitem-document-link").attr("data-aefis-filename", "");
			$error.hide();
			$fileInfo.hide();
			$input.closest(".btn-file").show();
			$placeholder.val("");
		}
	}

	callback(values);
};

/**
 * @$formContainer the .aefis-form-container holding this form item
 * @values { formItemOptionId [, fileUuid, filename, extension, size] }
 */
aefis.FormItems.DOC.prototype.setFileDownloadLink = function (values, setLinkText) {
	var that = this;
	var tempDownloadUrl = that.downloadUrl;
	// show file info, hide button
	var $fileInfo = this.$item.find(
		"#fileuploadformitemoption-" + values.formItemOptionId + "-fileinfo"
	);
	if (values.fileUuid) {
		// download link
		if (tempDownloadUrl && tempDownloadUrl.indexOf("?") == -1) {
			tempDownloadUrl += "?";
		} else if (tempDownloadUrl && tempDownloadUrl.indexOf("?") < tempDownloadUrl.length - 1) {
			tempDownloadUrl += "&";
		}
		var downloadArgs = {
			fileUuid: values.fileUuid,
			formEntryId: that.formEntryId,
			formItemId: that.id,
			formItemOptionId: values.formItemOptionId
		};
		if (that.embeddedQuestionParentOptionId) {
			downloadArgs.embeddedParentOptionId = that.embeddedQuestionParentOptionId;
		}
		if (that.embeddedQuestionSecondaryId) {
			downloadArgs.embeddedParentSecondaryId = that.embeddedQuestionSecondaryId;
		}
		var $fileDownloadLink = $fileInfo.find(".fileinfo a");
		$fileDownloadLink.attr("href", tempDownloadUrl + $.param(downloadArgs));
		$fileDownloadLink.attr("data-aefis-filename", values.fileUuid);
		if (setLinkText) {
			var info = "";
			info = values.filename ? info + values.filename : info + "uploaded file";
			info = values.extension ? info + "." + values.extension : info;
			info = values.size ? info + " (" + aefis.util.formatFilesize(values.size) + ")" : info;
			$fileDownloadLink.html(info);
		}
	}
};

/**
 * DROPDOWN select with one or more options
 */
aefis.FormItems.DROPDOWN = function () {};
aefis.FormItems.DROPDOWN.prototype = new aefis.FormItems.Item();

aefis.FormItems.DROPDOWN.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.existingOptions = this.getExistingOptions();
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
};

aefis.FormItems.DROPDOWN.prototype.getExistingOptions = function () {
	var selectedOptions = [];
	var $select = this.$item.find("select");
	if ($select.prop("multiple")) {
		$select.find("option:selected").each(function (index, el) {
			selectedOptions.push($(this).val());
		});
	}
	return selectedOptions;
};

aefis.FormItems.DROPDOWN.prototype.onChangeHandler = function () {
	this.newValue = this.getValue();
	var deleteOthers = true;
	if (this.$item.find("select").prop("multiple")) {
		deleteOthers = false;
	}
	this.$item.trigger("formitemchanged", {
		oldValue: this.oldValue,
		newValue: this.newValue,
		deleteOthers: deleteOthers
	});
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.DROPDOWN.prototype.getValue = function () {
	var $select = this.$item.find("select");
	var value = { formItemId: this.id };
	if ($select.prop("multiple")) {
		var that = this;
		value["options"] = [];

		// new item added
		$select.find("option:selected").each(function (index, el) {
			if (!that.existingOptions.includes($(this).val())) {
				value.options.push({ optionId: $(this).val(), content: "1" });
				return false;
			}
		});
		if (!value.options.length) {
			// item was removed
			$select
				.find("option")
				.not(":selected")
				.each(function (index, el) {
					if (that.existingOptions.includes($(this).val())) {
						value.options.push({ optionId: $(this).val() });
						return false;
					}
				});
		}
	} else {
		value["options"] = [
			{
				optionId: $select.val(),
				content: ""
			}
		];
	}

	return value;
};

aefis.FormItems.DROPDOWN.prototype.setValue = function (value) {
	var $select = this.$item.find("select");
	$select.val(value.options[0].optionId);
	$select.selectpicker("refresh");
};

aefis.FormItems.DROPDOWN.prototype.revertValue = function (oldValue) {
	var $select = this.$item.find("select");
	$select.val(oldValue.options[0].optionId);
	$select.selectpicker("refresh");
};

aefis.FormItems.DROPDOWN.prototype.setEnabled = function (enable) {
	if (enable) {
		//this.$item.find('.dropdown-toggle').removeClass('disabled');
		this.$item.find("select").prop("disabled", false);
	} else {
		//this.$item.find('.dropdown-toggle').addClass('disabled');
		this.$item.find("select").prop("disabled", true);
	}
	this.$item.find("select").selectpicker("refresh");

	this.existingOptions = this.getExistingOptions();
};

aefis.FormItems.DROPDOWN.prototype.clearResponse = function () {
	var $select = this.$item.find("select");
	$select.selectpicker("deselectAll");
	$select.selectpicker("val", "");
	$select.selectpicker("refresh");
};

/**
 * DOCARTIFACT select with one or more options
 */
aefis.FormItems.DOCARTIFACT = function () {};

aefis.FormItems.DOCARTIFACT.prototype = new aefis.FormItems.Item();

aefis.FormItems.DOCARTIFACT.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.find(".aefis-doc-artifact-add").on("click", function () {
		aefis.ui.addArtifactsForSidebar(this, function () {
			that.$item.find(".aefis-doc-artifact-select").selectpicker("refresh");
		});
	});

	$("#aefis-artifacts--refresh")
		.off("refresh")
		.on("refresh", function () {
			$("select.aefis-select-doc-artifact").each(function () {
				var $select = $(this);
				var currentValue = [];
				$select.find("option:selected").each(function () {
					currentValue.push(parseInt($(this).val()));
				});

				$select.attr("data-select-default-value", JSON.stringify(currentValue));
				$select.attr("data-aefis-is-data-loaded", false);
				that.registerChangeHandler(false);
				$select.aefisselect();
			});
			var $btn = $("#aefis-artifacts-sidebar--refresh-button", window.parent.document);
			if ($btn.length) {
				window.parent.aefis.ui.refreshArtifactsForSideBar($btn, false);
			}
		});

	this.$item.find("select.aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find("select.aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});

	this.$item
		.find(".aefis-preview-button")
		.off("click")
		.on("click", function () {
			var $button = $(this);
			var $dialog = $("#" + $button.attr("data-aefis-preview-dialog"));
			var templateId = $dialog.attr("data-aefis-template-id");
			var source = $("#" + templateId).html();
			var template = Handlebars.compile(source);
			var data = [];
			var $select = $button
				.closest(".aefis-form-item-options-container")
				.find("select.aefis-select-doc-artifact");
			$select.find("option:selected").each(function () {
				data.push({ name: $(this).text(), id: parseInt($(this).val()) });
			});
			if (data.length == 1) {
				aefis.ui.formArtifactPreviewInFrameContainer($button);
			} else if (data.length > 1) {
				$dialog.html(template({ records: data }));
				var options = {
					title: "Selected Documents",
					content: $dialog.html(),
					titleIconClass: "fa fa-document",
					onShown: function () {},
					showFooterCloseButton: true
				};
				aefis.ui.modalDialog(options);
			}
		});
};

aefis.FormItems.DOCARTIFACT.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var $select = this.$item.find("select.aefis-select-doc-artifact");
	var selectedContent = [];
	$select.find("option:selected").each(function () {
		selectedContent.push(parseInt($(this).val()));
	});

	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: JSON.stringify(selectedContent)
			}
		]
	};

	return value;
};

aefis.FormItems.DOCARTIFACT.prototype.revertValue = function (oldValue) {
	this.$item.find("select").val(oldValue.options[0].optionId);
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.DOCARTIFACT.prototype.setEnabled = function (enable) {
	if (enable) {
		//this.$item.find('.dropdown-toggle').removeClass('disabled');
		this.$item.find("select").prop("disabled", false);
	} else {
		//this.$item.find('.dropdown-toggle').addClass('disabled');
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

/**
 * DROPDOWNCONTENT select with one or more options and related content textarea
 */
aefis.FormItems.DROPDOWNCONTENT = function () {};
aefis.FormItems.DROPDOWNCONTENT.prototype = new aefis.FormItems.Item();

aefis.FormItems.DROPDOWNCONTENT.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("select")
			.off("change", $.proxy(this.onDropdownChangeHandler, this))
			.on("change", $.proxy(this.onDropdownChangeHandler, this));
		this.$item
			.find("select")
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find("div[id^='form-item-option-content-wrapper-']")
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item.find("select").off("change", $.proxy(this.onDropdownChangeHandler, this));
		this.$item.find("select").off("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find("div[id^='form-item-option-content-wrapper-']")
			.off("change", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.DROPDOWNCONTENT.prototype.onDropdownChangeHandler = function (e) {
	var $select = $(e.target);
	var optionId = $select.val();
	//todo: show the related textarea
	this.$item.find("div[id^='form-item-option-content-wrapper-']").hide();
	this.$item.find("div[id='form-item-option-content-wrapper-" + optionId + "']").show();
};

aefis.FormItems.DROPDOWNCONTENT.prototype.getValue = function () {
	var $selectField = this.$item.find("select");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: $selectField.val(),
				content: ""
			}
		]
	};
	var mceEditor = tinymce.get(
		this.$item
			.find("textarea[id='form-item-option-content-" + $selectField.val() + "']")
			.attr("id")
	);
	if (mceEditor) {
		value.options[0].content = $(mceEditor.getBody()).html();
	} else {
		value.options[0].content = this.$item
			.find("textarea[id='form-item-option-content-" + $selectField.val() + "']")
			.val();
	}
	return value;
};

aefis.FormItems.DROPDOWNCONTENT.prototype.revertValue = function (oldValue) {
	this.$item.find("select").val(oldValue.options[0].optionId);
	this.$item.find("div[id^='form-item-option-content-wrapper-']").hide();
	this.$item
		.find("div[id='form-item-option-content-wrapper-" + oldValue.options[0].optionId + "']")
		.show();
	var editor = tinymce.get(
		this.$item
			.find("textarea[id='form-item-option-content-" + oldValue.options[0].optionId + "']")
			.attr("id")
	);
	$(editor.getBody()).html(oldValue.options[0].content);
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.DROPDOWNCONTENT.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("select").prop("disabled", true);
	}

	var textareaArray = tinymce.get(this.$item.find("textarea[id^='form-item-option-content-']"));
	if (enable) {
		for (var area in textareaArray) {
			tinymce.get(area.attr("id")).getBody().setAttribute("contenteditable", true);
		}
	} else {
		for (var area in textareaArray) {
			tinymce.get(area.attr("id")).getBody().setAttribute("contenteditable", false);
		}
	}
	$(".selectpicker").selectpicker("refresh");
};

/**
 * MCMA multiple choice multiple answer. draws check box for each option and allows multiple selections, saving each selection with appropriate form item option
 * formitemchange listener should be on the checkboxes not the formitem containing them as it's a better ui experience
 */
aefis.FormItems.MCMA = function () {};
aefis.FormItems.MCMA.prototype = new aefis.FormItems.Item();

aefis.FormItems.MCMA.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	var checkboxes = $container.find("input:checkbox");
	checkboxes.each(function () {
		var inputItem = new aefis.FormItems.MCMA.InputItem();
		inputItem.initialize($container, $(this));
		that.items[that.items.length] = inputItem;
	});
};

aefis.FormItems.MCMA.prototype.setValue = function (value) {
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var $currentItem = this.$item.find(
			"#form-item-option-" + this.$item.attr("data-aefis-formitem-id") + "-" + option.optionId
		);
		if (option.content === "1") {
			$currentItem.iCheck("check");
		} else {
			$currentItem.iCheck("uncheck");
		}
		$currentItem.addClass("data-aefis-refreshed");
	}
	this.$item.find("input:checkbox").not(".data-aefis-refreshed").iCheck("uncheck");
	this.$item.find(".data-aefis-refreshed").removeClass("data-aefis-refreshed");
};

aefis.FormItems.MCMA.prototype.getValue = function () {
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: []
	};
	var inputItems = this.items;
	for (var i = 0; i < inputItems.length; i++) {
		value.options[value.options.length] = inputItems[i].getValue().options[0];
	}
	return value;
};

aefis.FormItems.MCMA.InputItem = function () {};
aefis.FormItems.MCMA.InputItem.prototype = new aefis.FormItems.Item();

aefis.FormItems.MCMA.InputItem.prototype.onChangeHandler = function (e) {
	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", {
		oldValue: this.oldValue,
		newValue: this.newValue,
		deleteOthers: false
	});
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.MCMA.InputItem.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.off("ifToggled", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.MCMA.InputItem.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.iCheck("enable");
	} else {
		this.$item.iCheck("disable");
	}
};

aefis.FormItems.MCMA.InputItem.prototype.getValue = function () {
	var value = {
		formItemId: this.$container.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: this.$item.val()
			}
		]
	};
	if (this.$item.is(":checked")) {
		value.options[0].content = "1";
	}
	return value;
};

aefis.FormItems.MCMA.InputItem.prototype.revertValue = function (oldValue) {
	if (oldValue.options[0].content) this.$item.iCheck("check");
	else this.$item.iCheck("uncheck");
};

aefis.FormItems.MCMA.prototype.clearResponse = function () {
	this.$item.find("input:checkbox").each(function (index, el) {
		$(el).iCheck("uncheck");
	});
};

/**
 * MCSA mulltiple choice single answer
 */
aefis.FormItems.MCSA = function () {};
aefis.FormItems.MCSA.prototype = new aefis.FormItems.Item();

aefis.FormItems.MCSA.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:radio")
			.off("ifChecked", $.proxy(this.onChangeHandler, this))
			.on("ifChecked", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:radio").off("ifChecked", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.MCSA.prototype.getValue = function () {
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: []
	};

	this.$item.find("input:radio").each(function (index, el) {
		if (el.checked) {
			value.options[0] = {
				optionId: $(this).val(),
				content: "1"
			};
		}
	});
	return value;
};

aefis.FormItems.MCSA.prototype.setValue = function (value) {
	var that = this;
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var optionIdAppend = option.optionId;

		if (value.embeddedParentOptionId) {
			optionIdAppend += "-" + value.embeddedParentOptionId;
			if (value.embeddedParentSecondaryId) {
				optionIdAppend += "-" + value.embeddedParentSecondaryId;
			}
		} else {
			if (that.embeddedQuestionParentOptionId) {
				optionIdAppend += "-" + that.embeddedQuestionParentOptionId;
			}
			if (that.embeddedQuestionSecondaryId) {
				optionIdAppend += "-" + that.embeddedQuestionSecondaryId;
			}
		}
		var $currentItem = that.$item.find(
			"#form-item-option-" + that.$item.attr("data-aefis-formitem-id") + "-" + optionIdAppend
		);
		if (option.content === "1") {
			$currentItem.iCheck("check");
		} else {
			$currentItem.iCheck("uncheck");
		}
	}
};

aefis.FormItems.MCSA.prototype.setEnabled = function (enable) {
	this.$item.find("input:radio").each(function (index, el) {
		if (enable) {
			$(this).iCheck("enable");
			if ($(this).is(":checked")) {
				$(this).focus();
			}
		} else {
			$(this).iCheck("disable");
			$(this).parent().removeClass("hover");
		}
	});
};

aefis.FormItems.MCSA.prototype.revertValue = function (oldValue) {
	this.$item.find("input:radio").each(function (index, el) {
		if ($(el).attr("data-aefis-formitem-option-id") == oldValue.options[0].optionId) {
			$(el).iCheck("check");
		} else {
			$(el).iCheck("uncheck");
		}
	});
};

aefis.FormItems.MCSA.prototype.clearResponse = function () {
	this.$item.find("input:radio").each(function (index, el) {
		$(el).iCheck("uncheck");
	});
};

/**
 * MCSASTAGE mulltiple choice single answer for stage
 */
aefis.FormItems.MCSASTAGE = function () {};
aefis.FormItems.MCSASTAGE.prototype = new aefis.FormItems.Item();

aefis.FormItems.MCSASTAGE.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:radio")
			.off("ifChecked", $.proxy(this.onChangeHandler, this))
			.on("ifChecked", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:radio").off("ifChecked", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.MCSASTAGE.prototype.getValue = function () {
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: []
	};

	this.$item.find("input:radio").each(function (index, el) {
		if (el.checked) {
			value.options[0] = {
				optionId: $(this).val(),
				content: "1"
			};
		}
	});
	return value;
};

aefis.FormItems.MCSASTAGE.prototype.setEnabled = function (enable) {
	this.$item.find("input:radio").each(function (index, el) {
		if (enable) {
			$(this).iCheck("enable");
		} else {
			$(this).iCheck("disable");
			$(this).parent().removeClass("hover");
		}
	});
};

aefis.FormItems.MCSASTAGE.prototype.revertValue = function (oldValue) {
	this.$item.find("input:radio").each(function (index, el) {
		if ($(el).attr("data-aefis-formitem-option-id") == oldValue.options[0].optionId) {
			$(el).iCheck("check");
		} else {
			$(el).iCheck("uncheck");
		}
	});
};

/**
 * CLO
 */

aefis.FormItems.CLO = function () {};
aefis.FormItems.CLO.prototype = new aefis.FormItems.Item();

aefis.FormItems.CLO.prototype.initialize = function ($container) {
	var $cloContainer = $container.find("#aefis-course-learning-objectives");
	var $templateContainer = $("#aefis-template-container");
	$templateContainer.on("refresh", function () {
		aefis.ui.initializeHandlebarsTemplate($cloContainer);
	});
	$cloContainer.on("completed", function () {
		var options = {
			mode: "inline",
			send: "always",
			validate: "",
			success: function () {
				//aefis.ui.userSuccess('The course learning outcome description was saved.');
			},
			error: function (errors) {
				aefis.ui.userError("There was an error while saving your edit.");
			}
		};

		$cloContainer.find("a.aefis-editable").each(function () {
			var $editable = $(this);
			if ($editable.hasClass("richeditor")) {
				options["wysihtml5"] = {
					"font-styles": false,
					emphasis: true,
					lists: false,
					html: false,
					link: false,
					image: false,
					color: false
				};
			}
			$editable.editable(options);
		});
	});
};

/**
 * TEXTBOOK.
 */
aefis.FormItems.TEXTBOOK = function () {};
aefis.FormItems.TEXTBOOK.prototype = new aefis.FormItems.Item();

aefis.FormItems.TEXTBOOK.prototype.initialize = function ($container) {
	var that = this;
	that.$container = $container;
	that.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	var hiddenValue = $container.find(
		"#textbook-hidden-content-" + this.$container.attr("data-aefis-formitem-id")
	);

	var inputItem = new aefis.FormItems.TEXTBOOK.InputItem();
	inputItem.initialize($container, hiddenValue);

	var $textbookContainer = $container.find(
		"div#aefis-template-textbook-list-" + this.$container.attr("data-aefis-formitem-id")
	);

	$.validator.addMethod(
		"BookISBN",
		function (value, element) {
			if (value != null && $.trim(value) != "") {
				value = $.trim(value);

				if (!(value.length >= 10 && value.length <= 13 && $.isNumeric(value))) {
					return false;
				}

				if (Number(value) <= 0) {
					return false;
				}
			}
			return true;
		},
		"ISBN should be a numeric value whose length is between 10 and 13."
	);

	var callBack = function () {
		//lets add popup trigger to the link
		var $editButton = $container.find("a.edit"); //$("#textbook-add-edit-" + this.$container.attr('data-aefis-formitem-id'));

		$editButton.off("click").on("click", function (el) {
			var $obj = $(this);
			var title = $obj.attr("data-aefis-title");
			var target = $obj.attr("data-aefis-target");
			var saveButton = $obj.attr("data-aefis-save-button");
			var contentUrl = $obj.attr("data-aefis-datasource");
			var hiddenId = $obj.attr("data-aefis-hidden-id");
			var formItemId = $obj.attr("data-aefis-object-id");
			var modalId = "#model-form-item-" + formItemId;
			$(modalId).remove();

			var options = {
				title: title,
				modalId: "model-form-item-" + formItemId,
				useFrame: false,
				size: "medium",
				contentUrl: contentUrl,
				titleIconClass: "fa fa-pencil-alt fa-fw",
				onShown: function () {
					var modelContent = $(modalId);

					//Add Textbook to hidden input
					modelContent.find("form:first").submit(function (e) {
						e.preventDefault();
						var $form = $(this);
						var $formItemContainer = $(hiddenId);
						try {
							if (!$(this).valid()) {
								throw "Please check all fields and try again.";
							}
							//$form.validate(); //attach validator
							//$("textarea[id='intellectualWorkId']").rules("add", "required");

							var data = { FormItemId: formItemId };
							$form.serializeArray().map(function (x) {
								data[x.name] = x.value;
							});
							data["TextbookId"] = $(modalId).find("input#TextbookId:first").val();
							var inEditMode = $(modalId).find("input#InEditMode:first").val();
							if (inEditMode == "true") {
								data.IntellectualWorkId = $(modalId)
									.find("input#IntellectualWorkId:first")
									.val();
							}
							data.AddedByUser = false;

							var sucessFunction = function (contentLocation) {
								if (inEditMode == "false") {
									if (contentLocation) {
										data.IntellectualWorkId = contentLocation;
									}

									var oldValue = JSON.stringify($(hiddenId).val());
									var oldObjectArray = JSON.parse($(hiddenId).val());

									for (var i = 0; i < oldObjectArray.length; i++) {
										if (
											oldObjectArray[i].IntellectualWorkId != null &&
											oldObjectArray[i].IntellectualWorkId ==
												data.IntellectualWorkId &&
											oldObjectArray[i].formItemId == formItemId
										) {
											throw "The book was already added. Try to add a different one.";
										}
									}

									oldObjectArray.push(data);

									var newValue = JSON.stringify(oldObjectArray);
									$(hiddenId).val(newValue);
								}

								$(hiddenId).trigger("updated");
								modelContent.modal("toggle");
							};

							if (
								inEditMode == "true" ||
								data.IntellectualWorkId == "" ||
								data.IntellectualWorkId == null
							) {
								if (
									data.AuthorFirstName1 == "" ||
									data.BookEdition == "" ||
									data.BookISBN == "" ||
									data.BookPublisher == ""
								) {
									throw "Please search for a textbook or add a new one. All fields are required for a new textbook. ";
								}

								data.AddedByUser = true;
								var url = $form.attr("data-aefis-source");
								new aefis.ApiWrapper().call(url, {
									type: "POST",
									data: JSON.stringify(data),
									dataType: "html",
									onSuccess: function (data, jqXhr) {
										var contentLocation =
											jqXhr.getResponseHeader("Content-Location");
										sucessFunction(contentLocation);
									},
									onError: function () {
										aefis.ui.userError("Problem saving textbook please retry.");
										$formItemContainer.trigger("revert");
									},
									onComplete: function () {}
								});
							} else {
								sucessFunction();
							}
						} catch (e) {
							//aefis.ui.userMessage(e, "error");
							$(this).find("div.aefis-callout-error").remove();
							var content =
								'<div class="animated fadeIn aefis-callout aefis-callout-error"><a class="close" data-dismiss="alert" aria-hidden="true" >×</a><div class="aefis-callout-icon"><i class="fa fa-fw fa-lg fa-exclamation-circle"></i></div><div class="aefis-callout-content">' +
								e +
								"</div>";
							$(this).prepend(content);
						}
					});
				}
			};
			aefis.ui.modalDialog(options);
		});

		$textbookContainer.find("a.remove").each(function (e) {
			$(this).click(function () {
				var $removeLink = $(this);
				var idToDelete = $removeLink.attr("data-aefis-object-id");
				var textbookIdToDelete = $removeLink.attr("data-aefis-object-textbook-id");

				var textbookArray = JSON.parse(hiddenValue.val());

				for (var i = 0; i < textbookArray.length; i++) {
					if (
						textbookArray[i].IntellectualWorkId != null &&
						textbookArray[i].IntellectualWorkId == idToDelete &&
						textbookArray[i].TextbookId == textbookIdToDelete
					) {
						textbookArray.splice(i, 1);
					}
				}
				hiddenValue.val(JSON.stringify(textbookArray));
				hiddenValue.trigger("updated");
			});
		});
	};
	aefis.ui.initializeHandlebarsTemplate(
		"div#aefis-template-textbook-list-" + this.$container.attr("data-aefis-formitem-id"),
		callBack
	);

	$container.on("saved", function (e) {
		aefis.ui.initializeHandlebarsTemplate(
			"div#aefis-template-textbook-list-" + $(this).attr("data-aefis-formitem-id"),
			callBack
		);
	});
};

aefis.FormItems.TEXTBOOK.InputItem = function () {};
aefis.FormItems.TEXTBOOK.InputItem.prototype = new aefis.FormItems.Item();

aefis.FormItems.TEXTBOOK.InputItem.prototype.onChangeHandler = function (e) {
	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", {
		oldValue: this.oldValue,
		newValue: this.newValue,
		deleteOthers: false
	});
};

aefis.FormItems.TEXTBOOK.InputItem.prototype.registerChangeHandler = function (register) {
	if (register) this.$item.off("updated").on("updated", $.proxy(this.onChangeHandler, this));
	else this.$item.off("updated", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.TEXTBOOK.InputItem.prototype.setEnabled = function (enable) {
	/*if (enable) {
    	this.$item.iCheck('enable');
    } else {
    	this.$item.iCheck('disable');
    }*/
};

aefis.FormItems.TEXTBOOK.InputItem.prototype.getValue = function () {
	var value = {
		formItemId: this.$container.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: this.$container.find("a.edit").attr("data-aefis-option-id")
			}
		]
	};
	if (this.$item && this.$item.val()) {
		var currentValue = JSON.parse(this.$item.val());
		value.options[0].content = currentValue;
	}
	return value;
};

aefis.FormItems.TEXTBOOK.InputItem.prototype.revertValue = function (oldValue) {
	var oldValue = JSON.stringify(oldValue.options[0].content);
	this.$item.val(oldValue);
};

/**
 * ASSESSMENTDATACOURSESECTION.
 */
aefis.FormItems.ASSESSMENTDATACOURSESECTION = function () {};
aefis.FormItems.ASSESSMENTDATACOURSESECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.ASSESSMENTDATACOURSESECTION.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	$container
		.find(".aefis-outcome-space-link")
		.off("click")
		.on("click", function (e) {
			var $btn = $(this);
			var outcomeSpace = $btn.attr("data-aefis-outcome-space");
			if (outcomeSpace == "all") {
				$container.find(".aefis-outcome-space-row").removeClass("hide");
			} else {
				$container.find(".aefis-outcome-space-row").addClass("hide");
				$container.find(".aefis-outcome-space--" + outcomeSpace).removeClass("hide");
			}
			$container.find(".aefis-outcome-space-link").removeClass("aefis-dropdown-list-check");
			$container
				.find('.aefis-outcome-space-link[data-aefis-outcome-space="' + outcomeSpace + '"]')
				.addClass("aefis-dropdown-list-check");
		});

	$container
		.find(".btn-aefis-assessment-data--show-hide-all")
		.off("click")
		.on("click", function (e) {
			var $btn = $(this);
			var type = $btn.attr("aefis-data-type");
			if (type == "hide") {
				$btn.attr("aefis-data-type", "show");
				$btn.text("[ Show All ]");
				$container.find(".aefis-rubric-criteria").hide();
				$container
					.find(".btn-aefis-assessment-data--show-hide")
					.attr("aefis-data-type", "show");
				$container.find(".btn-aefis-assessment-data--show-hide").text("[ Show ]");
			} else {
				$btn.attr("aefis-data-type", "hide");
				$btn.text("[ Hide All ]");
				$container.find(".aefis-rubric-criteria").show();
				$container
					.find(".btn-aefis-assessment-data--show-hide")
					.attr("aefis-data-type", "hide");
				$container.find(".btn-aefis-assessment-data--show-hide").text("[ Hide ]");
			}
		});

	$container
		.find(".btn-aefis-assessment-data--show-hide")
		.off("click")
		.on("click", function (e) {
			var $btn = $(this);
			var type = $btn.attr("aefis-data-type");
			if (type == "hide") {
				$btn.attr("aefis-data-type", "show");
				$btn.text("[ Show ]");
				$btn.closest(".aefis-criteria-container").find(".aefis-rubric-criteria").hide();
			} else {
				$btn.attr("aefis-data-type", "hide");
				$btn.text("[ Hide ]");
				$btn.closest(".aefis-criteria-container").find(".aefis-rubric-criteria").show();
			}
		});
};

aefis.FormItems.ASSESSMENTDATACOURSESECTION.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");

	var responseContainer = {};
	responseContainer.responses = [];
	$optionsContainer.find(".aefis-form-item-performance-indicator").each(function (index, el) {
		var $performaceIndicatorRow = $(el);
		var majorId = $(el).attr("data-aefis-major-id");
		var programMapId = $(el).attr("data-aefis-program-map-id");
		var programOutcomeMapId = $(el).attr("data-aefis-program-outcome-map-id");
		var response = "";
		$performaceIndicatorRow
			.find(".form-item-performance-indicator-response")
			.each(function (index, el) {
				response = $(el).val();
			});
		var responseItem = {
			majorId: majorId,
			programMapId: programMapId,
			programOutcomeMapId: programOutcomeMapId,
			response: response
		};
		responseContainer.responses.push(responseItem);
	});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(responseContainer)
			}
		]
	};

	return value;
};

/**
 * COURSESCHED.
 */
aefis.FormItems.COURSESCHED = function () {};
aefis.FormItems.COURSESCHED.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSESCHED.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;

	$container.find(".btn-schedule").each(function (index, el) {
		var $obj = $(el);
		$obj.off("click").on("click", function (e) {
			var target = $obj.attr("data-aefis-target");
			$container.find("tr.course-schedule-table").hide();
			if (target == "daily") {
				$container.find('tr.course-schedule-table[data-aefis-schedule="daily"]').fadeIn();
			} else if (target == "weekly") {
				$container.find('tr.course-schedule-table[data-aefis-schedule="weekly"]').fadeIn();
			}
			$container
				.closest(".aefis-business-object-content-container")
				.find(".btn-export")
				.each(function (index, el) {
					var $btnExport = $(el);
					var attrDataSource = $btnExport.attr("data-aefis-datasource");
					if (typeof attrDataSource !== typeof undefined && attrDataSource !== false) {
						var url = $btnExport.attr("data-aefis-datasource");
						$btnExport.attr(
							"data-aefis-datasource",
							aefis.util.replaceUrlParameter(
								url,
								"scheduleType",
								encodeURIComponent(target)
							)
						);
					} else {
						var url = $btnExport.attr("href");
						$btnExport.attr(
							"href",
							aefis.util.replaceUrlParameter(
								url,
								"scheduleType",
								encodeURIComponent(target)
							)
						);
					}
				});
		});
	});
};

/**
 * ACCREDITOROUTCOMESELECTION.
 */
aefis.FormItems.ACCREDITOROUTCOMESELECTION = function () {};
aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	var $tagContainer = that.$item.find("#aefis-tags-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		$tagContainer.find(".aefis-tag-item").each(function (index, el) {
			var $tagItem = $(el);
			$tagItem.find(":button").on("click", function (e) {
				$tagItem.remove();
				that.$item.find(".aefis-btn-add-outcome").click();
			});
		});
		//$tagContainer.find('.aefis-popover').popover();
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		aefis.ui.initializeHandlebarsTemplate($tagContainer);
		var target = that.$item
			.find(".aefis-form-item-options-container")
			.attr("data-aefis-target");
		var $target = $(target);
		$target.val("");
		$("span.twitter-typeahead input").val("");
		that.$item.find("#aefis-false-container .aefis-field-clear").click();
	});
};

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".aefis-btn-add-outcome")
			.off("click", $.proxy(this.onChangeHandler, this))
			.on("click", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".aefis-btn-add-accreditor-criteria")
			.off("click", $.proxy(this.onChangeHandler, this))
			.on("click", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".aefis-btn-add-spo")
			.off("click", $.proxy(this.onChangeHandler, this))
			.on("click", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".aefis-btn-add-college-department")
			.off("click", $.proxy(this.onChangeHandler, this))
			.on("click", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item.find(".aefis-btn-add-outcome").off("click", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".aefis-btn-add-accreditor-criteria")
			.off("click", $.proxy(this.onChangeHandler, this));
		this.$item.find(".aefis-btn-add-spo").off("click", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".aefis-btn-add-college-department")
			.off("click", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.onChangeHandler = function (event) {
	var that = this;
	var $button = $(event.target);
	var secondTarget = $button.attr("data-aefis-target");
	var firstTarget = $button.attr("data-aefis-first-target");
	var objectClass = "";
	var triggerEvent = "";

	if (firstTarget) {
		var $target = $(firstTarget);
		var $secondTarget = $(secondTarget);
		if ($secondTarget && $secondTarget.find(":selected").length) {
			$secondTarget.find(":selected").each(function () {
				var $option = $(this);
				if ($option.val() != "") {
					$target = $(secondTarget);
				}
			});
		}
	} else {
		var $target = $(secondTarget);
	}

	if ($button.hasClass("aefis-btn-add-outcome")) {
		objectClass = ".aefis-btn-add-outcome";
		triggerEvent = "onAddOutcome";

		var $tag = $target.parent().find(".aefis-tooltip");
		var id = $tag.attr("data-aefis-id") !== undefined ? $tag.attr("data-aefis-id") : "";
		var code =
			$tag.attr("data-aefis-code") !== undefined
				? decodeURI($tag.attr("data-aefis-code")).replace(/%2C/g, ",")
				: $target.val();
		var entity =
			$tag.attr("data-aefis-entity-name") !== undefined
				? $tag.attr("data-aefis-entity-name")
				: "";

		if (that.isDuplicate(entity, id, code)) {
			return;
		}
	}

	if ($button.hasClass("aefis-btn-add-accreditor-criteria")) {
		$target.find(":selected").each(function () {
			var $option = $(this);
			var $container = $($option.attr("data-aefis-container"));
			var suggestion = {
				Code: $option.attr("data-aefis-code"),
				Entity: $option.attr("data-aefis-entity"),
				Id: $option.val(),
				Css: $option.attr("data-aefis-entity"),
				Name: $option.attr("data-aefis-name"),
				Description: $option.attr("data-aefis-description")
			};

			if (!that.isDuplicate(suggestion.Entity, suggestion.Id, suggestion.Code)) {
				var tag = that.getFormattedTag(suggestion);
				$container.append(tag);
			}
		});
		objectClass = ".aefis-btn-add-accreditor-criteria";
		triggerEvent = "onAddCriteria";
	}

	if ($button.hasClass("aefis-btn-add-spo")) {
		$target.find(":selected").each(function () {
			var $option = $(this);
			var $container = $($option.attr("data-aefis-container"));
			var suggestion = {
				Code: $option.attr("data-aefis-code"),
				Entity: $option.attr("data-aefis-entity"),
				Id: $option.val(),
				Css: $option.attr("data-aefis-entity"),
				Name: $option.attr("data-aefis-name"),
				Description: $option.attr("data-aefis-description")
			};
			if (!that.isDuplicate(suggestion.Entity, suggestion.Id, suggestion.Code)) {
				var tag = that.getFormattedTag(suggestion);
				$container.append(tag);
			}
		});
		objectClass = ".aefis-btn-add-spo";
		triggerEvent = "onAddSPO";
	}

	if ($button.hasClass("aefis-btn-add-college-department")) {
		$target.find(":selected").each(function () {
			var $option = $(this);
			var $container = $($option.attr("data-aefis-container"));
			var suggestion = {
				Code: $option.attr("data-aefis-code"),
				Entity: $option.attr("data-aefis-entity"),
				Id: $option.val(),
				Css: $option.attr("data-aefis-entity"),
				Name: $option.attr("data-aefis-name"),
				Description: $option.attr("data-aefis-description")
			};
			if (!that.isDuplicate(suggestion.Entity, suggestion.Id, suggestion.Code)) {
				var tag = that.getFormattedTag(suggestion);
				$container.append(tag);
			}
		});
		objectClass = ".aefis-btn-add-college-department";
		triggerEvent = "onAddCollegeDepartment";
	}

	this.newValue = this.getValue();
	this.$item
		.find(objectClass)
		.trigger(triggerEvent, { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.isDuplicate = function (pEntity, pId, pCode) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var target = $optionsContainer.attr("data-aefis-target");
	var $target = $(target);

	var isDuplicateValue = false;
	$optionsContainer.find(".aefis-tag-item").each(function (index, el) {
		var $tagItem = $(el);
		var id = $tagItem.attr("aefis-data-tag-id");
		var code = decodeURI($tagItem.attr("aefis-data-tag-code")).replace(/%2C/g, ",");
		var entity = $tagItem.attr("aefis-data-tag-entity-name");
		if (entity == pEntity && id == pId && code == pCode) {
			aefis.ui.userWarning(code + " is already added.");
			isDuplicateValue = true;
		}
	});
	return isDuplicateValue;
};

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.getFormattedTag = function (suggestion) {
	var css = "";
	var code = suggestion["Code"];
	var id = suggestion["Id"];
	var name = suggestion["Name"];
	var code = suggestion["Code"];
	var description = suggestion["Description"];
	var token = "";
	var entityName = suggestion["Entity"];
	var displayValue = code;

	if (code.charAt(0) == code.charAt(0).toLowerCase()) {
		displayValue = aefis.util.toTitleCase(code);
	}

	if (suggestion["Css"]) {
		css = suggestion["Css"];
	}

	token += '<span class="mdl-chip animated flipInX aefis-tag-item ';
	token += css + '"';

	if (entityName) {
		token += 'aefis-data-tag-entity-name="' + entityName + '"';
	}
	if (code) {
		token += 'aefis-data-tag-code="' + encodeURIComponent(code) + '"';
	}
	if (id) {
		token += 'aefis-data-tag-id="' + encodeURIComponent(id) + '"';
	}
	if (description) {
		token += 'aefis-data-tag-description="' + encodeURIComponent(description) + '"';
	}
	if (name) {
		token += 'aefis-data-tag-name="' + encodeURIComponent(name) + '"';
	}
	token += ">";
	token += '<span class="mdl-chip__text">' + displayValue + "</span>";
	token += "</span>";

	return token;
};

aefis.FormItems.ACCREDITOROUTCOMESELECTION.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var target = $optionsContainer.attr("data-aefis-target");
	var $target = $(target);

	var selectedContent = [];
	$optionsContainer.find(".aefis-tag-item").each(function (index, el) {
		var $tagItem = $(el);
		selectedContent.push({
			uuid: Math.random().toString(36).substr(2, 16),
			id: $tagItem.attr("aefis-data-tag-id"),
			code: decodeURI($tagItem.attr("aefis-data-tag-code"))
				.replace(/%2C/g, ",")
				.replace(/%26/g, "&"),
			name: decodeURI($tagItem.attr("aefis-data-tag-name"))
				.replace(/%2C/g, ",")
				.replace(/%26/g, "&"),
			entity: $tagItem.attr("aefis-data-tag-entity-name"),
			description: decodeURI($tagItem.attr("aefis-data-tag-description"))
				.replace(/%2C/g, ",")
				.replace(/%26/g, "&")
		});
	});

	if ($target.val() != "") {
		var $tag = $target.parent().find(".aefis-tooltip");
		selectedContent.push({
			uuid: Math.random().toString(36).substr(2, 16),
			id: $tag.attr("data-aefis-id") !== undefined ? $tag.attr("data-aefis-id") : "",
			code:
				$tag.attr("data-aefis-code") !== undefined
					? decodeURI($tag.attr("data-aefis-code")).replace(/%2C/g, ",")
					: $target.val(),
			entity:
				$tag.attr("data-aefis-entity-name") !== undefined
					? $tag.attr("data-aefis-entity-name")
					: "",
			description:
				$tag.attr("data-aefis-description") !== undefined
					? decodeURI($tag.attr("data-aefis-description")).replace(/%2C/g, ",")
					: ""
		});
	}

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(selectedContent)
			}
		]
	};

	return value;
};

/**
 * ATTRIBUTEBASEDQUESTION single text box that saves contents to a single form item option
 */

aefis.FormItems.ATTRIBUTEBASEDQUESTION = function () {};
aefis.FormItems.ATTRIBUTEBASEDQUESTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.ATTRIBUTEBASEDQUESTION.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	var $description = this.$container.find("#asdf");
	var $dropdownAttr = this.$container.find("#attribute-based-select-value");
	// $description.text($dropdownAttr.find(':selected').attr('data-aefis-description'));
	$dropdownAttr.bind("change", function (event) {
		var desc = $(this).find(":selected").attr("data-aefis-description");
		var optionId = $(this).find(":selected").val();
		$container.find("div[id^='form-item-option-content-wrapper-']").hide();
		$container.find("div[id='form-item-option-content-wrapper-" + optionId + "']").show();
		//$description.val(desc);
	});
};

aefis.FormItems.ATTRIBUTEBASEDQUESTION.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $selectField = this.$item.find(".aefis-select-input");

	var data = {};
	data.value = $optionsContainer.attr("data-aefis-formitem-value");
	data.optionId = $selectField.val();

	var mceEditor = tinymce.get(
		this.$item
			.find("textarea[id='form-item-option-content-" + $selectField.val() + "']")
			.attr("id")
	);
	if (mceEditor) {
		data.description = $(mceEditor.getBody()).html();
	} else {
		data.description = this.$item
			.find("textarea[id='form-item-option-content-" + $selectField.val() + "']")
			.val();
	}

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(data)
			}
		]
	};

	return value;
};

/**
 * ASSESSMENTOUTCOMEQUESTIONS lists outcomes and saves them as ID array in a single form item option
 */
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS = function () {};
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype = new aefis.FormItems.Item();

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	$optionsContainer.find("input[type=checkbox]:unchecked").each(function (index) {
		var $el = $(this);
		$el.closest(
			".aefis-program-outcome-list-item--container,.aefis-assessment-outcome-list-item--container"
		)
			.find(".required")
			.each(function () {
				var $item = $(this);
				$item.addClass("unchecked-outcome");
				$item.addClass("ignore-validation");
				$item.removeClass("required");
				var attr = $item.attr("data-rule-required");
				$item.attr("aria-required", true);
				if (typeof attr !== typeof undefined && attr !== false) {
					$item.removeAttr("data-rule-required");
					$item.removeAttr("aria-required");
				}
			});
	});

	that.initializeEditable();
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("input:checkbox[id^='form-item-studentoutcome-list-item-']")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".add-response-outcomes-button")
			.off("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this))
			.on("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this));
		this.$item
			.find(".edit-response-outcomes-copied-content-button")
			.off("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this))
			.on("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this));
		this.$item
			.find(".add-assessment-outcomes-button")
			.off("click", $.proxy(this.addInlineAssessmentOutcome, this))
			.on("click", $.proxy(this.addInlineAssessmentOutcome, this));
		this.$item
			.find(".delete-assessment-outcome-button")
			.off("click", $.proxy(this.deleteAssessmentOutcome, this))
			.on("click", $.proxy(this.deleteAssessmentOutcome, this));
	} else {
		this.$item
			.find("input:checkbox[id^='form-item-studentoutcome-list-item-']")
			.off("ifToggled", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".add-response-outcomes-button")
			.off("click", $.proxy(this.addOutcomesForCopyToButtonHandler, this));
		this.$item
			.find(".edit-response-outcomes-copied-content-button")
			.off("click", $.proxy(this.editResponseOutcomesCopiedContentButtonHandler, this));
		this.$item
			.find(".add-assessment-outcomes-button")
			.off("click", $.proxy(this.addInlineAssessmentOutcome, this));
		this.$item
			.find(".delete-assessment-outcome-button")
			.off("click", $.proxy(this.deleteAssessmentOutcome, this))
			.on("click", $.proxy(this.deleteAssessmentOutcome, this));
	}
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.initializeEditable = function (container) {
	var $container = $(".aefis-formitem-editable");
	if (container) {
		$container = $(container);
	}
	$container.each(function () {
		var $item = $(this);
		var refreshContainer = $item.attr("data-aefis-refresh");

		$item.editable({
			validate: function (value) {
				if ($(this).hasClass("required")) {
					if ($.trim(value) == "") {
						return "This field is required.";
					}
				}
			},
			params: function (params) {
				params.historyId = $item.attr("data-aefis-history-id");
				return params;
			},
			success: function (response, newValue) {
				aefis.ui.formItemResponseMergeDialog(
					response.DATA,
					function () {
						// resultTrueCallback
						$item.attr("data-aefis-history-id", response.DATA.historyId);
					},
					function () {
						// acceptCurrentCallback
						var url = $item.attr("data-url");
						var data = {
							Id: $item.attr("data-pk"),
							name: $item.attr("data-name"),
							value: response.DATA.newValue,
							pk: $item.attr("data-pk"),
							overrideExisting: true
						};
						new aefis.ApiWrapper().call(url, {
							type: "POST",
							data: JSON.stringify(data),
							beforeSend: function () {
								if (window.parent) {
									window.parent.aefis.ui.showPreviewObjectLoadingBar();
								} else {
									aefis.ui.showPreviewObjectLoadingBar();
								}
							},
							onSuccess: function (data, jqXhr) {
								$item.attr("data-aefis-history-id", data.historyId);
							},
							onError: function (e, data) {
								if (window.parent) {
									window.parent.aefis.ui.hidePreviewObjectLoadingBar();
								} else {
									aefis.ui.hidePreviewObjectLoadingBar();
								}
							},
							onComplete: function () {
								if (window.parent) {
									window.parent.aefis.ui.hidePreviewObjectLoadingBar();
								} else {
									aefis.ui.hidePreviewObjectLoadingBar();
								}
							}
						});
					},
					function () {
						// acceptIncomingCallback
						$item.attr("data-aefis-history-id", response.DATA.historyId);
						$item.text(response.DATA.updatedFormItem);
					}
				);
			},
			error: function (errors) {
				aefis.ui.userError("There was an error."); //todo: replace with actual error from server
			}
		});
		$item.on("shown", function (e, editable) {
			if (typeof editable !== "undefined") {
				editable.input.$input.val($item.text());
			}
		});
	});
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.deleteAssessmentOutcome = function (event) {
	event.preventDefault();
	var thisScope = this;
	var $button = $(event.target).closest(".delete-assessment-outcome-button");
	var $parentContainer = $(event.target).parents("li");
	var $outcomeContainer = $parentContainer.find(".form-item-studentoutcome-list-item--container");
	var $checkbox = $parentContainer.find("input.aefis-form-item-embedded-questions-checkbox");
	var url = $button.attr("data-aefis-datasource");
	if ($checkbox.is(":checked")) {
		aefis.ui.alert(
			"Can Not Delete",
			"You can not delete a selected outcome.  To delete this outcome, un-select the outcome by clicking the checkbox and then click the delete button."
		);
	} else {
		var options = {
			title: "Delete Outcome",
			content:
				"Deleting this outcome will permanently remove the outcome from this form.<br/><br/>Are you sure?",
			confirmAction: function () {
				new aefis.ApiWrapper().call(url, {
					type: "POST",
					onSuccess: function (data) {
						$parentContainer.remove();
						var assessmentOutcomeCount = $(
							"li.aefis-assessment-outcome-list-item--container"
						).length;
						if (!assessmentOutcomeCount) {
							$("#aefis-assessment-outcome-list-item--separator").hide();
						} else {
							$("#aefis-assessment-outcome-list-item--separator").show();
						}
					},
					onSuccessScope: this,
					beforeSend: function () {
						if (window.parent) {
							window.parent.aefis.ui.showPreviewObjectLoadingBar();
						}
						$parentContainer.hide();
					},
					onError: function (error) {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
						$parentContainer.fadeIn();
					},
					onComplete: function (error) {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					},
					onErrorScope: this
				});
			},
			confirmActionName: "Yes, Delete",
			cancelActionName: "No, Cancel"
		};
		aefis.ui.confirm(options);
	}
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.addInlineAssessmentOutcome = function (event) {
	var thisScope = this;
	var $button = $(event.target).closest("button");
	var $parentContainer = $button.closest(".aefis-form-item-options-container");
	var $listContainer = $parentContainer.find(".list-unstyled");
	var $buttonContainer = $button.closest(".row-fluid");

	var url = $button.attr("aefis-add-new-outcome-url");
	new aefis.ApiWrapper().call(url, {
		type: "GET",
		beforeSend: function () {
			aefis.ui.loadingShow("#" + $buttonContainer.attr("id"), "Adding Outcome", "quick");
		},
		onSuccess: function (data, jqXhr) {
			var assessmentOutcomeCount = $listContainer.find(
				"li.aefis-assessment-outcome-list-item--container"
			).length;
			if (!assessmentOutcomeCount) {
				$listContainer.find(".aefis-added-outcome-separator").show();
			}
			var html = $.parseHTML(data.response);
			var $listItem = $(html).find(".aefis-assessment-outcome-list-item--container");
			$listContainer.append($listItem);
			//aefis.app.initializePage($listItem.closest('.aefis-formitem'));
			aefis.app.initializePage($listItem);
			if ("TEXT" in aefis.formItems.items) {
				// hack for tinymce in text
				var textFormItem = aefis.formItems.createFormItem("TEXT");
				textFormItem.initializeTinyMCE();
			}
			thisScope.registerChangeHandler(true);
			thisScope.initializeEditable();
			/*$listItem.addClass('newcontent');
            aefis.ui.initializeAefisInput('.newcontent input.aefis-radio-input, .newcontent input.aefis-checkbox-input');
            aefis.ui.initializeEditable('.newcontent.aefis-editable');
            $listItem.removeClass('newcontent');
            //aefis.formItems.initialize($listItem.closest('.aefis-formitem').parent());
            aefis.formItems.initialize($listItem.parent());
            thisScope.registerChangeHandler(true);
            aefis.page.initialize();*/
		},
		onError: function (e, data) {
			console.log(e);
		},
		onComplete: function () {
			aefis.ui.loadingHide("#" + $buttonContainer.attr("id"));
		}
	});
};

//not using anymore
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.addAssessmentOutcome = function (event) {
	event.preventDefault();
	var thisScope = this;
	var $addAssessmentOutcomeOptions = $("#add-assessment-outcomes-content");
	// open dialog
	var modalOptions = {
		title: $addAssessmentOutcomeOptions.attr("dialog-title"),
		content: $addAssessmentOutcomeOptions.html(),
		size: $addAssessmentOutcomeOptions.attr("dialog-size"),
		showFooterCloseButton: true,
		onShown: function () {
			var $dialog = $(".aefis-modal-dialog");
			var $btnSave = $dialog.find("#add-assessment-outcomes-content-save");
			$btnSave.off("click").on("click", function (e) {
				var code = $dialog.find("#Code").val();
				var name = $dialog.find("#Name").val();
				if (code == "" || name == "") {
					aefis.ui.userError("You must enter code and name of the outcome.");
					return;
				}
				var url = $addAssessmentOutcomeOptions.attr(
					"data-aefis-save-assessment-outcome-datasource"
				);
				var params = {
					code: code,
					name: name,
					description: $dialog.find("#Description").val(),
					programId: $addAssessmentOutcomeOptions.attr("data-aefis-program-id")
				};
				new aefis.ApiWrapper().call(url, {
					type: "POST",
					data: JSON.stringify(params),
					beforeSend: function () {
						if (window.parent) {
							window.parent.aefis.ui.showPreviewObjectLoadingBar();
						}
						$dialog.modal("hide");
						aefis.ui.showFullPageLoadingMask("Saving Outcome");
					},
					onSuccess: function (data) {
						window.location.reload();
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					},
					onSuccessScope: this,
					onError: function (error) {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					},
					onErrorScope: this
				});
			});
		},
		closeCallback: function () {}
	};
	aefis.ui.modalDialog(modalOptions);
	return false;
};

// add outcomes button handler, opens add dialog
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.addOutcomesForCopyToButtonHandler = function (
	event
) {
	event.preventDefault();
	var thisScope = this;
	var $formItem = thisScope.$item;
	var $addResponseButton = $(event.target).closest(".add-response-outcomes-button");
	var outcomeId = $addResponseButton.attr("data-aefis-outcome-id");
	var outcomeCode = $addResponseButton.attr("data-aefis-outcome-code");
	var formItemId = $addResponseButton.attr("data-aefis-formitem-id");
	var formItemOptionId = $addResponseButton.attr("data-aefis-formitem-option-id");
	var $outcomesCopyToOptions = $("#program-outcome-questions-add-outcomes-content-" + formItemId);
	var outcomesCopyToOptionsContent = $outcomesCopyToOptions.html();
	var outcomesListSelector = ".modal-body > #program-outcome-questions-add-outcomes";
	var modaltitle = "Copy Responses from " + outcomeCode + " to:";
	var $embeddedOptionsContainer = $(
		"#aefis-form-item-embedded-questions-container-" +
			formItemId +
			"-" +
			formItemOptionId +
			"-" +
			outcomeId
	);
	var $allParentContainer = $("#form-item-" + formItemId + "-" + formItemOptionId);
	var numberOfCheckboxes = $allParentContainer.find(
		"input.aefis-form-item-embedded-questions-checkbox"
	).length;
	var numberOfCheckedCheckboxes = $allParentContainer.find(
		"input.aefis-form-item-embedded-questions-checkbox:checked"
	).length;

	if (numberOfCheckedCheckboxes == numberOfCheckboxes) {
		aefis.ui.alert(
			"All Outcomes Selected",
			"All the outcomes are selected.  To copy form responses to another outcome, the target outcome must not be currently selected."
		);
	} else {
		// open dialog
		var modalOptions = {
			title: modaltitle,
			content: outcomesCopyToOptionsContent,
			size: $outcomesCopyToOptions.attr("dialog-size"),
			showFooterCloseButton: true,
			noBodyPadding: true,
			closeButtonText: "Close, I am Finished",
			onShown: function () {
				aefis.ui.initializeAefisInput(outcomesListSelector, function () {
					// setup ui (hide this outcome, check the ones already applied)
					$(outcomesListSelector + " #outcome-" + outcomeId).hide();
					$allParentContainer
						.find("input.aefis-form-item-embedded-questions-checkbox:checked")
						.each(function () {
							var selectedOutcomeId = $(this).attr("data-aefis-outcome-id");
							$(outcomesListSelector + " #outcome-" + selectedOutcomeId).hide();
							$(outcomesListSelector + " #outcome-" + selectedOutcomeId)
								.parent()
								.hide();
						});
					// hide any others being copied to / from
					/* $('.aefis-form-item-embedded-questions-container:not([data-aefis-embedded-questions-parent-secondary-id=' + outcomeId + '])').each(function(){
                        var idList = $(this).attr('data-aefis-copy-to-secondary-id-list');
                        if ( idList.length ) {
                            var idArray = $.makeArray(idList.split(',')).filter(function(elem){ return elem !== '' });
                            for ( var i = 0; i <= idArray.length; i++ ) {
                                $(outcomesListSelector + ' #outcome-' + idArray[i]).hide();
                                $(outcomesListSelector + ' #outcome-' + idArray[i]).parent().hide();
                            };
                            $(outcomesListSelector + ' #outcome-' + $(this).attr('data-aefis-embedded-questions-parent-secondary-id')).hide();
                            $(outcomesListSelector + ' #outcome-' + $(this).attr('data-aefis-embedded-questions-parent-secondary-id')).parent().hide();
                        }
                    });*/
					// remove current outcome, check those already selected before adding listeners

					var copyToOutcomeIdArray = $.makeArray(
						$embeddedOptionsContainer
							.attr("data-aefis-copy-to-secondary-id-list")
							.split(",")
					).filter(function (elem) {
						return elem !== "";
					});
					for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
						// check this option in dialog
						//$(outcomesListSelector + ' #aefis-program-outcome-questions-add-' + formItemId + '-' + formItemOptionId + '-' + copyToOutcomeIdArray[i]).iCheck('check');
						$(
							outcomesListSelector +
								" #aefis-program-outcome-questions-add-" +
								formItemId +
								"-" +
								formItemOptionId +
								"-" +
								copyToOutcomeIdArray[i]
						).hide();
						$(
							outcomesListSelector +
								" #aefis-program-outcome-questions-add-" +
								formItemId +
								"-" +
								formItemOptionId +
								"-" +
								copyToOutcomeIdArray[i]
						)
							.parent()
							.hide();
					}
					// register listeners for this outcome
					$(outcomesListSelector + " input:checkbox").on(
						"ifToggled",
						$.proxy(thisScope.addOutcomeForCopyToHandler, this)
					);
					// set this target outcome id
					$(
						outcomesListSelector +
							" [id^=aefis-program-outcome-questions-add-" +
							formItemId +
							"-" +
							formItemOptionId +
							"-]"
					).attr("data-aefis-copy-from-outcome-id", outcomeId);
					$(
						outcomesListSelector +
							" [id^=aefis-program-outcome-questions-add-" +
							formItemId +
							"-" +
							formItemOptionId +
							"-]"
					).attr("data-aefis-copy-from-outcome-code", outcomeCode);
				});
			}
		};
		aefis.ui.modalDialog(modalOptions);
	}

	return false;
};

// checkboxes for selecting / adding outcomes to be copied to (button represents the 'copied to' outcome, not the one doing updating)
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.addOutcomeForCopyToHandler = function (event) {
	var checked = event.target.checked;
	var formItemId = $(this).attr("data-aefis-formitem-id");
	var formItemOptionId = $(this).attr("data-aefis-formitem-option-id");
	var copyToOutcomeId = $(this).attr("data-aefis-outcome-id");
	var copyFromOutcomeId = $(this).attr("data-aefis-copy-from-outcome-id");
	var copyFromOutcomeCode = $(this).attr("data-aefis-copy-from-outcome-code");
	// update data attriute in the outcome form outcome checkbox or parent div for use when content in related form is changed
	var $embeddedOptionsContainer = $(
		"#aefis-form-item-embedded-questions-container-" +
			formItemId +
			"-" +
			formItemOptionId +
			"-" +
			copyFromOutcomeId
	);
	var copyToOutcomeIdArray = $.makeArray(
		$embeddedOptionsContainer.attr("data-aefis-copy-to-secondary-id-list").split(",")
	).filter(function (elem) {
		return elem !== "";
	});
	if (checked && $.inArray(copyToOutcomeId, copyToOutcomeIdArray) < 0) {
		copyToOutcomeIdArray[copyToOutcomeIdArray.length] = copyToOutcomeId;
		$embeddedOptionsContainer.attr(
			"data-aefis-copy-to-secondary-id-list",
			copyToOutcomeIdArray.toString()
		);
		// check the outcome checkbox
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("check", function () {
			// but hide the template content since being copied to from this outcome now
			$(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeId
			).hide();
			$(
				"#form-item-studentoutcome-list-item-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeId
			).iCheck("disable");
		});
		// hide the add outcomes to copy to (plus) button
		$(
			".add-response-outcomes-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).hide();
		$(
			"input.aefis-form-item-embedded-questions-checkbox-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		)
			.closest("label")
			.click();
		// show the edit button
		//$(".edit-response-outcomes-copied-content-button[data-aefis-formitem-id=" + formItemId + "][data-aefis-formitem-option-id=" + formItemOptionId + "][data-aefis-outcome-id=" + copyToOutcomeId + "]").show();
		// update target / copy to outcome message
		//$(".add-response-outcomes-message[data-aefis-formitem-id=" + formItemId + "][data-aefis-formitem-option-id=" + formItemOptionId + "][data-aefis-outcome-id=" + copyToOutcomeId + "]").html('Updated by ' + copyFromOutcomeCode);
		// update copy from outcome message
		// get codes first
		var copyToOutcomeCodeArray = [];
		for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
			copyToOutcomeCodeArray[copyToOutcomeCodeArray.length] = $(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeIdArray[i]
			).attr("data-aefis-embedded-questions-parent-secondary-code");
		}
		$(
			".add-response-outcomes-message[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyFromOutcomeId +
				"]"
		).html("Updates " + copyToOutcomeCodeArray.toString());
		// copy responses to checked outcome form items
		$(
			"#aefis-form-item-embedded-questions-container-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		)
			.find(".aefis-formitem")
			.each(function (index) {
				var $formItem = $(this);
				var formItemId = $formItem.attr("data-aefis-formitem-id");
				var formItemCode = $formItem.attr("data-aefis-formitem-code");
				var fromFormItem = aefis.formItems.getFormItem(
					formItemCode,
					formItemId,
					copyFromOutcomeId
				);
				var toFormItem = aefis.formItems.getFormItem(
					formItemCode,
					formItemId,
					copyToOutcomeId
				);
				toFormItem.setValue(fromFormItem.getValue());
			});
	} else if (!checked && $.inArray(copyToOutcomeId, copyToOutcomeIdArray) >= 0) {
		copyToOutcomeIdArray.splice($.inArray(copyToOutcomeId, copyToOutcomeIdArray), 1);
		$embeddedOptionsContainer.attr(
			"data-aefis-copy-to-secondary-id-list",
			copyToOutcomeIdArray.toString()
		);
		//todo: toggle embedded form to hide??? (maybe remove, if added, info to say 'being copied to from outcome blah?)
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("uncheck");
		$(
			"#form-item-studentoutcome-list-item-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		).iCheck("enable");
		$(
			"input.aefis-form-item-embedded-questions-checkbox-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				copyToOutcomeId
		)
			.closest("label")
			.click();
		// hide the edit button
		//$(".edit-response-outcomes-copied-content-button[data-aefis-formitem-id=" + formItemId + "][data-aefis-formitem-option-id=" + formItemOptionId + "][data-aefis-outcome-id=" + copyToOutcomeId + "]").hide();
		// show the add outcomes to copy to (plus) button
		$(
			".add-response-outcomes-button[data-aefis-formitem-id=" +
				formItemId +
				"][data-aefis-formitem-option-id=" +
				formItemOptionId +
				"][data-aefis-outcome-id=" +
				copyToOutcomeId +
				"]"
		).show();
		// update message
		//$(".add-response-outcomes-message[data-aefis-formitem-id=" + formItemId + "][data-aefis-formitem-option-id=" + formItemOptionId + "][data-aefis-outcome-id=" + copyToOutcomeId + "]").html('');
		// update copy from outcome message
		// get codes first
		var copyToOutcomeCodeArray = [];
		for (var i = 0; i < copyToOutcomeIdArray.length; i++) {
			copyToOutcomeCodeArray[copyToOutcomeCodeArray.length] = $(
				"#aefis-form-item-embedded-questions-container-" +
					formItemId +
					"-" +
					formItemOptionId +
					"-" +
					copyToOutcomeIdArray[i]
			).attr("data-aefis-embedded-questions-parent-secondary-code");
		}
		if (copyToOutcomeCodeArray.length) {
			$(
				".add-response-outcomes-message[data-aefis-formitem-id=" +
					formItemId +
					"][data-aefis-formitem-option-id=" +
					formItemOptionId +
					"][data-aefis-outcome-id=" +
					copyFromOutcomeId +
					"]"
			).html("Updates " + copyToOutcomeCodeArray.toString());
		} else {
			$(
				".add-response-outcomes-message[data-aefis-formitem-id=" +
					formItemId +
					"][data-aefis-formitem-option-id=" +
					formItemOptionId +
					"][data-aefis-outcome-id=" +
					copyFromOutcomeId +
					"]"
			).html("");
		}
	}
};

// edit button for changing embedded content that is being updated by another outcome's content
aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.editResponseOutcomesCopiedContentButtonHandler =
	function (event) {
		var $addResponseButton = $(event.target).parent(
			".edit-response-outcomes-copied-content-button"
		);
		var outcomeId = $addResponseButton.attr("data-aefis-outcome-id");
		var formItemId = $addResponseButton.attr("data-aefis-formitem-id");
		var formItemOptionId = $addResponseButton.attr("data-aefis-formitem-option-id");
		// show the outcome template content
		$(
			"#aefis-form-item-embedded-questions-container-" +
				formItemId +
				"-" +
				formItemOptionId +
				"-" +
				outcomeId
		).show();
	};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.onChangeHandler = function (event) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcome = { outcomeId: $(event.target).attr("data-aefis-outcome-id") };
	//var $embeddedTemplate = $(".aefis-form-item-embedded-questions-container[data-aefis-embedded-questions-parent-option-id=" + $optionsContainer.attr('data-aefis-formitem-option-id') + "][data-aefis-embedded-questions-parent-secondary-id=" + outcome.outcomeId + "]");
	var $embeddedTemplate = $(event.target)
		.parents("li")
		.find(".aefis-form-item-embedded-questions-container");
	var $toggleButton = $(event.target).parents("li").find(".aefis-collapsible-button");
	var $copyButtonParent = $(event.target)
		.parents("li")
		.find(".copy-response-outcomes-button--container");
	//var $copyButton = $(event.target).parents('li').find('.add-response-outcomes-button--container button');
	if (event.target.checked) {
		$toggleButton.removeClass("super-muted");
		$embeddedTemplate.removeClass("hide");
		$embeddedTemplate.addClass("show");
		$toggleButton.removeClass("aefis-collapsible-button--active");
		// $copyButton.show();
		$copyButtonParent.show();
		//$embeddedTemplate.show();
		$embeddedTemplate.find(".unchecked-outcome").each(function () {
			var $item = $(this);
			$item.removeClass("unchecked-outcome");
			$item.removeClass("ignore-validation");
			$item.addClass("required");
			$item.attr("data-rule-required", true);
			$item.attr("aria-required", true);
		});
	} else {
		$toggleButton.addClass("super-muted");
		$embeddedTemplate.addClass("hide");
		$embeddedTemplate.removeClass("show");
		$toggleButton.addClass("aefis-collapsible-button--active");
		//$copyButton.hide();
		$copyButtonParent.hide();
		// $embeddedTemplate.hide();
		$embeddedTemplate.find(".required").each(function () {
			var $item = $(this);
			$item.addClass("unchecked-outcome");
			$item.addClass("ignore-validation");
			$item.removeClass("required");
			var attr = $item.attr("data-rule-required");
			$item.attr("aria-required", true);
			if (typeof attr !== typeof undefined && attr !== false) {
				$item.removeAttr("data-rule-required");
				$item.removeAttr("aria-required");
			}
		});
	}

	var assessmentOutcomeId = $(event.target).attr("data-aefis-assessment-outcome-id");
	if (typeof assessmentOutcomeId !== typeof undefined && assessmentOutcomeId !== false) {
		this.newValue = this.getValue();
		this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
		if (this.setSaving) {
			this.setSaving(true);
		}
	} else {
		var url = $optionsContainer.attr("data-aefis-assessment-outcome-datasource");
		var params = {
			relatedOutcomeMapId: $(event.target).attr("data-aefis-outcome-map-id"),
			code: $(event.target).attr("data-aefis-outcome-code"),
			name: $(event.target).attr("data-aefis-outcome-name"),
			description: $(event.target).attr("data-aefis-outcome-description"),
			programId: $optionsContainer.attr("data-aefis-program-id")
		};
		new aefis.ApiWrapper().call(url, {
			type: "POST",
			data: JSON.stringify(params),
			onSuccess: function (data) {
				$embeddedTemplate.attr(
					"data-aefis-embedded-questions-parent-secondary-id",
					data.assessmentOutcomeId
				);
				$(event.target).attr("data-aefis-assessment-outcome-id", data.assessmentOutcomeId);
				$(event.target)
					.closest("li")
					.attr("data-aefis-assessment-outcome-id", data.assessmentOutcomeId); // some cases (require to response all items) we are not rendering checkbox. we need this parameter for PROGRAMOUTCOMEMAPPING.
				this.newValue = this.getValue();
				this.$item.trigger("formitemchanged", {
					oldValue: this.oldValue,
					newValue: this.newValue
				});
				if (this.setSaving) {
					this.setSaving(true);
				}
			},
			onSuccessScope: this,
			beforeSend: function () {
				if (window.parent) {
					window.parent.aefis.ui.showPreviewObjectLoadingBar();
				}
			},
			onError: function (error) {
				if (window.parent) {
					window.parent.aefis.ui.hidePreviewObjectLoadingBar();
				}
			},
			onComplete: function (error) {
				if (window.parent) {
					window.parent.aefis.ui.hidePreviewObjectLoadingBar();
				}
			},
			onErrorScope: this
		});
	}
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find(".assessment-outcome-questions-checkbox").iCheck("enable");
	} else {
		this.$item.find(".assessment-outcome-questions-checkbox").iCheck("disable");
	}
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcomeContainer = {};
	outcomeContainer.checkedOptions = [];
	this.$item.find("input[data-aefis-for-entity='outcome']:checkbox").each(function (index, el) {
		var outcome = { assessmentOutcomeId: $(el).attr("data-aefis-assessment-outcome-id") };
		if (el.checked) {
			outcomeContainer.checkedOptions.push(outcome);
		}
	});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(outcomeContainer)
			}
		]
	};

	return value;
};

aefis.FormItems.ASSESSMENTOUTCOMEQUESTIONS.prototype.setValue = function (value) {
	var content = value.options[0].content;
	var selectedValues = JSON.parse(content).checkedOptions;
	this.$item.find(".aefis-form-item-embedded-questions-checkbox").each(function () {
		var $chk = $(this);
		var isFound = false;
		var assessmentOutcomeId = $chk.attr("data-aefis-assessment-outcome-id");
		if (assessmentOutcomeId) {
			for (var i = 0; i < selectedValues.length; i++) {
				if (assessmentOutcomeId == selectedValues[i].assessmentOutcomeId) {
					$chk.iCheck("check");
					var $embeddedTemplate = $chk
						.parents("li")
						.find(".aefis-form-item-embedded-questions-container");
					$embeddedTemplate.removeClass("hide");
					$embeddedTemplate.addClass("show");
					isFound = true;
					break;
				}
			}
			if (!isFound) {
				$chk.iCheck("uncheck");
				var $embeddedTemplate = $chk
					.parents("li")
					.find(".aefis-form-item-embedded-questions-container");
				$embeddedTemplate.removeClass("show");
				$embeddedTemplate.addClass("hide");
			}
		}
	});
};

/**
 * CLOSTUDENT - CLO student
 */
aefis.FormItems.CLOSTUDENT = function () {};
aefis.FormItems.CLOSTUDENT.prototype = new aefis.FormItems.Item();

aefis.FormItems.CLOSTUDENT.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:radio")
			.off("ifChecked", $.proxy(this.onChangeHandler, this))
			.on("ifChecked", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:radio").off("ifChecked", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.CLOSTUDENT.prototype.onChangeHandler = function (event) {
	var $target = $(event.target);
	var $optionsContainer = $target.closest(".aefis-formItem-options-container");
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: []
	};
	$optionsContainer.find("input:radio").each(function (index, el) {
		if ($(this).prop("checked")) {
			var formItemOptionId = $(this).attr("data-aefis-formitem-option-id");
			var $questionOptionsContainer = $(this).closest(".aefis-question-options-container");
			var content = {
				courseObjectiveId: $questionOptionsContainer.attr("data-aefis-course-objective-id")
			};
			var isFound = false;
			for (var i in value.options) {
				if (value.options[i].optionId == formItemOptionId) {
					value.options[i].content.push(content);
					isFound = true;
					break;
				}
			}
			if (!isFound) {
				var newContent = {
					optionId: formItemOptionId,
					content: [content]
				};
				value.options.push(newContent);
			}
		}
	});

	this.newValue = value;
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.CLOSTUDENT.prototype.setEnabled = function (enable) {
	this.$item.find("input:radio").each(function (index, el) {
		if (enable) {
			$(this).iCheck("enable");
		} else {
			$(this).iCheck("disable");
			$(this).parent().removeClass("hover");
		}
	});
};

aefis.FormItems.CLOSTUDENT.prototype.revertValue = function (oldValue) {
	this.$item.find("input:radio").each(function (index, el) {
		if ($(el).attr("data-aefis-formitem-option-id") == oldValue.options[0].optionId) {
			$(el).iCheck("check");
		} else {
			$(el).iCheck("uncheck");
		}
	});
};

/**
 * TERMSELECTION mulltiple choice single answer for stage
 */
aefis.FormItems.TERMSELECTION = function () {};
aefis.FormItems.TERMSELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.TERMSELECTION.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-question-options-container")
		.attr("data-aefis-formitem-option-id");
	var $theField = this.$item.find("select");
	var content = { termId: $theField.val() };
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

aefis.FormItems.TERMSELECTION.prototype.revertValue = function (oldValue) {
	this.$item.find("select").val(oldValue.options[0].optionId);
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.TERMSELECTION.prototype.setEnabled = function (enable) {
	if (enable) {
		//this.$item.find('.dropdown-toggle').removeClass('disabled');
		this.$item.find("select").prop("disabled", false);
	} else {
		//this.$item.find('.dropdown-toggle').addClass('disabled');
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

/**
 * PROGRAMOUTCOMESELECTION single text box that saves contents to a single form item option
 */

aefis.FormItems.PROGRAMOUTCOMESELECTION = function () {};
aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	var $tagContainer = that.$item.find("#aefis-tags-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		$tagContainer.find(".aefis-tag-item").each(function (index, el) {
			var $tagItem = $(el);
			$tagItem.find(":button").on("click", function (e) {
				$tagItem.remove();
				that.$item.find(".aefis-btn-add-student-outcome").click();
			});
		});
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		aefis.ui.initializeHandlebarsTemplate($tagContainer);
		var target = that.$item.find(".aefis-btn-add-student-outcome").attr("data-aefis-target");
		var $target = $(target);
		that.$container.find("#StudentOutcome").selectpicker("deselectAll");
	});
};

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".aefis-btn-add-student-outcome")
			.off("click", $.proxy(this.onChangeHandler, this))
			.on("click", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item
			.find(".aefis-btn-add-student-outcome")
			.off("click", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.onChangeHandler = function (event) {
	var that = this;
	var $button = $(event.target);
	var target = $button.attr("data-aefis-target");
	var $target = $(target);
	var objectClass = "";
	var triggerEvent = "";

	if ($button.hasClass("aefis-btn-add-student-outcome")) {
		$target.find(":selected").each(function () {
			var $option = $(this);
			var $container = $($option.attr("data-aefis-container"));
			var suggestion = {
				Code: $option.attr("data-aefis-code"),
				Entity: $option.attr("data-aefis-entity"),
				Id: $option.val(),
				Css: $option.attr("data-aefis-entity"),
				Name: $option.text(),
				Description: $option.attr("data-aefis-description")
			};
			if (!that.isDuplicate(suggestion.Entity, suggestion.Id, suggestion.Code)) {
				var tag = that.getFormattedTag(suggestion);
				$container.append(tag);
			}
		});
		objectClass = ".aefis-btn-add-student-outcome";
		triggerEvent = "onAddStudentOutcome";
	}

	this.newValue = this.getValue();
	this.$item
		.find(objectClass)
		.trigger(triggerEvent, { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.isDuplicate = function (pEntity, pId, pCode) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var target = $optionsContainer.attr("data-aefis-target");
	var $target = $(target);

	var isDuplicateValue = false;
	$optionsContainer.find(".aefis-tag-item").each(function (index, el) {
		var $tagItem = $(el);
		var id = $tagItem.attr("aefis-data-tag-id");
		var code = decodeURI($tagItem.attr("aefis-data-tag-code")).replace(/%2C/g, ",");
		var entity = $tagItem.attr("aefis-data-tag-entity-name");
		if (entity == pEntity && id == pId && code == pCode) {
			aefis.ui.userWarning(code + " is already added.");
			isDuplicateValue = true;
		}
	});
	return isDuplicateValue;
};

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.getFormattedTag = function (suggestion) {
	var css = "";
	var code = suggestion["Code"];
	var id = suggestion["Id"];
	var name = suggestion["Name"];
	var code = suggestion["Code"];
	var description = suggestion["Description"];
	var token = "";
	var entityName = suggestion["Entity"];
	var displayValue = code;

	if (code.charAt(0) == code.charAt(0).toLowerCase()) {
		displayValue = aefis.util.toTitleCase(code);
	}

	if (suggestion["Css"]) {
		css = suggestion["Css"];
	}

	token += '<span class="mdl-chip animated flipInX aefis-tag-item ';
	token += css + '"';

	if (entityName) {
		token += 'aefis-data-tag-entity-name="' + entityName + '"';
	}
	if (code) {
		token += 'aefis-data-tag-code="' + encodeURIComponent(code) + '"';
	}
	if (id) {
		token += 'aefis-data-tag-id="' + encodeURIComponent(id) + '"';
	}
	if (description) {
		token += 'aefis-data-tag-description="' + encodeURIComponent(description) + '"';
	}
	if (name) {
		token += 'aefis-data-tag-name="' + encodeURIComponent(name) + '"';
	}
	token += ">";
	token += '<span class="mdl-chip__text">' + displayValue + "</span>";
	token += "</span>";

	return token;
};

aefis.FormItems.PROGRAMOUTCOMESELECTION.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");

	var selectedContent = [];
	$optionsContainer.find(".aefis-tag-item").each(function (index, el) {
		var $tagItem = $(el);
		selectedContent.push({
			uuid: Math.random().toString(36).substr(2, 16),
			id: $tagItem.attr("aefis-data-tag-id"),
			code: decodeURI($tagItem.attr("aefis-data-tag-code")).replace(/%2C/g, ","),
			entity: $tagItem.attr("aefis-data-tag-entity-name"),
			description: decodeURI($tagItem.attr("aefis-data-tag-description")).replace(/%2C/g, ",")
		});
	});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(selectedContent)
			}
		]
	};

	return value;
};

/**
 * INSTRUCTORSELECTION mulltiple choice single answer for stage
 */
aefis.FormItems.INSTRUCTORSELECTION = function () {};
aefis.FormItems.INSTRUCTORSELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.INSTRUCTORSELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		that.$item.find("#aefis-false-container .aefis-field-clear").click();
		that.refreshHandlerbar();
	});

	that.refreshHandlerbar();
};

aefis.FormItems.INSTRUCTORSELECTION.prototype.refreshHandlerbar = function () {
	var that = this;
	var $tagContainer = that.$item.find("#aefis-instructor-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		$(this)
			.find(":button")
			.on("click", function (e) {
				that.$item.find("#facultyId").val("");
				that.newValue = that.getValue();
				that.$item.trigger("formitemchanged", {
					oldValue: that.oldValue,
					newValue: that.newValue
				});
			});
	});
};

aefis.FormItems.INSTRUCTORSELECTION.prototype.getValue = function () {
	var $container = this.$item.find(".aefis-question-options-container");
	var formItemOptionId = $container.attr("data-aefis-formitem-option-id");
	var selection = this.$item.find("#facultyId").val();
	var content = "";
	if (selection.split("-").length == 2) {
		content = selection.split("-")[1];
	}
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 * PROGRAMOUTCOMEMAPPING allows the user to create a relationship either Institution or External outcomes.
 */

aefis.FormItems.PROGRAMOUTCOMEMAPPING = function () {};
aefis.FormItems.PROGRAMOUTCOMEMAPPING.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMOUTCOMEMAPPING.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $select = this.$item.find(".aefis-outcome-selection");
	var assessmentOutcomeId = $select.closest("li").attr("data-aefis-assessment-outcome-id");

	var selectedContent = [];
	$select.find(":selected").each(function (index, el) {
		var $item = $(el);
		selectedContent.push($item.attr("data-aefis-program-outcome-map-id"));
	});

	var responseContent = {
		assessmentOutcomeId: assessmentOutcomeId,
		programOutcomeMapIds: selectedContent
	};

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(responseContent)
			}
		]
	};

	return value;
};

aefis.FormItems.PROGRAMOUTCOMEMAPPING.prototype.setValue = function (value) {
	var $select = this.$item.find(".aefis-outcome-selection");
	$select.selectpicker("deselectAll");
	var content = value.options[0].content;
	var selectedValues = JSON.parse(content).programOutcomeMapIds;
	for (var i = 0; i < selectedValues.length; i++) {
		$select
			.find("[data-aefis-program-outcome-map-id=" + selectedValues[i] + "]")
			.prop("selected", true);
	}
	$select.selectpicker("refresh");
};

/**
 * RELATIONALDATA Question that parse xml to render form item.
 */

aefis.FormItems.RELATIONALDATA = function () {};
aefis.FormItems.RELATIONALDATA.prototype = new aefis.FormItems.Item();

aefis.FormItems.RELATIONALDATA.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	$("#aefis-artifacts--refresh")
		.off("refresh")
		.on("refresh", function () {
			$("select.form-item-doc-artifact").each(function () {
				var $select = $(this);
				var currentValue = [];
				$select.find("option:selected").each(function () {
					currentValue.push(parseInt($(this).val()));
				});

				$select.attr("default-value", JSON.stringify(currentValue));
				$select.aefisselect();
			});
			var $btn = $("#aefis-artifacts-sidebar--refresh-button", window.parent.document);
			if ($btn.length) {
				window.parent.aefis.ui.refreshArtifactsForSideBar($btn, false);
			}
		});

	$container
		.find("select.form-item-doc-artifact")
		.off("dataLoaded")
		.on("dataLoaded", function () {
			var $select = $(this);
			$select.selectpicker("deselectAll");
			var defaultVal = $select.attr("default-value");
			if (defaultVal) {
				var defaultVals = jQuery.parseJSON(defaultVal);
				if (typeof defaultVals === "object") {
					for (var i in defaultVals) {
						var $item = $select.find("option[value=" + defaultVals[i] + "]");
						$item.prop("selected", "selected");
					}
				} else {
					var $item = $select.find("option[value=" + defaultVal + "]");
					$item.prop("selected", "selected");
				}
				$select.selectpicker("refresh");
				$select.removeAttr("default-value");
			}
		});

	$container
		.find(".aefis-preview-button")
		.off("click")
		.on("click", function () {
			var $button = $(this);
			var $dialog = $("#" + $button.attr("data-aefis-preview-dialog"));
			var templateId = $dialog.attr("data-aefis-template-id");
			var source = $("#" + templateId).html();
			var template = Handlebars.compile(source);
			var data = [];
			var $select = $button
				.closest(".aefis-question-options-container")
				.find("select.form-item-doc-artifact");
			$select.find("option:selected").each(function () {
				data.push({ name: $(this).text(), id: parseInt($(this).val()) });
			});
			if (data.length == 1) {
				aefis.ui.formArtifactPreviewInFrameContainer($button);
			} else if (data.length > 1) {
				$dialog.html(template({ records: data }));
				var options = {
					title: "Selected Documents",
					content: $dialog.html(),
					titleIconClass: "fa fa-document",
					onShown: function () {},
					showFooterCloseButton: true
				};
				aefis.ui.modalDialog(options);
			}
		});

	that.initializeSubItems(true);
	that.registerChangeHandler(true);
};

aefis.FormItems.RELATIONALDATA.prototype.initializeSubItems = function (register) {
	var that = this;
	this.items = [];
	this.$item.find(".aefis-relationaldata--formitem").each(function () {
		var type = $(this).attr("data-aefis-form-item-type");
		var formItemClass = eval("aefis.FormItems.RELATIONALDATA.Item." + type);
		if (formItemClass == undefined) {
			var formItem = new aefis.FormItems.RELATIONALDATA.Item();
		} else {
			var formItem = new formItemClass();
		}
		formItem.initialize($(this), that);
		if (!that.items[type]) {
			that.items[type] = [];
		}
		that.items[type][that.items[type].length] = formItem;
	});
};

aefis.FormItems.RELATIONALDATA.prototype.getFormItem = function (formItemType, formItemId) {
	var typeItems = this.items[formItemType];
	if ($.isArray(typeItems)) {
		for (var i = 0; i < typeItems.length; i++) {
			if (typeItems[i].id === formItemId) {
				return typeItems[i];
			}
		}
	}
	return undefined;
};

aefis.FormItems.RELATIONALDATA.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("#aefis-add-new-measure-button")
			.off("click", $.proxy(this.addItem, this))
			.on("click", $.proxy(this.addItem, this));
		this.$item
			.find(".delete-relationaldata-item-button")
			.off("click", $.proxy(this.deleteItem, this))
			.on("click", $.proxy(this.deleteItem, this));
		this.$item
			.find(".btn-add-relationaldata-formitem")
			.off("click", $.proxy(this.addItem, this))
			.on("click", $.proxy(this.addItem, this));
		this.$item
			.find(".btn-delete-relationaldata-formitem")
			.off("click", $.proxy(this.deleteItem, this))
			.on("click", $.proxy(this.deleteItem, this));
		//this.$item.off('change', $.proxy(this.onChangeHandler, this)).on('change', $.proxy(this.onChangeHandler, this));
	} else {
		this.$item.find("#aefis-add-new-measure-button").off("click", $.proxy(this.addItem, this));
		this.$item
			.find(".delete-relationaldata-item-button")
			.off("click", $.proxy(this.deleteItem, this));
		this.$item
			.find(".btn-add-relationaldata-formitem")
			.off("click", $.proxy(this.addItem, this));
		this.$item
			.find(".btn-delete-relationaldata-formitem")
			.off("click", $.proxy(this.deleteItem, this));
		//this.$item.off('change', $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.RELATIONALDATA.prototype.deleteItem = function (event) {
	var thisScope = this;
	var $button = $(event.target).closest("a");
	var target = $button.attr("data-aefis-target");
	var targetContainer = $button.attr("data-aefis-target-container");
	var $targetContainer = $button.closest(targetContainer);

	var objectLength = $targetContainer.find(target).length;
	if (objectLength == 1) {
		aefis.ui.alert("Alert", "You cannot delete last item.");
		return;
	}

	var buttonType = $button.attr("data-aefis-button-type");
	var options = {
		title: "Delete",
		content: "Are you sure you want to delete this item and all of its contents?",
		confirmActionName: "Delete",
		cancelActionName: "Cancel",
		onConfirm: function () {
			var $target = $button.closest(target);

			// get value todo: read fron formitem object
			var $formItemContainer = $button.closest(".aefis-formitem");
			var $optionsContainer = $button.closest(".aefis-form-item-options-container");
			var value = {
				formItemId: $formItemContainer.attr("data-aefis-formitem-id"),
				options: [
					{
						optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
						content: ""
					}
				]
			};
			var formItem = new aefis.FormItems.RELATIONALDATA.Item();
			value.options[0]["indexPath"] = formItem.getIndexPath($button);
			value.options[0]["remove"] = true;
			value["overrideExisting"] = true;

			aefis.page.saveFormitem($formItemContainer, value, value, true, function () {
				if (buttonType == "inner") {
					if (
						$button
							.closest(".aefis-relationaldata--formitem")
							.find(".btn-add-relationaldata-formitem")
							.not(".btn-zero").length == 1
					) {
						$button
							.closest(".aefis-relationaldata--formitem")
							.find(".btn-add-relationaldata-formitem.btn-zero")
							.show();
					}
				}
				$target.remove();
			});
		}
	};
	aefis.ui.confirm(options);
};

aefis.FormItems.RELATIONALDATA.prototype.addItem = function (event) {
	var thisScope = this;
	var $button = $(event.target).closest("button");
	var buttonType = $button.attr("data-aefis-button-type");

	$button.addClass("disabled").attr("disabled", "disabled");

	var objectName = "";
	if (typeof $button.attr("data-aefis-object-name") !== typeof undefined) {
		objectName = $button.attr("data-aefis-object-name");
	}

	var loadingTarget = $button.attr("data-aefis-loading-target");
	var loadingContainer = $button.closest(loadingTarget);
	var $loadingContainer = $(loadingContainer);

	var target = $button.attr("data-aefis-target");
	if (typeof target !== typeof undefined && target !== false) {
		var $listContainer = $(target);
	}
	var targetClosest = $button.attr("data-aefis-target-closest");
	if (typeof targetClosest !== typeof undefined && targetClosest !== false) {
		var $listContainer = $button.closest(targetClosest);
	}
	if (buttonType == "inner") {
		var itemLength = $button
			.closest('[data-aefis-form-item-type="RELATIONALDATA"]')
			.children("div.aefis-relationaldata-inner-item--container").length;
	} else {
		var itemLength = $button
			.closest("div.aefis-formItem-options-container")
			.find("div.aefis-relationaldata-item--container").length;
	}
	var url = $button.attr("aefis-get-content-url");
	url = aefis.util.replaceUrlParameter(url, "itemCounter", itemLength);
	new aefis.ApiWrapper().call(url, {
		type: "GET",
		beforeSend: function () {
			aefis.ui.loadingShow(
				"#" + $loadingContainer.attr("id"),
				"Adding " + objectName,
				"quick",
				true,
				true
			);
			window.parent.aefis.ui.showPreviewObjectLoadingBar();
		},
		onSuccess: function (data, jqXhr) {
			var html = $.parseHTML(data.response);
			var $item = $(html);
			$listContainer.append($item);
			//aefis.app.initializePage($listItem.closest('.aefis-formitem'));
			aefis.app.initializePage($item);
			// hack for tinymce in text
			var textFormItem = aefis.formItems.createFormItem("TEXT");
			textFormItem.initializeTinyMCE();
			
			$listContainer.find(".aefis-doc-artifact-add").on("click", function () {
				aefis.ui.addArtifactsForSidebar(this, function () {
					$listContainer.find(".aefis-doc-artifact-select").selectpicker("refresh");
				});
			});
			if (buttonType == "inner") {
				var $box = $button.closest('[data-aefis-form-item-type="RELATIONALDATA"]');
				$box.find(".btn-add-relationaldata-formitem.btn-zero").hide();
				$box.find(".btn-add-relationaldata-formitem.btn-zero:last").show();
				var $innerRelationalData = $box.find(
					'div[data-aefis-form-item-type="RELATIONALDATA"]'
				);
				if ($innerRelationalData) {
					$innerRelationalData.find(".btn-add-relationaldata-formitem.btn-zero").hide();
					$innerRelationalData
						.find(".btn-add-relationaldata-formitem.btn-zero:last")
						.show();
				}
			}
			thisScope.initializeSubItems(true);
			thisScope.registerChangeHandler(true);
		},
		onError: function (e, data) {
			console.log(e);
		},
		onComplete: function () {
			window.parent.aefis.ui.hidePreviewObjectLoadingBar();
			aefis.ui.loadingHide("#" + $loadingContainer.attr("id"));
			$button.removeClass("disabled").removeAttr("disabled");
		}
	});
};

aefis.FormItems.RELATIONALDATA.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: ""
			}
		]
	};

	return value;
};

aefis.FormItems.RELATIONALDATA.Item = function () {};
aefis.FormItems.RELATIONALDATA.Item.prototype = {
	id: 0,
	parent: null,
	newValue: {},
	oldValue: {},

	initialize: function ($container, parent) {
		var that = this;
		this.parent = parent;
		this.$container = $container;
		this.$item = $container;
		this.id = $container.attr("data-aefis-formitem-id");
		this.oldValue = this.getValue();
		this.newValue = this.getValue();
		var type = $container.attr("data-aefis-form-item-type");
		if (["RELATIONALDATA"].includes(type) == false) {
			this.registerChangeHandler(true);
		}
		this.$item.on("saved", function (e) {
			that.oldValue = that.newValue;
			if (that.setSaving) {
				that.setSaving.call(that, false);
			}
		});
	},

	onChangeHandler: function (e) {
		this.newValue = this.getValue();
		this.$item.trigger("formItemChanged", { oldValue: this.oldValue, newValue: this.newValue });
		if (this.setSaving) {
			this.setSaving(true);
		}
	},

	registerChangeHandler: function (register) {
		if (register)
			this.$item
				.off("change", $.proxy(this.onChangeHandler, this))
				.on("change", $.proxy(this.onChangeHandler, this));
		else this.$item.off("change", $.proxy(this.onChangeHandler, this));
	},

	getValue: function ($button) {
		var value = this.parent.getValue();
		var $formItem = this.$item.find(".relational-data-form-item");
		value.options[0]["content"] = $formItem.val();
		value.options[0]["indexPath"] = this.getIndexPath();
		value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");

		var contentKey = this.$item.attr("data-aefis-content-key");
		if (typeof contentKey !== "undefined") {
			value.options[0]["contentKey"] = contentKey;
		}

		return value;
	},

	setValue: function (value) {
		for (var i = 0; i < value.options.length; i++) {
			var option = value.options[i];
			var $currentItem = this.$item.find(".relational-data-form-item");
			$currentItem.val(option.content).change();
		}
	},

	getIndexPath: function ($button) {
		if (typeof $button === "undefined") {
			var $item = this.$item;
			var $formItem = this.$item.find(".relational-data-form-item");
		} else {
			var $item = $button;
			var $formItem = $button;
		}
		var jsonPathArray = [];
		if (typeof $button === "undefined") {
			var key = this.$item.attr("data-aefis-content-key");
		} else {
			var key = $button
				.closest(".aefis-relationaldata-inner-item--container")
				.attr("data-aefis-content-key");
		}
		$formItem.parents(".aefis-relationaldata--formitem").each(function (index) {
			var $el = $(this);
			var pathItem = {
				xmlValue: $el.attr("data-aefis-xml-value"),
				isMultiple: $el.attr("data-aefis-is-multiple") == "true"
			};
			pathItem["key"] = key;
			jsonPathArray.push(pathItem);
			key = $el
				.closest(".aefis-relationaldata-inner-item--container")
				.attr("data-aefis-content-key");
		});
		var pathItem = {
			xmlValue: "_",
			isMultiple:
				$item
					.closest(".aefis-relationaldata-item--container")
					.attr("data-aefis-is-multiple") == "true",
			key: $item
				.closest(".aefis-relationaldata-item--container")
				.attr("data-aefis-content-key")
		};
		jsonPathArray.push(pathItem);
		return jsonPathArray;
	},

	getHistoryId: function () {
		return this.$item.attr("data-aefis-history-id");
	},

	setHistoryId: function (historyId) {
		this.$item.attr("data-aefis-history-id", historyId);
		this.$item.closest(".aefis-formitem").attr("data-aefis-history-id", historyId);
	},

	setSaving: function (saving) {
		if (saving) {
			this.registerChangeHandler(false);
			//this.setEnabled(false);
			this.setEnabled.call(this, false);
		} else {
			this.registerChangeHandler(true);
			//this.setEnabled(true);
			this.setEnabled.call(this, true);
		}
	},

	setEnabled: function (enable) {}
};

aefis.FormItems.RELATIONALDATA.Item.TEXT = function () {};
aefis.FormItems.RELATIONALDATA.Item.TEXT.prototype = new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.TEXT.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-form-item");
	var mceEditor = tinymce.get($formItem.attr("id"));
	if (mceEditor) {
		value.options[0]["content"] = $(mceEditor.getBody()).html();
	} else {
		value.options[0]["content"] = $formItem.val();
	}
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");
	value.options[0]["indexPath"] = this.getIndexPath();

	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}

	return value;
};

aefis.FormItems.RELATIONALDATA.Item.TEXT.prototype.setValue = function (value) {
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var $currentItem = this.$item.find(".relational-data-form-item");
		var $mceEditor = $(tinymce.get($currentItem.attr("id")).getBody());
		$mceEditor.html(option.content);
	}
};

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN = function () {};
aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype = new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype.helper = {
	applyWhen: function (thatContext) {
		if (thatContext.whenItems.length) {
			thatContext.whenItems.forEach((whenItem) => {
				if (whenItem.action == "updateDescription") {
					var $formItem = thatContext.$item.find(".relational-data-form-item");
					var isFound = false;
					for (let caseKey in whenItem.case) {
						if ($formItem.find("option:selected").val() == caseKey) {
							isFound = true;
							thatContext.helper.updateValues(whenItem, caseKey, thatContext);
						}
					}
					if (!isFound && whenItem.case["default"]) {
						thatContext.helper.updateValues(whenItem, "default", thatContext);
					}
				}
			});
		}
	},

	updateValues: function (whenItem, caseKey, thatContext) {
		whenItem.case[caseKey].forEach((item) => {
			var $targetElement = thatContext.$item.closest(".survey-question-content-container");
			var elIds = item.id.split(".");
			for (var elId of elIds) {
				$targetElement = $targetElement.find("[data-aefis-xml-value='" + elId + "']");
			}
			var $targetContainer = $targetElement.closest(".relational-data-form-item-container");
			var $desc = $targetContainer.find(".item-title").find("p");
			$desc.html(item.value);
		});
	}
};

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype.initialize = function ($container, parent) {
	var that = this;
	this.parent = parent;
	this.$container = $container;
	this.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	var type = $container.attr("data-aefis-form-item-type");
	if (["RELATIONALDATA"].includes(type) == false) {
		this.registerChangeHandler(true);
	}
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	var $whenItems = $container.find("#when-items");
	if ($whenItems.length) {
		this.whenItems = JSON.parse($whenItems.text());
		this.helper.applyWhen(this);
	}
};

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype.onChangeHandler = function (e) {
	var that = this;
	this.newValue = this.getValue();
	this.$item.trigger("formItemChanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}

	that.helper.applyWhen(that);
};

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-form-item");
	var selectedContent = [];
	if ($formItem.is("select")) {
		$formItem.find("option:selected").each(function () {
			selectedContent.push($(this).val());
		});

		value.options[0]["content"] = JSON.stringify(selectedContent);
	}
	value.options[0]["indexPath"] = this.getIndexPath();
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");

	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}

	return value;
};

aefis.FormItems.RELATIONALDATA.Item.DROPDOWN.prototype.setValue = function (value) {
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var $select = this.$item.find("select.relational-data-form-item");
		var that = this;
		var currentValue = [];
		var defaultVals = jQuery.parseJSON(option.content);
		$select.selectpicker("deselectAll");
		if (typeof defaultVals === "object") {
			for (var i in defaultVals) {
				$select.find('option[value="' + defaultVals[i] + '"]').prop("selected", true);
			}
		} else {
			$select.find('option[value="' + defaultVals + '"]').prop("selected", true);
		}
		$select.aefisselect();
	}
};

aefis.FormItems.RELATIONALDATA.Item.MCSA = function () {};
aefis.FormItems.RELATIONALDATA.Item.MCSA.prototype = new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.MCSA.prototype.initialize = function ($container, parent) {
	var that = this;
	this.parent = parent;
	this.$container = $container;
	this.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	var type = $container.attr("data-aefis-form-item-type");
	if (["RELATIONALDATA"].includes(type) == false) {
		this.registerChangeHandler(true);
	}
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
};

aefis.FormItems.RELATIONALDATA.Item.MCSA.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:radio")
			.off("ifChecked", $.proxy(this.onChangeHandler, this))
			.on("ifChecked", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:radio").off("ifChecked", $.proxy(this.onChangeHandler, this));
}; 

aefis.FormItems.RELATIONALDATA.Item.MCSA.prototype.onChangeHandler = function (e) {
	this.newValue = this.getValue();
	this.$item.trigger("formItemChanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}

}; 

aefis.FormItems.RELATIONALDATA.Item.MCSA.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-form-item");
	var checkedOptions = [];
	this.$item.find("input:radio").each(function (index, el) {
		if (el.checked) {
			checkedOptions.push($(el).val());
		}
	});
	value.options = [
		{
			optionId: $formItem.attr("data-aefis-formitem-option-id"),
			content: JSON.stringify(checkedOptions)
		}
	]
	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}
	value.options[0]["indexPath"] = this.getIndexPath();
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");
	return value;
};


aefis.FormItems.RELATIONALDATA.Item.MCMA = function () {};
aefis.FormItems.RELATIONALDATA.Item.MCMA.prototype = new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.MCMA.prototype.initialize = function ($container, parent) {
	var that = this;
	this.parent = parent;
	this.$container = $container;
	this.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	var type = $container.attr("data-aefis-form-item-type");
	if (["RELATIONALDATA"].includes(type) == false) {
		this.registerChangeHandler(true);
	}
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
};

aefis.FormItems.RELATIONALDATA.Item.MCMA.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-form-item");
	var checkedOptions = [];
	this.$item.find("input:checkbox").each(function (index, el) {
		if (el.checked) {
			checkedOptions.push($(el).val());
		}
	});
	value.options = [
		{
			optionId: $formItem.attr("data-aefis-formitem-option-id"),
			content: JSON.stringify(checkedOptions)
		}
	]
	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}
	value.options[0]["indexPath"] = this.getIndexPath();
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");
	return value;
};


aefis.FormItems.RELATIONALDATA.Item.MCMA.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:checkbox").off("ifToggled", $.proxy(this.onChangeHandler, this));
}; 

aefis.FormItems.RELATIONALDATA.Item.MCMA.prototype.onChangeHandler = function (e) {
	this.newValue = this.getValue();
	this.$item.trigger("formItemChanged", {
		oldValue: this.oldValue,
		newValue: this.newValue
	});
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.RELATIONALDATA.Item.DOCARTIFACT = function () {};
aefis.FormItems.RELATIONALDATA.Item.DOCARTIFACT.prototype =
	new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.DOCARTIFACT.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-form-item");
	var selectedContent = [];
	if ($formItem.is("select")) {
		$formItem.find("option:selected").each(function () {
			selectedContent.push(parseInt($(this).val()));
		});

		value.options[0]["content"] = JSON.stringify(selectedContent);
	}
	value.options[0]["indexPath"] = this.getIndexPath();
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");

	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}

	return value;
};

aefis.FormItems.RELATIONALDATA.Item.DOCARTIFACT.prototype.setValue = function (value) {
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var $select = this.$item.find("select.form-item-doc-artifact");
		var that = this;
		var currentValue = [];
		var defaultVals = jQuery.parseJSON(option.content);
		if (typeof defaultVals === "object") {
			for (var i in defaultVals) {
				currentValue.push(parseInt(defaultVals[i]));
			}
		} else {
			currentValue.push(parseInt(defaultVals));
		}
		$select.attr("default-value", JSON.stringify(currentValue));
		$select.aefisselect();
	}
	this.$item.trigger("formItemChanged", { oldValue: this.oldValue, newValue: value });
};

aefis.FormItems.RELATIONALDATA.Item.PROGRAMRUBRICRESULTS = function () {};
aefis.FormItems.RELATIONALDATA.Item.PROGRAMRUBRICRESULTS.prototype =
	new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.PROGRAMRUBRICRESULTS.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");
	value.options[0]["indexPath"] = this.getIndexPath();

	var response = [];
	this.$item.find(".program-rubric-results-rubric-item").each(function (index, el) {
		var $responseItem = $(el);
		response.push({
			level: $responseItem.attr("data-aefis-rubric-level"),
			value: $responseItem.val()
		});
	});
	value.options[0]["content"] = JSON.stringify(response);

	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}

	return value;
};

aefis.FormItems.RELATIONALDATA.Item.PROGRAMRUBRICRESULTS.prototype.setValue = function (value) {
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var defaultVals = jQuery.parseJSON(option.content);
		for (var rubricIndex = 0; rubricIndex < defaultVals.length; rubricIndex++) {
			this.$item
				.find(
					".relational-data-form-item[data-aefis-rubric-level=" +
						defaultVals[rubricIndex].level +
						"]"
				)
				.val(defaultVals[rubricIndex].value);
		}
	}
};

aefis.FormItems.RELATIONALDATA.Item.TABLE = function () {};
aefis.FormItems.RELATIONALDATA.Item.TABLE.prototype = new aefis.FormItems.RELATIONALDATA.Item();

aefis.FormItems.RELATIONALDATA.Item.TABLE.prototype.initialize = function ($container, parent) {
	var that = this;
	this.parent = parent;
	this.$container = $container;
	this.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	var type = $container.attr("data-aefis-form-item-type");
	if (["RELATIONALDATA"].includes(type) == false) {
		this.registerChangeHandler(true);
	}
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.find("table.aefis-editable-table").on("deletedRow", function () {
		that.$item.trigger("formItemChanged", {
			oldValue: that.oldValue,
			newValue: that.getValue()
		});
	});
};

aefis.FormItems.RELATIONALDATA.Item.TABLE.prototype.getValue = function (register) {
	var value = this.parent.getValue();
	var $formItem = this.$item.find(".relational-data-table-form-item");

	var $theTable = $formItem.find("table[data-aefis-formitem-option-id]");
	var tableValue = "";
	var editTableObj = $theTable.data("aefis-editableTable");
	if (editTableObj) {
		tableValue = editTableObj.val();
	}
	value.options[0]["content"] = JSON.stringify(tableValue);
	value.options[0]["formItemTypeCode"] = this.$item.attr("data-aefis-form-item-type");
	value.options[0]["indexPath"] = this.getIndexPath();

	var contentKey = this.$item.attr("data-aefis-content-key");
	if (typeof contentKey !== "undefined") {
		value.options[0]["contentKey"] = contentKey;
	}
	var $itemForRequired = $formItem.find(".aefis-table-formitem-validator");
	if ($itemForRequired.length) {
		if (tableValue) {
			$itemForRequired.val(JSON.stringify(tableValue));
		} else {
			var initialValue = $itemForRequired.attr("data-aefis-initial-value");
			if (initialValue) {
				$itemForRequired.val(initialValue);
			}
		}
		$itemForRequired.trigger("onFormatFormFieldMarkup");
	}
	return value;
};

aefis.FormItems.RELATIONALDATA.Item.TABLE.prototype.setEnabled = function (enabled) {
	var $formItem = this.$item.find(".relational-data-table-form-item");
	if (enabled) {
		$formItem.find("td").removeClass("disabled");
	} else {
		$formItem.find("td").addClass("disabled");
	}
};

aefis.FormItems.RELATIONALDATA.Item.TABLE.prototype.setValue = function (value) {
	var $formItem = this.$item.find(".relational-data-table-form-item");
	var $theTable = $formItem.find("table[data-aefis-formitem-option-id]");
	var tableObjectId = $theTable.find("th[data-aefis-object]").first().attr("data-aefis-object");
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];
		var contentArray = jQuery.parseJSON(option.content);
		for (var rowIndex = 1; rowIndex <= contentArray.length; rowIndex++) {
			var contentItem = contentArray[rowIndex - 1][tableObjectId];
			var colIndex = 1;
			for (var key in contentItem) {
				var $cell = $theTable.find(
					"td[data-aefis-row-index=" +
						rowIndex +
						"][data-aefis-col-index=" +
						colIndex +
						"]"
				);
				$cell.html(contentItem[key]);
				$cell.attr("data-aefis-data", contentItem[key]);
				colIndex++;
			}
		}
	}
};

aefis.FormItems.RELATIONALDATA.Item.PROGRAMCOURSESELECTION = function () {};
aefis.FormItems.RELATIONALDATA.Item.PROGRAMCOURSESELECTION.prototype =
	new aefis.FormItems.RELATIONALDATA.Item();

(aefis.FormItems.RELATIONALDATA.Item.PROGRAMCOURSESELECTION.prototype.initialize = function (
	$container,
	parent
) {
	var that = this;
	this.parent = parent;
	this.$container = $container;
	this.$item = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	var type = $container.attr("data-aefis-form-item-type");
	if (["RELATIONALDATA"].includes(type) == false) {
		this.registerChangeHandler(true);
	}
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.$item.find(".aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find(".aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});

	$container.find(".aefis-select-course-selection").on("selectChanged", function () {
		var $select = $(this);
		var $titleTarget = that.$item.find("span.aefis-section-title");

		if ($titleTarget.length > 0) {
			var $descriptionTarget = that.$item.find("div.aefis-course-description-container");
			var $selected = $select.find("option:selected");

			$titleTarget.text(
				$selected.attr("aefis-course-code") + " - " + $selected.attr("aefis-course-name")
			);
			$descriptionTarget.text($selected.attr("aefis-course-description"));
		}
	});
}),
	(aefis.FormItems.RELATIONALDATA.Item.PROGRAMCOURSESELECTION.prototype.registerChangeHandler =
		function (register) {
			if (register) {
				this.$container
					.find(".aefis-select-course-selection")
					.off("selectChanged", $.proxy(this.onChangeHandler, this))
					.on("selectChanged", $.proxy(this.onChangeHandler, this));
			} else {
				this.$container
					.find(".aefis-select-course-selection")
					.off("selectChanged", $.proxy(this.onChangeHandler, this));
			}
		});

/* CLOAPPROVAL allows the user to create a relationship either Institution or External outcomes.
 */

aefis.FormItems.CLOAPPROVAL = function () {};
aefis.FormItems.CLOAPPROVAL.prototype = new aefis.FormItems.Item();

aefis.FormItems.CLOAPPROVAL.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("#aefis-add-clo-approval-button")
			.off("click", $.proxy(this.onClickHandler, this))
			.on("click", $.proxy(this.onClickHandler, this));
	} else {
		this.$item
			.find("#aefis-add-clo-approval-button")
			.off("click", $.proxy(this.onClickHandler, this));
	}
};

aefis.FormItems.CLOAPPROVAL.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.registerChangeHandler(true);
	that.$item
		.find("#aefis-cloapproval-container")
		.on("refresh", that.refreshHandlerbar)
		.trigger("refresh", -1);
};

aefis.FormItems.CLOAPPROVAL.prototype.refreshHandlerbar = function (event, newCloId) {
	var thisScope = this;
	event.stopPropagation();
	var $cloContainer = $(this);

	var initTagContainer = function (event) {
		$cloContainer
			.find(".btn-delete-tag")
			.off("click")
			.on("click", function () {
				var $btn = $(this);
				var url = $btn.attr("data-aefis-datasource");
				var $parent = $btn.parent();
				$parent.addClass("animated flipOutX");
				new aefis.ApiWrapper().call(url, {
					beforeSend: function () {
						if (window.parent) {
							window.parent.aefis.ui.showPreviewObjectLoadingBar();
						}
					},
					onComplete: function () {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					},
					onSuccess: function (data) {
						aefis.ui.doAfterAnimationEnds($parent, function () {
							$parent.remove();
						});
						var $tagContainer = $btn
							.closest(".aefis-course-learning-outcome")
							.find(".aefis-tags-container");
						aefis.ui.initializeHandlebarsTemplate($tagContainer, initTagContainer);
					},
					onError: function () {
						$parent.addClass("animated flipInX");
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					}
				});
			});
	};

	var initCloContainer = function (container) {
		var that = this;
		var $formItemContainer = $cloContainer.closest(".aefis-formItem-options-container");
		aefis.ui.initializeEditable(container);

		$cloContainer
			.find(".btn-open-add-tag-dialog")
			.off("click")
			.on("click", function () {
				var $btnOpenAddTagDialog = $(this);
				var modalId = "aefis-modal-dialog" + Math.floor(Math.random() * 100);
				var $addTagDialog = $formItemContainer.find("#aefis-add-tag-dialog");

				var options = {
					modalId: modalId,
					title: "Add Tag",
					content: $addTagDialog.html(),
					titleIconClass: "fa fa-document",
					onShown: function () {
						var $modal = $("#" + modalId);
						var $tag = $modal.find(".aefis-tag-select");
						if ($().typeahead) {
							$tag.typeahead("destroy");
							$tag.aefistagtypeahead();
						}
						$modal
							.find("#btn-submit-tag")
							.off("click")
							.on("click", function () {
								var tagValue = "";
								try {
									var tag = JSON.parse($tag.val());
									if (tag.Entity !== undefined) {
										tagValue = tag.Entity + "-" + tag.Id;
									} else {
										tagValue = tag.Name;
									}
								} catch (e) {
									tagValue = $tag.val();
								}

								var url = $btnOpenAddTagDialog.attr("data-aefis-datasource");
								new aefis.ApiWrapper().call(url, {
									data: { Tag: tagValue },
									beforeSend: function () {
										if (window.parent) {
											window.parent.aefis.ui.showPreviewObjectLoadingBar();
										}
									},
									onComplete: function () {
										if (window.parent) {
											window.parent.aefis.ui.hidePreviewObjectLoadingBar();
										}
									},
									onSuccess: function (data) {
										var $tagContainer = $btnOpenAddTagDialog
											.closest(".aefis-course-learning-outcome")
											.find(".aefis-tags-container");
										aefis.ui.initializeHandlebarsTemplate(
											$tagContainer,
											initTagContainer
										);
										$modal.modal("hide");
									},
									onError: function () {
										if (window.parent) {
											window.parent.aefis.ui.hidePreviewObjectLoadingBar();
										}
									}
								});
							});
					},
					showFooterCloseButton: true
				};
				aefis.ui.modalDialog(options);
			});

		if (newCloId >= 0) {
			var addedDescriptionTagId = "#aefis-clo-approval-description-" + newCloId;
			$(addedDescriptionTagId).editable("toggle");
		}
		var $addButton = $("#aefis-add-clo-approval-button");
		var cloLimit = $addButton.attr("data-aefis-clo-count-limit");
		var cloItemCount = $(".aefis-business-object-container-edit").length;
		if (cloItemCount >= cloLimit) {
			$addButton.prop("disabled", true);
			$addButton.attr("title", "You can add at most " + cloLimit + " CLOs.");
		} else {
			$addButton.prop("disabled", false);
			$addButton.removeAttr("title");
		}

		var maxLength = $("a.aefis-editable--clo-approval-description").attr(
			"data-aefis-character-limit"
		);
		$("a.aefis-editable--clo-approval-description").on("shown", function () {
			var $innerForm = $(this).data("editable").input.$input.closest("form");
			var $outerForm = $innerForm.parents("form").eq(0);
			$innerForm.data("validator", $outerForm.data("validator"));

			var $textArea = $("textarea.aefis-clo-approval-description-text-area");

			$textArea.attr("maxlength", maxLength);
			$textArea.attr("data-aefis-character-limit", maxLength);
			aefis.ui.initializeAefisTextarea($textArea);
			$textArea.trigger("keyup");

			$("div.aefis-textarea-character-limit-container").css("margin", "5px 0px 5px 0px");
		});

		if ($cloContainer.find(".aefis-tags-container").length) {
			$cloContainer.find(".aefis-tags-container").each(function () {
				var $obj = $(this);
				aefis.ui.initializeHandlebarsTemplate($obj, initTagContainer);
			});
		}

		var $selects = $formItemContainer.find("select.aefis-select");
		$selects.aefisselect();
		$selects.off("change").on("change", function (event) {
			var selectScope = this;
			var $select = $(this);
			var skipRequest = false;
			var attributes = this.attributes;
			if (!this.oldValue) {
				if (attributes["data-select-default-value"]) {
					var defaultVal = attributes["data-select-default-value"].value;
					if (defaultVal) {
						this.oldValue = defaultVal;
						skipRequest = true;
					} else {
						this.oldValue = "";
					}
				} else {
					this.oldValue = "";
				}
			}

			if (
				!skipRequest &&
				(this.oldValue || event.target.value) &&
				this.oldValue != event.target.value
			) {
				var url = attributes["data-url"].value;
				var pk = attributes["data-pk"].value;

				var data = {
					cloId: pk
				};

				if (event.target.value) {
					data["cloTypeId"] = event.target.value;
				}

				new aefis.ApiWrapper().call(url, {
					type: "POST",
					data: JSON.stringify(data),
					beforeSend: function () {
						if (window.parent) {
							window.parent.aefis.ui.showPreviewObjectLoadingBar();
						}
					},
					onSuccess: function (data, jqXhr) {
						$select.selectpicker("refresh");
					},
					onError: function (e, data) {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					},
					onComplete: function () {
						if (window.parent) {
							window.parent.aefis.ui.hidePreviewObjectLoadingBar();
						}
					}
				});
			}
			this.oldValue = event.target.value;
		});
	};

	aefis.ui.initializeHandlebarsTemplate($cloContainer, initCloContainer);
};

aefis.FormItems.CLOAPPROVAL.prototype.onClickHandler = function (event) {
	var that = this;
	var $button = this.$item.find("#aefis-add-clo-approval-button");
	var url = $button.attr("data-aefis-datasource");
	var courseId = $button.attr("data-aefis-course-id");

	var data = {
		courseId: courseId
	};

	new aefis.ApiWrapper().call(url, {
		type: "POST",
		data: JSON.stringify(data),
		beforeSend: function () {
			if (window.parent) {
				window.parent.aefis.ui.showPreviewObjectLoadingBar();
			}
		},
		onSuccess: function (data, jqXhr) {
			if (aefis.util.isObject(data)) {
				data = JSON.stringify(data);
			}
			var newCloId = JSON.parse(data)["Id"];

			that.$item.find("#aefis-cloapproval-container").trigger("refresh", newCloId);
		},
		onError: function (e, data) {
			errorCallback(e, data);
			if (window.parent) {
				window.parent.aefis.ui.hidePreviewObjectLoadingBar();
			}
		},
		onComplete: function () {
			if (window.parent) {
				window.parent.aefis.ui.hidePreviewObjectLoadingBar();
			}
		}
	});
};

aefis.FormItems.CLOAPPROVAL.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $select = this.$item.find(".aefis-outcome-selection");
	var assessmentOutcomeId = $select.closest("li").attr("data-aefis-assessment-outcome-id");

	var $optionId = this.$item.find(".data-aefis-formitem-option-id");

	var selectedContent = [];
	$select.find(":selected").each(function (index, el) {
		var $item = $(el);
		selectedContent.push($item.attr("data-aefis-program-outcome-map-id"));
	});

	var responseContent = {
		assessmentOutcomeId: assessmentOutcomeId,
		programOutcomeMapIds: selectedContent
	};

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),

		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(responseContent)
			}
		]
	};

	return value;
};

/* STUDENT WORK.
 */

aefis.FormItems.STUDENTWORK = function () {};
aefis.FormItems.STUDENTWORK.prototype = new aefis.FormItems.Item();

aefis.FormItems.STUDENTWORK.prototype.initialize = function ($container) {
	var that = this;

	setTimeout(function () {
		var $workList = $("#work-list");
		var favorites = $workList.attr("data-aefis-favorites");
		var dataSource = $workList.attr("data-aefis-datasource");
		var dataSourceArray = JSON.parse(dataSource);

		ui.ReactDOM.render(
			ui.React.createElement(ui.AchievementCardGrid, {
				pageContext: that,
				editable: $workList.attr("data-display-type") == "edit",
				favorites: favorites == "" ? {} : JSON.parse(favorites),
				dataSource: dataSourceArray,
				onRef: function (innerChild) {
					that.workList = innerChild;
				}
			}),
			$workList.get(0)
		);
	}, 0);
};

aefis.FormItems.STUDENTWORK.prototype.previewDocument = function (item) {
	var $previewContainer = $("#aefis-document-preview--container");
	if (item.Submissions && item.Submissions.FileUUID) {
		var fileUuid = item.Submissions.FileUUID;
		aefis.ui.artifactPreviewInFrameContainer($previewContainer, fileUuid);
	}
};

/* PROGRAM OUTCOME COURSE MAPPING.
 */

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING = function () {};
aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype.initialize = function ($container) {
	const that = this;
	const $tagContainer = $container.find("[id^=aefis-tags-container]");
	that.$item = $container;
	// data-aefis-embedded-questions-parent-option-id
	// data-aefis-embedded-questions-parent-secondary-id

	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	const assessmentOutcomeId = this.getEmbededQuestionSecondaryId();

	let datasourceStr = $tagContainer.attr("data-aefis-datasource");
	datasourceStr = datasourceStr.concat("&assessmentOutcomeId=").concat(assessmentOutcomeId);
	$tagContainer.attr("data-aefis-datasource", datasourceStr);

	aefis.ui.initializeHandlebarsTemplate($tagContainer);
};

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype.showSelection = function (el, uuid) {
	const $showButton = $(el);
	$showButton.addClass("hidden");
	const $hideButton = $("#button-hide-".concat(uuid));
	$hideButton.removeClass("hidden");

	const $selectContainer = $("#aefis-select-container-".concat(uuid));
	$selectContainer.removeClass("hidden");
};

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype.hideSelection = function (el, uuid) {
	const $hideButton = $(el);
	$hideButton.addClass("hidden");
	const $showButton = $("#button-show-".concat(uuid));
	$showButton.removeClass("hidden");

	const $selectContainer = $("#aefis-select-container-".concat(uuid));
	$selectContainer.addClass("hidden");
};

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype.deleteCourseTag = function (el) {
	const that = this;
	const $button = $(el);
	that.$item = $button;

	const assessmentOutcomeId = this.getEmbededQuestionSecondaryId();
	const $tagContainer = $($button.attr("data-aefis-refresh"));
	const url = $button.attr("data-aefis-datasource");

	new aefis.ApiWrapper().call(url, {
		data: {
			assessmentOutcomeId: assessmentOutcomeId
		},
		onSuccess: function (data) {
			aefis.ui.initializeHandlebarsTemplate($tagContainer);
		}
	});
};

aefis.FormItems.PROGRAMOUTCOMECOURSEMAPPING.prototype.addCourseTag = function (el) {
	const that = this;
	const $button = $(el);
	const url = $button.attr("data-aefis-datasource");
	that.$item = $button;

	const assessmentOutcomeId = this.getEmbededQuestionSecondaryId();
	const $courseSelection = $($button.attr("data-aefis-first-target"));

	const $tagContainer = $($button.attr("data-aefis-refresh"));

	let courseIdArray = [];
	$courseSelection.find(":selected").each(function () {
		var $option = $(this);
		courseIdArray.push($option.val());
	});
	const data = {
		assessmentOutcomeId: assessmentOutcomeId,
		CoursesId: courseIdArray
	};
	if (courseIdArray.length > 0) {
		new aefis.ApiWrapper().call(url, {
			type: "POST",
			data: JSON.stringify(data),
			beforeSend: function () {
				$button.button("loading");
			},
			onError: function () {
				$button.button("reset");
			},
			onComplete: function () {
				$button.button("reset");
			},
			onSuccess: function (data) {
				aefis.ui.initializeHandlebarsTemplate($tagContainer);
			}
		});
	}
};

/* USERBUSINESSOBJECTSELECTION
 */

aefis.FormItems.USERBUSINESSOBJECTSELECTION = function () {};
aefis.FormItems.USERBUSINESSOBJECTSELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.USERBUSINESSOBJECTSELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("postSaved", function (e) {
		aefis.ui.loadingShow(
			"#aefis-main-content-container",
			"Reloading form. Please wait...",
			"",
			true,
			false
		);
		window.location.reload();
	});

	$container
		.find("select")
		.off("dataLoaded")
		.on("dataLoaded", function () {
			var $select = $(this);
			$select.selectpicker("deselectAll");
			var defaultVal = $select.attr("default-value");
			if (defaultVal) {
				var defaultVals = jQuery.parseJSON(defaultVal);
				if (typeof defaultVals === "object") {
					for (var i in defaultVals) {
						var $item = $select.find("option[value=" + defaultVals[i] + "]");
						$item.prop("selected", "selected");
					}
				} else {
					var $item = $select.find("option[value=" + defaultVal + "]");
					$item.prop("selected", "selected");
				}
				$select.selectpicker("refresh");
				$select.removeAttr("default-value");
			}
		});

	that.registerChangeHandler(true);
};

aefis.FormItems.USERBUSINESSOBJECTSELECTION.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-question-options-container")
		.attr("data-aefis-formitem-option-id");
	var $theField = this.$item.find("select");
	var content = { businessObjectId: $theField.val() };
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		],
		triggerFormItemPostSave: true
	};
	return value;
};

aefis.FormItems.USERBUSINESSOBJECTSELECTION.prototype.setValue = function (value) {
	var $select = this.$item.find("select");
	$select.selectpicker("deselectAll");
	var content = value.options[0].content;
	var selectedValue = JSON.parse(content).businessObjectId;
	$select.find("option[value=" + selectedValue + "]").prop("selected", true);
	$select.selectpicker("refresh");
};

/* EXPERIENCELOCATIONSELECTION
 */

aefis.FormItems.EXPERIENCELOCATIONSELECTION = function () {};
aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.formItemId = this.$container.attr("data-aefis-formitem-id");
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		that.$item.find("#aefis-false-container .aefis-field-clear").click();
		that.refreshHandlerbar();
	});

	that.refreshHandlerbar();
	that.registerChangeHandler(true);
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".browse-location-by-filter,.browse-location")
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find("input:radio")
			.off("change", $.proxy(this.onSearchByChange, this))
			.on("change", $.proxy(this.onSearchByChange, this));
		this.$item
			.find(".location-dropdown-filter")
			.off("change", $.proxy(this.updateSearchUrl, this))
			.on("change", $.proxy(this.updateSearchUrl, this));
		this.$item
			.find(".location-text-filter")
			.off("blur", $.proxy(this.updateSearchUrl, this))
			.on("blur", $.proxy(this.updateSearchUrl, this));
	} else {
		this.$item
			.find(".browse-location-by-filter,.browse-location")
			.off("change", $.proxy(this.onChangeHandler, this));
		this.$item.find("input:radio").off("change", $.proxy(this.onSearchByChange, this));
		this.$item
			.find(".location-dropdown-filter")
			.off("change", $.proxy(this.updateSearchUrl, this));
		this.$item.find(".location-text-filter").off("blur", $.proxy(this.updateSearchUrl, this));
	}
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.updateSearchUrl = function (e) {
	var that = this;
	var $browseLocationByFilter = this.$container.find(".browse-location-by-filter");
	var $el = $(e.target);
	var urlParam = $el.attr("data-aefis-url-param");
	var urlValue = $el.val();
	var url = $browseLocationByFilter.attr("data-aefis-datasource");
	if (urlValue) {
		url = aefis.util.replaceUrlParameter(url, urlParam, encodeURIComponent(urlValue));
	} else {
		url = aefis.util.removeUrlParameter(url, urlParam);
	}
	$browseLocationByFilter.attr("data-aefis-datasource", url);
	$browseLocationByFilter.typeahead("destroy");
	$browseLocationByFilter.aefistagtypeahead();
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.onSearchByChange = function (e) {
	var that = this;
	var $rd = $(e.target);
	if ($rd.val() == "name") {
		that.$item.find("#experience-location-selection-name-container-" + that.formItemId).show();
		that.$item
			.find("#experience-location-selection-address-container-" + that.formItemId)
			.hide();
	} else {
		that.$item.find("#experience-location-selection-name-container-" + that.formItemId).hide();
		that.$item
			.find("#experience-location-selection-address-container-" + that.formItemId)
			.show();
	}
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.refreshHandlerbar = function () {
	var that = this;
	var $tagContainer = that.$item.find("#aefis-location-list-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		that.$item
			.find(".btn-remove-location")
			.off("click")
			.on("click", function (e) {
				var $theField = $(this);
				$theField.closest(".aefis-selected-locations").remove();
				that.newValue = that.getValue();
				that.$item.trigger("formitemchanged", {
					oldValue: that.oldValue,
					newValue: that.newValue
				});
			});
	});
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.getValue = function () {
	var that = this;
	var $optionsContainer = this.$item.find(".aefis-question-options-container");
	var formItemOptionId = $optionsContainer.attr("data-aefis-formitem-option-id");
	var maxSelection = $optionsContainer.attr("data-aefis-max-selection");
	var $selectLocations = this.$item.find(".aefis-selected-locations");
	if ($selectLocations.length >= maxSelection) {
		aefis.ui.userWarning(
			"You cannot add more than " + maxSelection + " items.",
			true,
			"Warning!"
		);
		return;
	}

	var selectedContent = [];
	var index = 1;
	$selectLocations.each(function () {
		var $theField = $(this);
		selectedContent.push({
			order: index++,
			value: parseInt($theField.attr("aefis-data-value"))
		});
	});

	var $searchType = $("input[name='rd-location-search-" + that.formItemId + "']:checked");
	var itemsToSearch = ".browse-location";
	if ($searchType.val() == "address") {
		itemsToSearch = ".browse-location-by-filter";
	}

	var $browseLocation = this.$container.find(itemsToSearch);
	$browseLocation.each(function () {
		var $theField = $(this);
		if ($theField.val() != "") {
			var obj = JSON.parse($theField.val());
			var filteredItems = selectedContent.filter(function (e) {
				return e.value == obj.Id;
			});
			if (filteredItems.length > 0) {
				aefis.ui.userWarning("You cannot add same item more than once.", true, "Warning!");
				return;
			}
			if (obj.Id) {
				selectedContent.push({ order: index++, value: parseInt(obj.Id) });
			}
		}
	});

	var content = { locations: selectedContent };
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: JSON.stringify(content)
			}
		]
	};
	return value;
};

aefis.FormItems.EXPERIENCELOCATIONSELECTION.prototype.setValue = function (value) {
	var that = this;
	for (var i = 0; i < value.options.length; i++) {
		var option = value.options[i];

		that.newValue = option.content;
		that.$item.trigger("formitemchanged", { oldValue: that.oldValue, newValue: that.newValue });
	}
};

/**
 * FACULTYSELECTION mulltiple choice single answer for stage
 */
aefis.FormItems.FACULTYSELECTION = function () {};
aefis.FormItems.FACULTYSELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.FACULTYSELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		that.$item.find("#aefis-false-container .aefis-field-clear").click();
		that.refreshHandlerbar();
	});

	this.$item.on("postSaved", function (e) {
		aefis.ui.loadingShow(
			"#aefis-main-content-container",
			"Reloading form. Please wait...",
			"",
			true,
			false
		);
		window.location.reload();
	});

	that.refreshHandlerbar();
};

aefis.FormItems.FACULTYSELECTION.prototype.refreshHandlerbar = function () {
	var that = this;
	var $tagContainer = that.$item.find("#aefis-instructor-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		$(this)
			.find(":button")
			.on("click", function (e) {
				that.$item.find("#facultyId").val("");
				that.newValue = that.getValue();
				that.$item.trigger("formitemchanged", {
					oldValue: that.oldValue,
					newValue: that.newValue
				});
			});
	});
};

aefis.FormItems.FACULTYSELECTION.prototype.getValue = function () {
	var $container = this.$item.find(".aefis-question-options-container");
	var formItemOptionId = $container.attr("data-aefis-formitem-option-id");
	var selection = this.$item.find("#facultyId").val();
	var content = "";
	if (selection.split("-").length == 2) {
		content = selection.split("-")[1];
	}
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		],
		triggerFormItemPostSave: true
	};
	return value;
};

/**
 * PROGRAMCOURSESELECTION single line text box that saves contents to a single form item option
 */
aefis.FormItems.PROGRAMCOURSESELECTION = function () {};
aefis.FormItems.PROGRAMCOURSESELECTION.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMCOURSESELECTION.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.$item.find(".aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find(".aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});

	$container.find(".aefis-select-course-selection").on("selectChanged", function () {
		var $select = $(this);
		var $titleTarget = that.$container.find("span.aefis-section-title");

		if ($titleTarget.length > 0) {
			var $descriptionTarget = that.$container.find("div.aefis-course-description-container");
			var $selected = $select.find("option:selected");

			$titleTarget.text(
				$selected.attr("aefis-course-code") + " - " + $selected.attr("aefis-course-name")
			);
			$descriptionTarget.text($selected.attr("aefis-course-description"));
		}
	});
};

aefis.FormItems.PROGRAMCOURSESELECTION.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$container
			.find(".aefis-select-course-selection")
			.off("selectChanged", $.proxy(this.onChangeHandler, this))
			.on("selectChanged", $.proxy(this.onChangeHandler, this));
	} else {
		this.$container
			.find(".aefis-select-course-selection")
			.off("selectChanged", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.PROGRAMCOURSESELECTION.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $courseSelect = $optionsContainer.find(".aefis-select-course-selection");
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: $courseSelect.val()
			}
		]
	};
	return value;
};

/**
 * AGGREGATEASSESSMENT
 */
aefis.FormItems.AGGREGATEASSESSMENT = function () {};
aefis.FormItems.AGGREGATEASSESSMENT.prototype = new aefis.FormItems.Item();

aefis.FormItems.AGGREGATEASSESSMENT.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$container.find(".document-container").each(function (index, el) {
		$(this)
			.off("refreshTable")
			.on("refreshTable", function (event, newData, deleteId, isSave) {
				var $documentContainer = $(this);
				var templateId = $documentContainer.attr("data-aefis-template-id");
				var source = $("#" + templateId).html();
				var template = Handlebars.compile(source);
				var data = $documentContainer.attr("data-aefis-documents");
				var dataArray = JSON.parse(data);
				if (typeof newData !== "undefined" && newData != null) {
					if (newData.Id && $.isNumeric(newData.Id)) {
						dataArray.push(newData);
						$documentContainer.attr("data-aefis-documents", JSON.stringify(dataArray));
					}
				}
				if (typeof deleteId !== "undefined" && $.isNumeric(deleteId)) {
					dataArray = dataArray.filter(function (el) {
						return el != null && el.Id != deleteId;
					});
					$documentContainer.attr("data-aefis-documents", JSON.stringify(dataArray));
				}
				$documentContainer.html(template({ records: dataArray }));
				if (typeof isSave !== "undefined" && isSave == true) {
					that.newValue = that.getValue();
					that.$item.trigger("formitemchanged", {
						oldValue: that.oldValue,
						newValue: that.newValue
					});
				}
				$documentContainer
					.closest("#assessement-rubric-container")
					.find("#document-count")
					.attr("data-badge", dataArray.length);
				that.registerChangeHandler(true);
			});
		$(this).trigger("refreshTable");
	});
};

aefis.FormItems.AGGREGATEASSESSMENT.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
		this.$container
			.find(".btn-attach-document")
			.off("click", $.proxy(this.onAttachDocument, this))
			.on("click", $.proxy(this.onAttachDocument, this));
		this.$container
			.find(".btn-remove-document")
			.off("click", $.proxy(this.onRemoveDocument, this))
			.on("click", $.proxy(this.onRemoveDocument, this));
	} else {
		this.$item.off("change", $.proxy(this.onChangeHandler, this));
		this.$container
			.find(".btn-attach-document")
			.off("click", $.proxy(this.onAttachDocument, this));
		this.$container
			.find(".btn-remove-document")
			.off("click", $.proxy(this.onRemoveDocument, this));
	}
};

aefis.FormItems.AGGREGATEASSESSMENT.prototype.onAttachDocument = function (event) {
	event.preventDefault();
	var $formItem = this.$item;
	var modalId = "aefis-modal-dialog" + Math.floor(Math.random() * 100);
	var $assessmentRubricContainer = $(event.target).closest("#assessement-rubric-container");
	var content = $assessmentRubricContainer.find("#document-upload-content").html();

	aefis.ui.modalDialog({
		modalId: modalId,
		title: "<i class=icon-archive></i>&nbsp;Attach File",
		content: content,
		size: "small",
		showFooterCloseButton: true,
		onShown: function () {
			$("#" + modalId)
				.find("#dropzone-content")
				.addClass("dropzone")
				.addClass("aefis-dropzone");
			aefis.ui.initializeDropZone($("#" + modalId));
			$("#" + modalId)
				.find("div.dropzone")
				.off("completed")
				.on("completed", function (obj, file) {
					var doc = file.DATA.DOCUMENTENTITY;
					var newDocument = {
						Id: doc.Id,
						Name: doc.FileName + "." + doc.Extension,
						Url: doc.DownloadUrl
					};
					$assessmentRubricContainer
						.find("div.document-container")
						.trigger("refreshTable", [newDocument, null, true]);
				});
		},
		closeCallback: function () {
			return false;
		}
	});
};

aefis.FormItems.AGGREGATEASSESSMENT.prototype.onRemoveDocument = function (event) {
	event.preventDefault();

	var options = {
		title: "Remove",
		content: "Are you sure to remove the document?",
		successMessage: "Document was remove successfully.",
		errorMessage: "Error with document remove.",
		confirmActionName: "Remove",
		cancelActionName: "Cancel",
		onConfirm: function () {
			var $btnRemove = $(event.target);
			var $assessmentRubricContainer = $btnRemove.closest("#assessement-rubric-container");
			var deleteId = $btnRemove.closest("tr").attr("data-aefis-document-id");
			$assessmentRubricContainer
				.find("div.document-container")
				.trigger("refreshTable", [null, deleteId, true]);
		},
		onSuccess: function () {}
	};
	aefis.ui.confirm(options);
};

aefis.FormItems.AGGREGATEASSESSMENT.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var content = {
		courseSectionId: $optionsContainer.find("#course-section-id").val(),
		assessmentRubrics: []
	};
	$optionsContainer.find(".assessement-rubric-container").each(function (index, el) {
		var $assessmentRubricContainer = $(this);
		var isMapped = $assessmentRubricContainer.attr("data-aefis-is-mapped");
		var assessmentRubricResponse = {
			rubrics: [],
			documents: [],
			notes: $assessmentRubricContainer.find("textarea#assessment-outcome-notes").val()
		};
		if (isMapped == "true") {
			assessmentRubricResponse["programMapId"] = $assessmentRubricContainer.attr(
				"data-aefis-program-map-id"
			);
			assessmentRubricResponse["programOutcomeMapId"] = $assessmentRubricContainer.attr(
				"data-aefis-program-outcome-map-id"
			);
		} else {
			assessmentRubricResponse["courseLearningObjectiveId"] = $assessmentRubricContainer.attr(
				"data-aefis-course-learning-objective-id"
			);
			assessmentRubricResponse["courseLearningObjectiveSource"] =
				$assessmentRubricContainer.attr("data-aefis-course-learning-objective-source");
		}

		$assessmentRubricContainer
			.find("input[type=text].aefis-rubric-count")
			.each(function (index, el) {
				var $txtRubricCount = $(this);
				var rubricCount = {
					count: $txtRubricCount.val()
				};
				if (isMapped == "true") {
					rubricCount["programRubricId"] = $txtRubricCount.attr(
						"data-aefis-program-rubric-id"
					);
				} else {
					rubricCount["courseRubricId"] = $txtRubricCount.attr(
						"data-aefis-course-rubric-id"
					);
				}
				assessmentRubricResponse["rubrics"].push(rubricCount);
			});

		$assessmentRubricContainer.find("tr.assessment-rubric-document").each(function (index, el) {
			var $trDocument = $(this);
			assessmentRubricResponse["documents"].push({
				Id: $trDocument.attr("data-aefis-document-id"),
				Name: $trDocument.attr("data-aefis-document-name")
			});
		});

		content.assessmentRubrics.push(assessmentRubricResponse);
	});
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(content)
			}
		]
	};
	return value;
};

/**
 * COURSEOUTCOMEMAPPING lists outcomes and saves them as ID array in a single form item option
 */
aefis.FormItems.COURSEOUTCOMEMAPPING = function () {};
aefis.FormItems.COURSEOUTCOMEMAPPING.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEOUTCOMEMAPPING.prototype.registerChangeHandler = function (register) {
	if (register)
		this.$item
			.find("input:checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	else this.$item.find("input:checkbox").off("ifToggled", $.proxy(this.onChangeHandler, this));
};

aefis.FormItems.COURSEOUTCOMEMAPPING.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var outcomeContainer = {};
	outcomeContainer.showPerformanceIndicators = false;
	var showPerfIndicators = $optionsContainer.find(
		"input[name^='form-item-outcome-show-indicators-']:checkbox:first"
	);
	if (showPerfIndicators != null && showPerfIndicators.length > 0)
		outcomeContainer.showPerformanceIndicators = showPerfIndicators[0].checked;

	outcomeContainer.checkedOptions = [];
	this.$item.find("input[data-aefis-for-entity='outcome']:checkbox").each(function (index, el) {
		var outcome = { outcomeId: $(el).attr("data-aefis-outcome-id") };
		outcome.performanceIndicators = [];
		if (el.checked) {
			if (outcomeContainer.showPerformanceIndicators) {
				$(
					"input[name='form-item-outcome-indicators-" + outcome.outcomeId + "']:checkbox"
				).each(function (indicatorIndex, indicatorEl) {
					if (indicatorEl.checked) {
						outcome.performanceIndicators.push(
							$(indicatorEl).attr("data-aefis-outcome-indicator-id")
						);
					}
				});
			}
			outcomeContainer.checkedOptions.push(outcome);
		}
	});
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(outcomeContainer)
			}
		]
	};
	return value;
};

/**
 *  COURSEEVALUATIONRESULTS
 */
aefis.FormItems.COURSEEVALUATIONRESULTS = function () {};
aefis.FormItems.COURSEEVALUATIONRESULTS.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEEVALUATIONRESULTS.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-question-options-container")
		.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: ""
			}
		]
	};
	return value;
};

/**
 *  COURSEASSESSMENTRESULTS
 */
aefis.FormItems.COURSEASSESSMENTRESULTS = function () {};
aefis.FormItems.COURSEASSESSMENTRESULTS.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEASSESSMENTRESULTS.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: ""
			}
		]
	};
	return value;
};

/**
 *  COURSECREDITS
 */
aefis.FormItems.COURSECREDITS = function () {};
aefis.FormItems.COURSECREDITS.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSECREDITS.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.onCreditTypeChanged();
};

aefis.FormItems.COURSECREDITS.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find("#CreditType")
			.off("change", $.proxy(this.onCreditTypeChanged, this))
			.on("change", $.proxy(this.onCreditTypeChanged, this));
		this.$item
			.find(".data-aefis-hours")
			.off("change", $.proxy(this.onHoursChanged, this))
			.on("change", $.proxy(this.onHoursChanged, this));
	} else {
		this.$item.off("change", $.proxy(this.onChangeHandler, this));
		this.$item.find("#CreditType").off("change", $.proxy(this.onCreditTypeChanged, this));
		this.$item.find(".data-aefis-hours").off("change", $.proxy(this.onHoursChanged, this));
	}
};

aefis.FormItems.COURSECREDITS.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("input").not("#TotalHours").removeClass("disabled");
		this.$item.find("input").not("#TotalHours").prop("disabled", false);
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("input").not("#TotalHours").addClass("disabled");
		this.$item.find("input").not("#TotalHours").prop("disabled", true);
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.COURSECREDITS.prototype.onCreditTypeChanged = function () {
	var selectedValue = this.$item.find("#CreditType").find(":selected").val();
	var isCocurricular = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-is-cocurricular");

	var $creditContainerDiv = this.$item.find("div.aefis-credit-container");
	var $minCreditsLabel = this.$item.find("label[for=MinimumCredits]");

	var $maxCreditsDiv = this.$item.find(".aefis-max-credits");
	var $minCreditsDiv = this.$item.find(".aefis-min-credits");
	var $repeatableCreditsDiv = this.$item.find(".aefis-repeatable-credits");
	var $creditsTableDiv = this.$item.find(".aefis-credits-table");

	if (selectedValue == "NonCredit") {
		$maxCreditsDiv.hide();
		$minCreditsDiv.hide();
		$repeatableCreditsDiv.hide();
		$creditsTableDiv.hide();
	} else if (selectedValue == "Fixed") {
		$maxCreditsDiv.hide();
		$minCreditsDiv.show();
		$repeatableCreditsDiv.hide();
		$creditsTableDiv.hide();

		$minCreditsLabel.text("Credits");
	} else if (selectedValue == "Range") {
		$maxCreditsDiv.show();
		$minCreditsDiv.show();
		if (isCocurricular) {
			$repeatableCreditsDiv.hide();
			$creditsTableDiv.hide();
		} else {
			$repeatableCreditsDiv.show();
			$creditsTableDiv.show();
		}

		$minCreditsLabel.text("Minimum Credits");
	} else {
		$maxCreditsDiv.show();
		$minCreditsDiv.show();
		$repeatableCreditsDiv.show();
		$creditsTableDiv.show();

		$minCreditsLabel.text("Minimum Credits");
	}
};

aefis.FormItems.COURSECREDITS.prototype.onHoursChanged = function () {
	var total = 0;
	this.$item.find("input.data-aefis-hours").each(function (index, el) {
		total += parseInt($(el).val());
	});
	this.$item.find("input#TotalHours").val(total);

	var totalRatio = 0;
	this.$item
		.find("#aefis-activity-type-table")
		.find(".aefis-activity-type-row")
		.each(function (index, el) {
			var hours = $(el).find(".data-aefis-hours").val();
			var ratio = $(el).find(".aefis-credit-ratio").attr("ratio");
			totalRatio += parseInt(hours) * parseFloat(ratio);
		});
	this.$item
		.find("#aefis-activity-type-table")
		.find(".aefis-data-total-credits")
		.find("div")
		.text(totalRatio);
};

aefis.FormItems.COURSECREDITS.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var content = {};
	this.$item.find("input.data-aefis-course-credits-text").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	this.$item.find("select.data-aefis-course-credits-select").each(function () {
		content[$(this).attr("name")] = $(this).find(":selected").val();
	});
	content["TotalCredits"] = this.$item
		.find("#aefis-activity-type-table")
		.find(".aefis-data-total-credits")
		.find("div")
		.text();
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  COURSEINFORMATION
 */
aefis.FormItems.COURSEINFORMATION = function () {};
aefis.FormItems.COURSEINFORMATION.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEINFORMATION.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.$item.find("select.aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find("select.aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});
};

aefis.FormItems.COURSEINFORMATION.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("input,textarea").removeClass("disabled");
		this.$item.find("input,textarea").prop("disabled", false);
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("input,textarea").addClass("disabled");
		this.$item.find("input,textarea").prop("disabled", true);
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.COURSEINFORMATION.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var content = {};
	this.$item.find("input.data-aefis-course-information-text").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	this.$item.find("select.data-aefis-course-information-select").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	this.$item.find("textarea.data-aefis-course-information-textarea").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  COURSEREQUISITES
 */
aefis.FormItems.COURSEREQUISITES = function () {};
aefis.FormItems.COURSEREQUISITES.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEREQUISITES.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: ""
			}
		]
	};
	return value;
};

/**
 *  COURSEDEPENDENCIES
 */
aefis.FormItems.COURSEDEPENDENCIES = function () {};
aefis.FormItems.COURSEDEPENDENCIES.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSEDEPENDENCIES.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
		var urlParam = "filter";
		var $dataTable = that.$item.find("#aefis-course-dependecies-programs-container");
		var url = $dataTable.attr("data-aefis-datasource");
		var urlValue = "{VersionUuid:" + JSON.stringify(["0"]) + ',Status:"published"}';
		if (that.newValue.options[0].content.length > 0) {
			urlValue =
				"{VersionUuid:" +
				JSON.stringify(that.newValue.options[0].content) +
				',Status:"published"}';
		}
		url = aefis.util.replaceUrlParameter(url, urlParam, encodeURIComponent(urlValue));
		$dataTable.attr("data-aefis-datasource", url);
		that.refreshProgramTable();
	});

	this.$item
		.find("#aefis-course-dependecies-programs-container")
		.off("completed")
		.on("completed", function () {
			that.registerChangeHandler(true);
		});

	this.refreshProgramTable();
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find("#btn-add-program")
			.off("click", $.proxy(this.onAddProgramClicked, this))
			.on("click", $.proxy(this.onAddProgramClicked, this));
		this.$item
			.find(".btn-remove-program")
			.off("click", $.proxy(this.onRemoveProgramClicked, this))
			.on("click", $.proxy(this.onRemoveProgramClicked, this));
	} else {
		this.$item.find("#btn-add-program").off("click", $.proxy(this.onAddProgramClicked, this));
		this.$item
			.find(".btn-remove-program")
			.off("click", $.proxy(this.onRemoveProgramClicked, this));
	}
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.onChangeHandler = function (event) {
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.onAddProgramClicked = function (event) {
	event.preventDefault();
	var thisScope = this;
	var $btnAddProgram = thisScope.$item.find("#btn-add-program");
	var dialogId = $btnAddProgram.attr("aefis-dialog-id");
	var $dialogContent = thisScope.$item.find(dialogId);
	var footerId = $btnAddProgram.attr("aefis-dialog-footer-id");
	var $footerContent = thisScope.$item.find(footerId);
	var randomnumber = Math.floor(Math.random() * 100);
	var modalId = "aefis-course-dependency-modal-dialog" + randomnumber;

	var modalOptions = {
		title: $dialogContent.attr("dialog-title"),
		content: $dialogContent.html(),
		footerContent: $footerContent.html(),
		size: $dialogContent.attr("dialog-size"),
		modalId: modalId,
		onShown: function () {
			var $modal = $("#" + modalId);
			$modal.find("div.bootstrap-select").remove();

			var $programSelect = $modal.find("select.aefis-select");
			$programSelect.aefisselect();

			$modal
				.find("#btn-save")
				.off("click")
				.on("click", function () {
					var versionUuid = $programSelect
						.find(":selected")
						.attr("aefis-data-version-uuid");
					thisScope.newValue = thisScope.getValue();
					thisScope.newValue.options[0].content.push(versionUuid);

					thisScope.onChangeHandler(event);
				});
		}
	};
	aefis.ui.modalDialog(modalOptions);
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.onRemoveProgramClicked = function (event) {
	var that = this;
	var options = {
		title: "Remove",
		content: "Are you sure to remove the program?",
		successMessage: "Program was remove successfully.",
		errorMessage: "Error with remove remove.",
		confirmActionName: "Remove",
		cancelActionName: "Cancel",
		onConfirm: function () {
			var $btn = $(event.target);
			var $row = $btn.closest("tr");
			var uuidToRemove = $row.attr("aefis-data-version-uuid");
			const filteredItems = that.newValue.options[0].content.filter(
				(item) => item !== uuidToRemove
			);
			that.newValue.options[0].content = filteredItems;
			that.onChangeHandler(event);
		},
		onSuccess: function () {}
	};
	aefis.ui.confirm(options);
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.refreshProgramTable = function () {
	var $programsContainer = this.$item.find("#aefis-course-dependecies-programs-container");
	aefis.ui.initializeHandlebarsTemplate($programsContainer);
};

aefis.FormItems.COURSEDEPENDENCIES.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var $dataTable = this.$item.find("#aefis-course-dependencies-program-data-table");
	var content = [];

	$dataTable.find("tr").each(function () {
		var uuid = $(this).attr("aefis-data-version-uuid");
		if (uuid) {
			content.push(uuid);
		}
	});

	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  PROGRAMINFORMATION
 */
aefis.FormItems.PROGRAMINFORMATION = function () {};
aefis.FormItems.PROGRAMINFORMATION.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMINFORMATION.prototype.setEnabled = function (enable) {
	var $textFormItems = this.$item.find("textarea.editor");
	$textFormItems.each(function (index) {
		var $textFormItem = $(this);
		var mceEditor = tinymce.get($textFormItem.attr("id"));
		if (mceEditor) {
			if (enable) {
				mceEditor.getBody().setAttribute("contenteditable", true);
			} else {
				if (aefis.util.getAefisBrowserType() != "Firefox") {
					mceEditor.getBody().setAttribute("contenteditable", false);
				}
			}
		}
	});

	if (enable) {
		this.$item.find("input,textarea").removeClass("disabled");
		this.$item.find("input,textarea").prop("disabled", false);
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("input,textarea").addClass("disabled");
		this.$item.find("input,textarea").prop("disabled", true);
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.PROGRAMINFORMATION.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var content = {};
	this.$item.find("input.data-aefis-program-information-text").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	this.$item.find("select.data-aefis-program-information-select").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	this.$item.find("textarea.data-aefis-program-information-textarea").each(function () {
		content[$(this).attr("name")] = $(this).val();
	});
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  PROGRAMEDUCATIONALEXPERIENCES
 */
aefis.FormItems.PROGRAMEDUCATIONALEXPERIENCES = function () {};
aefis.FormItems.PROGRAMEDUCATIONALEXPERIENCES.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMEDUCATIONALEXPERIENCES.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: ""
			}
		]
	};
	return value;
};

/**
 *  PROGRAMREQUIREMENTS
 */
aefis.FormItems.PROGRAMREQUIREMENTS = function () {};
aefis.FormItems.PROGRAMREQUIREMENTS.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMREQUIREMENTS.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: ""
			}
		]
	};
	return value;
};

/**
 *  OWNERSHIP
 */
aefis.FormItems.OWNERSHIP = function () {};
aefis.FormItems.OWNERSHIP.prototype = new aefis.FormItems.Item();

aefis.FormItems.OWNERSHIP.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.$item.find("select.aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find("select.aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});
};

aefis.FormItems.OWNERSHIP.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.OWNERSHIP.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var $departmentSelect = this.$item.find("#Department");
	var $collegeSelect = this.$item.find("#College");
	var content = {
		DepartmentId: $departmentSelect.find(":selected").val(),
		DepartmentName: $departmentSelect.find(":selected").text(),
		CollegeId: $collegeSelect.find(":selected").val(),
		CollegeName: $collegeSelect.find(":selected").text()
	};
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  EFFECTIVEDATE
 */
aefis.FormItems.EFFECTIVEDATE = function () {};
aefis.FormItems.EFFECTIVEDATE.prototype = new aefis.FormItems.Item();

aefis.FormItems.EFFECTIVEDATE.prototype.initialize = function ($container) {
	var that = this;
	this.$container = $container;
	this.id = $container.attr("data-aefis-formitem-id");
	if (typeof $item === "undefined") {
		this.$item = $container;
	} else {
		this.$item = $item;
	}
	this.oldValue = this.getValue();
	this.newValue = this.getValue();
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();

	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});
	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.$item.find("select.aefis-select-input").each(function () {
		var $select = $(this);
		$select.on("dataLoaded", function (e) {
			$(this).attr("data-aefis-is-data-loaded", true);

			var isRegisterChangeHandler = true;
			that.$item.find("select.aefis-select-input").each(function () {
				var isDataLoaded = $(this).attr("data-aefis-is-data-loaded");
				if (typeof isDataLoaded !== typeof undefined) {
					var isDataLoadedParam =
						typeof isDataLoaded === "boolean" ? isDataLoaded : isDataLoaded == "true";
					if (!isDataLoadedParam) {
						isRegisterChangeHandler = false;
					}
				}
			});
			if (isRegisterChangeHandler) {
				aefis.page.registerFormItemChanged(that.$item);
				that.registerChangeHandler(true);
			}
		});
	});
};

aefis.FormItems.EFFECTIVEDATE.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find("select").prop("disabled", false);
	} else {
		this.$item.find("select").prop("disabled", true);
	}
	$(".selectpicker").selectpicker("refresh");
};

aefis.FormItems.EFFECTIVEDATE.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");
	var $termTypeSelect = this.$item.find("#TermType");
	var $termSelect = this.$item.find("#Term");
	var content = {
		termTypeId: $termTypeSelect.find(":selected").val(),
		termId: $termSelect.find(":selected").val()
	};
	var value = {
		formItemId: this.id,
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

/**
 *  ASSESSMENTDATAPROGRAM
 */
aefis.FormItems.ASSESSMENTDATAPROGRAM = function () {};
aefis.FormItems.ASSESSMENTDATAPROGRAM.prototype = new aefis.FormItems.Item();

aefis.FormItems.ASSESSMENTDATAPROGRAM.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".assessment-data-program-recommendation")
			.off("change", $.proxy(this.onChangeHandler, this))
			.on("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".btn-assessment-data-program-details")
			.off("click", $.proxy(this.onToggleDetails, this))
			.on("click", $.proxy(this.onToggleDetails, this));
	} else {
		this.$item
			.find(".assessment-data-program-recommendation")
			.off("change", $.proxy(this.onChangeHandler, this));
		this.$item
			.find(".btn-assessment-data-program-details")
			.off("click", $.proxy(this.onToggleDetails, this));
	}
};

aefis.FormItems.ASSESSMENTDATAPROGRAM.prototype.onToggleDetails = function (event) {
	var thisScope = this;
	var $btn = $(event.target);
	var dialogId = $btn.attr("aefis-dialog-id");
	var $dialogContent = thisScope.$item.find("#" + dialogId);

	var modalOptions = {
		title: $btn.attr("aefis-dialog-title"),
		content: $dialogContent.html(),
		size: "full",
		showFooterCloseButton: true,
		onShown: function (modalId) {
			var $modal = $("#" + modalId);
			var $contentContainer = $modal.find("#aefis-content-container");
			var url = $contentContainer.attr("data-aefis-datasource");
			url = aefis.util.replaceUrlParameter(
				url,
				"studentOutcomeId",
				$btn.attr("data-aefis-student-outcome-id")
			);
			$contentContainer.attr("data-aefis-datasource", url);
			$contentContainer.attr("id", "modal-content-container");

			var $contentContainer2 = $modal.find("#modal-content-container");

			aefis.ui.initializeHandlebarsTemplate($contentContainer2);
			$contentContainer.on("completed", function (e) {
				aefis.ui.initializeSparkline($contentContainer);
			});
		}
	};
	aefis.ui.modalDialog(modalOptions);
};

aefis.FormItems.ASSESSMENTDATAPROGRAM.prototype.setEnabled = function (enable) {
	var $textFormItems = this.$item.find("textarea.assessment-data-program-recommendation");
	$textFormItems.each(function (index) {
		var $textFormItem = $(this);
		if (enable) {
			$textFormItem.prop("disabled", false);
		} else {
			$textFormItem.prop("disabled", true);
		}
	});
};

aefis.FormItems.ASSESSMENTDATAPROGRAM.prototype.getValue = function () {
	var formItemOptionId = this.$item
		.find(".aefis-form-item-options-container")
		.attr("data-aefis-formitem-option-id");

	var content = [];
	this.$item.find(".assessment-data-program-recommendation").each(function (index, el) {
		var $recommendation = $(el);
		content.push({
			studentOutcomeId: $recommendation.attr("data-aefis-student-outcome-id"),
			programOutcomeMapId: $recommendation.attr("data-aefis-program-outcome-map-id"),
			recommendation: $recommendation.val()
		});
	});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: JSON.stringify(content)
			}
		]
	};
	return value;
};

/**
 *  STRATEGICPLANOBJECTIVES
 */
aefis.FormItems.STRATEGICPLANOBJECTIVES = function () {};
aefis.FormItems.STRATEGICPLANOBJECTIVES.prototype = new aefis.FormItems.Item();

aefis.FormItems.STRATEGICPLANOBJECTIVES.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".strategic-plan-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item
			.find(".strategic-plan-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVES.prototype.onChangeHandler = function (event) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $embeddedTemplate = $(event.target)
		.parents("li")
		.find(".aefis-form-item-embedded-questions-container");
	if (event.target.checked) {
		$embeddedTemplate.removeClass("hide");
		$embeddedTemplate.addClass("show");
	} else {
		$embeddedTemplate.addClass("hide");
		$embeddedTemplate.removeClass("show");
	}

	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVES.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find(".strategic-plan-objective-checkbox").iCheck("enable");
	} else {
		this.$item.find(".strategic-plan-objective-checkbox").iCheck("disable");
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVES.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var strategicPlanObjectiveContainer = {};
	strategicPlanObjectiveContainer.checkedOptions = [];
	this.$item
		.find("input[data-aefis-for-entity='StrategicPlanObjective']:checkbox")
		.each(function (index, el) {
			var selectedItem = {
				StrategicPlanObjectiveId: $(el).attr("data-aefis-strategic-plan-objective-id")
			};
			if (el.checked) {
				strategicPlanObjectiveContainer.checkedOptions.push(selectedItem);
			}
		});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(strategicPlanObjectiveContainer)
			}
		]
	};

	return value;
};

/**
 *  STRATEGICPLANOBJECTIVE
 */
aefis.FormItems.STRATEGICPLANOBJECTIVE = function () {};
aefis.FormItems.STRATEGICPLANOBJECTIVE.prototype = new aefis.FormItems.Item();

aefis.FormItems.STRATEGICPLANOBJECTIVE.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".strategic-plan-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item
			.find(".strategic-plan-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVE.prototype.onChangeHandler = function (event) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $embeddedTemplate = $(event.target)
		.parents("li")
		.find(".aefis-form-item-embedded-questions-container");
	if (event.target.checked) {
		$embeddedTemplate.removeClass("hide");
		$embeddedTemplate.addClass("show");
	} else {
		$embeddedTemplate.addClass("hide");
		$embeddedTemplate.removeClass("show");
	}

	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVE.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find(".strategic-plan-objective-checkbox").iCheck("enable");
	} else {
		this.$item.find(".strategic-plan-objective-checkbox").iCheck("disable");
	}
};

aefis.FormItems.STRATEGICPLANOBJECTIVE.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var strategicPlanObjectiveContainer = {};
	strategicPlanObjectiveContainer.checkedOptions = [];
	this.$item
		.find("input[data-aefis-for-entity='StrategicPlanObjective']:checkbox")
		.each(function (index, el) {
			var selectedItem = {
				StrategicPlanObjectiveId: $(el).attr("data-aefis-strategic-plan-objective-id")
			};
			if (el.checked) {
				strategicPlanObjectiveContainer.checkedOptions.push(selectedItem);
			}
		});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(strategicPlanObjectiveContainer)
			}
		]
	};

	return value;
};

/**
 *  FACULTYACTIVITYITEM
 */
aefis.FormItems.FACULTYACTIVITYITEM = function () {};
aefis.FormItems.FACULTYACTIVITYITEM.prototype = new aefis.FormItems.Item();

aefis.FormItems.FACULTYACTIVITYITEM.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".btn-details")
			.off("click", $.proxy(this.onDetailsClicked, this))
			.on("click", $.proxy(this.onDetailsClicked, this));
	} else {
		this.$item.find(".btn-details").off("click", $.proxy(this.onDetailsClicked, this));
	}
};

aefis.FormItems.FACULTYACTIVITYITEM.prototype.onDetailsClicked = function (event) {
	var $btn = $(event.target);
	var url = $btn.attr("data-aefis-url");
	window.open(url, "_blank").focus();
};

/**
 * SURVEYRESULTS survey results
 */
aefis.FormItems.SURVEYRESULTS = function () {};
aefis.FormItems.SURVEYRESULTS.prototype = new aefis.FormItems.Item();

aefis.FormItems.SURVEYRESULTS.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	this.registerChangeHandler(true);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	that.refreshHandlerbar();
};

aefis.FormItems.SURVEYRESULTS.prototype.refreshHandlerbar = function () {
	var that = this;
	var $tagContainer = that.$item.find("#aefis-course-section-evaluation-container");
	aefis.ui.initializeHandlebarsTemplate($tagContainer);
	$tagContainer.on("completed", function (e) {
		$(".aefis-circle-chart").each(function () {
			var $obj = $(this);
			aefis.ui.initializeCircleChart($obj);
		});
	});
};

aefis.FormItems.SURVEYRESULTS.prototype.getValue = function () {
	var $container = this.$item.find(".aefis-question-options-container");
	var formItemOptionId = $container.attr("data-aefis-formitem-option-id");
	var content = "";
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};


/**
 * PROGRAMREQUIREMENTRULES program requirement rules
 */
aefis.FormItems.PROGRAMREQUIREMENTRULES = function () {};
aefis.FormItems.PROGRAMREQUIREMENTRULES.prototype = new aefis.FormItems.Item();

aefis.FormItems.PROGRAMREQUIREMENTRULES.prototype.initialize = function ($container) {
	var that = this;
	this.items = [];
	that.$container = $container;
	that.$item = $container;
	this.embeddedQuestionSecondaryId = this.getEmbededQuestionSecondaryId();
	this.embeddedQuestionParentOptionId = this.getEmbeddedQuestionParentOptionId();
	//this.registerChangeHandler(true);
	var ruleBuilderPrintReadyEvent = "ruleBuilderPrintReadyEvent";
	aefis.app.addEventToWaitListBeforePrint(ruleBuilderPrintReadyEvent);
	this.$item.on("revert", function (e) {
		that.revertValue.call(that, that.oldValue);
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.$item.on("saved", function (e) {
		that.oldValue = that.newValue;
		if (that.setSaving) {
			that.setSaving.call(that, false);
		}
	});

	this.postLoadCallback = function() {
		aefis.app.dispatchPrintReadyEvent(ruleBuilderPrintReadyEvent);
		var iCounter = 0;
		$("input.program-requirement-rule-required-item").each(function (i, obj) {
			var validatorId = "programRequirementRuleValidator"+iCounter++;
			$.validator.addMethod(
				validatorId,
				function (value, element, param) {
					if(!$(element).hasClass("program-requirement-rule-validation-failed")) {
						aefis.ui.formatFormFieldMarkup($(element), true);
					}
					return $(element).hasClass("program-requirement-rule-validation-failed") === false;
				},
				"Required"
			);

			$(obj).rules("add", validatorId);
		});
	};	

	setTimeout(function () {
		var formItemId = that.$item.attr("data-aefis-formitem-id");
		var $programRequirementRules = $("#program-requirement-rules-" + formItemId);
		var defaultValue = $programRequirementRules.attr("data-aefis-default-value");
		var programId = $programRequirementRules.attr("data-aefis-program-id");
		var canEdit = $programRequirementRules.attr("data-can-edit") == "edit";
		var isPrint = $programRequirementRules.attr("data-is-print") == "true";
		var previousValue = $programRequirementRules.attr("data-previous-output-value");
		
		var reactAttributes = {
			pageContext: that,
			canEdit: canEdit,
			defaultValue: JSON.parse(defaultValue),
			programId: programId,
			isPrint: isPrint,
			postLoadCallback: that.postLoadCallback
		}
		if (typeof previousValue !== 'undefined' && previousValue !== false) {
			reactAttributes["previousOutputValue"] = JSON.parse(previousValue);
		}

		ui.ReactDOM.render(
			ui.React.createElement(ui.DataCollectionRuleBuilderFormItem, reactAttributes),
			$programRequirementRules.get(0)
		);

	}, 0);

};

aefis.FormItems.PROGRAMREQUIREMENTRULES.prototype.getValue = function (content) {
	var $container = this.$item.find(".aefis-form-item-options-container");
	var formItemOptionId = $container.attr("data-aefis-formitem-option-id");
	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: formItemOptionId,
				content: content
			}
		]
	};
	return value;
};

aefis.FormItems.PROGRAMREQUIREMENTRULES.prototype.onReactChangeHandler = function (content) {
	var that = this;
	
	this.newValue = this.getValue(JSON.stringify(content));
	this.$item.trigger("formitemchanged", {
		oldValue: this.oldValue,
		newValue: this.newValue
	});
};


/**
 *  COURSELEARNINGOUTCOMEQUESTIONS
 */
aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS = function () {};
aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS.prototype = new aefis.FormItems.Item();

aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS.prototype.registerChangeHandler = function (register) {
	if (register) {
		this.$item
			.find(".course-learning-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this))
			.on("ifToggled", $.proxy(this.onChangeHandler, this));
	} else {
		this.$item
			.find(".course-learning-objective-checkbox")
			.off("ifToggled", $.proxy(this.onChangeHandler, this));
	}
};

aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS.prototype.onChangeHandler = function (event) {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var $embeddedTemplate = $(event.target)
		.parents("li")
		.find(".aefis-form-item-embedded-questions-container");
	if (event.target.checked) {
		$embeddedTemplate.removeClass("hide");
		$embeddedTemplate.addClass("show");
	} else {
		$embeddedTemplate.addClass("hide");
		$embeddedTemplate.removeClass("show");
	}

	this.newValue = this.getValue();
	this.$item.trigger("formitemchanged", { oldValue: this.oldValue, newValue: this.newValue });
	if (this.setSaving) {
		this.setSaving(true);
	}
};

aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS.prototype.setEnabled = function (enable) {
	if (enable) {
		this.$item.find(".course-learning-objective-checkbox").iCheck("enable");
	} else {
		this.$item.find(".course-learning-objective-checkbox").iCheck("disable");
	}
};

aefis.FormItems.COURSELEARNINGOUTCOMEQUESTIONS.prototype.getValue = function () {
	var $optionsContainer = this.$item.find(".aefis-form-item-options-container");
	var courseLearningObjectiveContainer = {};
	courseLearningObjectiveContainer.checkedOptions = [];
	this.$item
		.find("input[data-aefis-for-entity='CourseLearningObjective']:checkbox")
		.each(function (index, el) {
			var selectedItem = {
				CourseLearningObjectiveId: $(el).attr("data-aefis-course-learning-objective-id")
			};
			if (el.checked) {
				courseLearningObjectiveContainer.checkedOptions.push(selectedItem);
			}
		});

	var value = {
		formItemId: this.$item.attr("data-aefis-formitem-id"),
		options: [
			{
				optionId: $optionsContainer.attr("data-aefis-formitem-option-id"),
				content: JSON.stringify(courseLearningObjectiveContainer)
			}
		]
	};

	return value;
};
