// Copyright (c) 2017 AEFIS, all rights reserved.
// http://www.aefis.com/

"use strict";

window.aefis = window.aefis || {};
var aefis = window.aefis;

aefis.UI = function () {
	var that = this;

	//to prevent caching
	$.ajaxSetup({
		// Disable caching of AJAX responses
		cache: false
	});

	function topWindow() {
		return aefis.windowQueue[aefis.windowQueue.length - 1];
	}

	this.refreshDOMObjects = function () {
		that.removeIfPublished();
		that.processAefisTokenListObject();
		$(".aefis-popover").popover();
		that.initializeTooltip();
		that.initializeAefisProgressBar();
		that.initializeExportPopover();
		that.initializeAefisInteractivePopover();
		that.initializeAefisTagPopover();
		that.initializePDFDownloadNotification();
		that.initializeCSVDownloadNotification();
		that.addPDFHashToUrl();
		that.initializeDropdownMenuCheck();
		that.initializeAefisActionButton();
		that.initializeAefisMaterialComponents();
		that.upgradeMDLDOM();
		that.initializeMaterialSpeedDial();
		that.initializeAefisWarningPopover();
	};

	this.initializeAefisWarningPopover = function () {
		$("body").on("click", function (e) {
			var $warningPopover = $(".aefis-warning-popover");
			if (
				$warningPopover.length > 0 &&
				!$warningPopover.is(e.target) &&
				$warningPopover.has(e.target).length === 0 &&
				$(".popover").has(e.target).length === 0
			) {
				$warningPopover.popover("hide");
			}
		});
	};

	this.hideMainLandmarks = function () {
		$("#aefis-main-content-container-skip-link").addClass(
			"aefis-hide-content-from-screenreader"
		);
		$("#aefis-main-container").addClass("aefis-hide-content-from-screenreader");
		$("footer.aefis--footer").addClass("aefis-hide-content-from-screenreader");
	};

	this.showMainLandmarks = function () {
		$("#aefis-main-content-container-skip-link").removeClass(
			"aefis-hide-content-from-screenreader"
		);
		$("#aefis-main-container").removeClass("aefis-hide-content-from-screenreader");
		$("footer.aefis--footer").removeClass("aefis-hide-content-from-screenreader");
	};

	this.initializeMaterialSpeedDial = function () {
		if ($(".material-speed-dial").length) {
			document
				.querySelectorAll(".material-speed-dial:not(.aefis-initialized)")
				.forEach(function (button) {
					var $button = $(button);
					if (!$button.hasClass("aefis-initialized")) {
						new MaterialSpeedDial(button);
						$button.addClass("aefis-initialized");
					}
				});
		}
	};

	this.updateAssertiveText = function (object, text) {
		var $object = $(object);
		$object.html(text);
	};

	this.toggleAriaAttribute = function (object, ariaAttribute, valuesList) {
		var $object = $(object);
		var currentAriaValue = $object.attr(ariaAttribute);
		var valueListArray = valuesList.split(",");
		var newAriaValue = valueListArray.filter(function (arrayElement) {
			return arrayElement != currentAriaValue;
		});
		$object.attr(ariaAttribute, newAriaValue);
	};

	this.toggleTabIndex = function ($container) {
		$container.find("input[tabIndex]").each(function () {
			var $element = $(this);
			var tabIndex = $element.attr("tabIndex");
			if (tabIndex && tabIndex == "1") {
				$element.attr("tabIndex", "0");
			} else {
				$element.attr("tabIndex", "-1");
			}
		});
	};

	this.skipToContent = function (containerId) {
		var $container = $("#" + containerId);
		document.getElementById(containerId).scrollIntoView();
		console.log($container);
		$("#" + containerId).focus();
	};

	this.toggleObjectBySelect = function (select) {
		var $select = $(select);
		var $option = $select.find(":selected");
		var target = $option.attr("data-aefis-target");
		var targetClass = $option.attr("data-aefis-target-class");
		var targetContainer = $option.attr("data-aefis-target-container");
		$(targetContainer).find(targetClass).hide();
		$(targetContainer).find(target).show();
	};

	this.processUserMainMenu = function (button) {
		var $button = $(button);
		var target = $button.attr("data-aefis-target");
		var $target = $(target);
		that.toggleAriaAttribute(button, "aria-expanded", "true,false");
		that.toggleAriaAttribute(target, "aria-hidden", "true,false");
		setTimeout(function () {
			$target.find("a").first().focus();
		}, 300);
	};

	this.toggleMainSidebarMenu = function () {
		var $drawer = $("#aefis-main-toolbar--sidebar");

		if ($drawer.hasClass("mdc-temporary-drawer--open")) {
			$(window).trigger("AefisMainMenu:close");
		} else {
			$(window).trigger("AefisMainMenu:open");
		}
	};

	this.initializeAefisMaterialComponents = function () {
		$("button.toggle-menu").on("click", function () {
			var targetMenu = $(this).attr("data-aefis-button-menu");
			var menuEl = document.querySelector(targetMenu);
			var menu = new mdc.menu.MDCSimpleMenu(menuEl);
			menu.open = !menu.open;

			if (menu.open) {
				$(this).find(".aefis-list-filter-field").val("").focus();
				$(window).trigger("aefis-button-menu-open");
				$("li.filtered").removeClass("filtered").show();
			}
		});

		$("a.aefis-toolbar-menu-anchor:not(.aefis-initialized)").on("click", function () {
			var $anchor = $(this);
			var targetMenu = $anchor.attr("data-aefis-button-menu");
			var menuEl = document.querySelector(targetMenu);
			var menu = new mdc.menu.MDCSimpleMenu(menuEl);
			var $parent = $anchor.parent();
			menu.open = !menu.open;
			$(".toolbar-nav__linkitem").removeClass("toolbar-nav__linkitem--active");

			if (menu.open) {
				$parent.addClass("toolbar-nav__linkitem--active");
			}
		});

		if ($(".mdc-simple-menu:not(.aefis-initialized)").length) {
			$(".mdc-simple-menu:not(.aefis-initialized)").each(function (index, element) {
				//var menu = new mdc.menu.MDCMenu.attachTo(element);
				var menu = new mdc.menu.MDCSimpleMenu(element);
				var dropdownToggle = element.parentElement.querySelector(".js--dropdown-toggle");
				dropdownToggle.addEventListener("click", function () {
					menu.open = !menu.open;
				});
				$(this).addClass("aefis-initialized");
			});
		}

		if ($(".mdc-toolbar:not(.aefis-initialized)").length) {
			var toolbar = mdc.toolbar.MDCToolbar.attachTo(
				document.querySelector(".mdc-toolbar:not(.aefis-initialized)")
			);
			toolbar.fixedAdjustElement = document.querySelector(".mdc-toolbar-fixed-adjust");
			$(".mdc-toolbar:not(.aefis-initialized)").addClass("aefis-initialized");
		}
		if ($(".mdc-ripple-surface:not(.aefis-initialized)").length) {
			var toolbar = mdc.ripple.MDCRipple.attachTo(
				document.querySelector(".mdc-ripple-surface:not(.aefis-initialized)")
			);
			$(".mdc-ripple-surface:not(.aefis-initialized)").addClass("aefis-initialized");
		}
		if ($(".mdc-persistent-drawer:not(.aefis-initialized)").length) {
			$(".mdc-persistent-drawer:not(.aefis-initialized)").each(function (index, element) {
				var eventName = $(this).attr("data-aefis-event-name");
				var drawer = new mdc.drawer.MDCPersistentDrawer(element);
				$(window).on(eventName + ":close", function () {
					drawer.open = false;
				});
				$(window).on(eventName + ":open", function () {
					drawer.open = true;
				});
				$(this).addClass("aefis-initialized");
			});
		}

		if ($(".mdc-temporary-drawer--left:not(.aefis-initialized)").length) {
			var drawer = new mdc.drawer.MDCTemporaryDrawer(
				document.querySelector(".mdc-temporary-drawer--left:not(.aefis-initialized)")
			);
			$(".mdc-temporary-drawer--left:not(.aefis-initialized)").addClass("aefis-initialized");
			$(window).on("AefisMainMenu:close", function () {
				drawer.open = false;
				$("body").removeClass("no-overflow");
				var $sidebarObject = $("#aefis-main-toolbar--sidebar");
				$sidebarObject.find("nav").attr("aria-hidden", "true");
			});
			$(window).on("AefisMainMenu:open", function () {
				var $sidebarObject = $("#aefis-main-toolbar--sidebar");
				$sidebarObject.find("nav").attr("aria-hidden", "false");
				drawer.open = true;
				$("body").addClass("no-overflow");
				setFocusToFirstItemInObject($sidebarObject);
				$sidebarObject.keydown(function (e) {
					trapTabKey($(this), e);
				});
			});
			document
				.querySelector(".mdc-temporary-drawer--left")
				.addEventListener("MDCTemporaryDrawer:close", function () {
					$("body").removeClass("no-overflow");
				});
		}

		if ($(".mdc-temporary-drawer--right:not(.aefis-initialized)").length) {
			var rightDrawer = new mdc.drawer.MDCTemporaryDrawer(
				document.querySelector(".aefis-notification-drawer--right:not(.aefis-initialized)")
			);
			if ($(".aefis-search-drawer--right").length) {
				var searchDrawer = new mdc.drawer.MDCTemporaryDrawer(
					document.querySelector(".aefis-search-drawer--right:not(.aefis-initialized)")
				);
			}
			$(".mdc-temporary-drawer--right:not(.aefis-initialized)").addClass("aefis-initialized");
			$(window).on("AefisSearch:open", function () {
				searchDrawer.open = true;
				$("body").addClass("no-overflow");
				$("#aefis-search--sidebar").attr("aria-hidden", "false");
				$("#aefis-search--sidebar-search-container").addClass(
					"aefis-sidebar--search-container--visible"
				);
				initializeAefisSearch();
				$("#aefis-search--sidebar").one(
					"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
					function (e) {
						$(window).trigger("AefisSearch:opened");
					}
				);
			});
			$(window).on("AefisSearch:close", function () {
				searchDrawer.open = false;
				$("#aefis-search--sidebar").attr("aria-hidden", "true");
				$("body").removeClass("no-overflow");
				$("#aefis-search--sidebar").one(
					"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
					function (e) {
						$(window).trigger("AefisSearch:closed");
						$("#aefis-search--sidebar-search-container").removeClass(
							"aefis-sidebar--search-container--visible"
						);
					}
				);
			});
			$(window).on("AefisNotifications:close", function () {
				var $sidebar = $("#aefis-notification--sidebar");
				rightDrawer.open = false;
				$("body").removeClass("no-overflow");
				$sidebar.attr("aria-hidden", "true");
				setTimeout(function () {
					$sidebar.one(
						"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
						$sidebar.attr("style", "visibility: hidden; display:none;")
					);
				}, 500);
			});
			$(window)
				.off("AefisNotifications:open")
				.on("AefisNotifications:open", function () {
					$("body").addClass("no-overflow");
					aefis.ui.initializeNotifications();
					var $sidebar = $("#aefis-notification--sidebar");
					$sidebar.attr("aria-hidden", "false");
					$sidebar.attr("style", "visibility:visible;");
					setTimeout(function () {
						rightDrawer.open = true;
					}, 200);
					$sidebar.one(
						"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
						function (e) {
							setFocusToFirstItemInObject($sidebar);
							$sidebar.keydown(function (e) {
								trapTabKey($(this), e);
							});
						}
					);
				});
			$(window)
				.off("AefisNotifications:openWithoutLoad")
				.on("AefisNotifications:openWithoutLoad", function () {
					var $sidebar = $("#aefis-notification--sidebar");
					$sidebar.attr("style", "visibility:visible;");
					rightDrawer.open = true;

					$sidebar.attr("aria-hidden", "false");
					$sidebar.attr("style", "visibility:visible;");
					$sidebar.one(
						"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
						function (e) {
							$("body").addClass("no-overflow");
							setFocusToFirstItemInObject($sidebar);
							$sidebar.keydown(function (e) {
								trapTabKey($sidebar, e);
							});
						}
					);
				});
			document
				.querySelector(".mdc-temporary-drawer--right")
				.addEventListener("MDCTemporaryDrawer:close", function () {
					$("body").removeClass("no-overflow");
				});
		}

		$(".mdc-icon-toggle:not(.aefis-initialized)").each(function (index, element) {
			mdc.icontoggle.MDCIconToggle.attachTo(element);
			$(this).addClass("aefis-initialized");
		});

		$(".ripple").each(function (index, element) {
			mdc.ripple.MDCRipple.attachTo(element);
		});

		$(".mdc-radio:not(.aefis-initialized)").each(function (index, element) {
			mdc.radio.MDCRadio.attachTo(element);
			$(this).addClass("aefis-initialized");
		});

		$(".mdc-checkbox").each(function (index, element) {
			mdc.checkbox.MDCCheckbox.attachTo(element);
		});

		$(".mdc-textfield:not(.aefis-initialized)").each(function (index, element) {
			mdc.textfield.MDCTextfield.attachTo(element);
			$(this).addClass("aefis-initialized");
		});

		$(".mdc-tab-bar").each(function (index, element) {
			mdc.tabs.MDCTabBar.attachTo(element);
		});

		$(".mdc-tab-bar-scroller").each(function (index, element) {
			mdc.tabs.MDCTabBarScroller.attachTo(element);
		});

		$(".mdc-toolbar:not(.aefis-initialized)").each(function (index, element) {
			mdc.toolbar.MDCToolbar.attachTo(element);
			$(".mdc-toolbar:not(.aefis-initialized)").addClass("aefis-initialized");
		});

		$(".mdc-simple-menu").each(function (index, element) {
			//mdc.menu.MDCSimpleMenu.attachTo(element);
		});
	};

	this.showFullPageLoadingMask = function (loadingText) {
		showFullPageLoadingMask(loadingText);
	};

	this.hideFullPageLoadingMask = function () {
		hideFullPageLoadingMask();
	};

	this.hideTarget = function (obj) {
		var $obj = $(obj);
		var target = $obj.attr("data-aefis-target");
		var hideTarget = $obj.attr("data-aefis-hide-target");

		var $target = $(target);

		if (hideTarget) {
			var $hideTarget = $(hideTarget);
			$hideTarget.hide();
		}

		$target.show();
	};

	this.addItemToSelect = function (el) {
		var $obj = $(el);
		var target = $obj.attr("data-aefis-refresh");
		var dialogContent = $obj.attr("data-aefis-datasource");
		var $select = $(target);
		var title = $obj.attr("data-aefis-title");
		var size = $obj.attr("data-aefis-size");
		var randomnumber = Math.floor(Math.random() * 100);
		var modalId = "aefis-select-modal-dialog" + randomnumber;
		var $refreshContainer = $("#aefis-select-refresh-container");

		var options = {
			title: title,
			size: size,
			contentUrl: dialogContent,
			modalId: modalId,
			showFooterCloseButton: false,
			onShown: function () {
				var $modal = $("#" + modalId);
				var $form = $modal.find("form");
				$form.attr("data-aefis-refresh", "#aefis-select-refresh-container");
				$refreshContainer.attr("data-aefis-refresh-container", target);
			}
		};

		that.modalDialog(options);
	};

	this.displayFeatureAnnouncementDialog = function () {
		var $container = $("#aefis-feature-announcement--container");
		var title = $container.attr("data-aefis-title");
		var size = "medium";
		var modalBodyclass = "";
		var noBodyPadding = false;
		var contentUrl = $container.attr("data-aefis-datasource");

		if (!$container.length) {
			return;
		}
		var dismiss = false;
		var options = {
			title: title,
			size: size,
			contentUrl: contentUrl,
			showFooterCloseButton: true,
			addBodyClass: modalBodyclass,
			noBodyPadding: noBodyPadding,
			closeButtonText: "Dismiss",
			onShown: function () {
				$("input[name='DismissFeatureAnnouncementPerm']").on("change", function () {
					dismiss = $(this).is(":checked");
				});
			},
			closeCallback: function () {
				var $checkbox = $("#DismissFeatureAnnouncementPerm");
				var url = $("#aefis-feature-announcement--container").attr(
					"data-aefis-save-datasource"
				);
				var dataStruct = {
					DismissFeatureAnnouncement: dismiss
				};
				new aefis.ApiWrapper().call(url, {
					data: JSON.stringify(dataStruct),
					type: "POST",
					onSuccess: function () {
						//
					},
					onError: function (jqXhr, error) {
						that.userError("Unable to save the app in your history.");
						return false;
					}
				});
			},
			scrollingBody: false
		};
		that.modalDialog(options);
	};

	this.displayEULADialog = function () {
		var $container = $("#aefis-user-eula--container");
		var title = $container.attr("data-aefis-title");
		var size = "large";
		var modalBodyclass = "";
		var noBodyPadding = true;
		var contentUrl = $container.attr("data-aefis-datasource");
		var cookie = aefis.util.cookieExists("AEFIS-EULA");

		if (cookie && cookie == 1) {
			return;
		}

		if (!$container.length) {
			return;
		}

		var options = {
			title: title,
			size: size,
			contentUrl: contentUrl,
			showFooterCloseButton: false,
			addBodyClass: modalBodyclass,
			noBodyPadding: noBodyPadding,
			scrollingBody: false,
			onShown: function () {
				var $scrollingContainer = $("#aefis-eula-scrolling-container");
				var $button = $("#aefis-eula-button");
				var $form = $("#aefis-end-user-license-agreement");
				// $button.attr('disabled','disabled');
				// $button.addClass('disabled');
				$scrollingContainer.on("scroll", function () {
					var height = Math.round($(this).scrollTop() + $(this).innerHeight());
					var scrollHeight = Math.round($(this)[0].scrollHeight);
					if (height >= scrollHeight) {
						//$button.removeAttr('disabled');
						// $button.removeClass('disabled');
						//$('#aefis-eula-scroll-statement').fadeOut();
					} else {
						//$button.attr('disabled','disabled');
						//$button.addClass('disabled');
						//$('#aefis-eula-scroll-statement').fadeIn();
					}
				});
				$form.on("completed", function () {
					$container.remove();
				});
			},
			closeCallback: function () {
				setTimeout(function () {
					$container = $("#aefis-user-eula--container");
					if ($container.length > 0) {
						var cancelUrl = $container.attr("data-aefis-cancel-datasource");
						aefis.ui.signout(cancelUrl);
					}
				}, 800);
			}
		};
		that.modalDialog(options);
	};

	this.displayDelegatedAuthorityDialog = function (forceDisplay) {
		var $container = $("#aefis-user-delegated-auth--container");
		var title = $container.attr("data-aefis-title");
		var hasCookie = $container.attr("data-aefis-has-cookie")
			? $container.attr("data-aefis-has-cookie")
			: false;
		var contentUrl = $container.attr("data-aefis-datasource");
		if (!$container.length) {
			return;
		}
		if (!forceDisplay) {
			var cookie = aefis.util.cookieExists("AEFIS-DELEGATEDAUTH");
			if (!cookie) {
				return;
			}
			if (cookie && cookie == 1) {
				return;
			}
		}

		var options = {
			title: title,
			size: "medium",
			contentUrl: contentUrl,
			hideHeaderClose: true,
			showFooterCloseButton: false,
			noBodyPadding: true,
			scrollingBody: true,
			footerContent:
				'<button id="confirm" type="button" class="btn btn-primary" data-dismiss="modal">Ok, Confirm.</button>',
			onShown: function () {},
			closeCallback: function () {}
		};
		if (hasCookie !== "true" || forceDisplay) {
			that.modalDialog(options);
		}
	};

	this.aefisDialog = function (el) {
		var $dialog = $(el);
		var contentUrl = $dialog.attr("data-aefis-datasource");
		var content = $dialog.attr("data-aefis-content");
		var title = $dialog.attr("data-aefis-title");
		var size = $dialog.attr("data-aefis-size");
		var showFooterCloseButton = $dialog.attr("data-aefis-show-footer-button");
		var footerButton = false;
		var onShown = $dialog.attr("data-aefis-onshown");
		var onClose = $dialog.attr("data-aefis-onclose");
		var titleIconClass = $dialog.attr("data-aefis-title-icon-class");
		var exportOptions = $dialog.attr("data-aefis-export-options");
		var exportContentUrl = $dialog.attr("data-aefis-export-datasource");
		var modalBodyclass = "";
		var noBodyPadding = $dialog.attr("data-aefis-no-body-padding");
		var bodyScrolling = $dialog.attr("data-aefis-scrolling-body");

		if ($dialog.attr("data-aefis-modal-body-class")) {
			modalBodyclass = $dialog.attr("data-aefis-modal-body-class");
		}

		if (size == "" || !size) {
			size = "small";
		}

		if (showFooterCloseButton) {
			footerButton = true;
		}

		var options = {
			title: title,
			size: size,
			showFooterCloseButton: footerButton,
			addBodyClass: modalBodyclass
		};

		if (noBodyPadding) {
			options["noBodyPadding"] = true;
		}

		if (bodyScrolling) {
			options["scrollingBody"] = bodyScrolling;
		}

		if (content) {
			var $content = $(content).html();
			options.content = $content;
		} else {
			options.contentUrl = contentUrl;
		}

		if (exportOptions) {
			options.exportOptions = exportOptions;
		}

		if (exportOptions && exportContentUrl) {
			options.exportOptionsUrl = exportContentUrl;
		}

		if (titleIconClass) {
			options.titleIconClass = titleIconClass;
		}

		if (onShown) {
			options.onShown = onShown;
		}

		if (onClose) {
			options.closeCallback = onClose;
		}
		that.modalDialog(options);
	};

	this.aefisAlert = function (el) {
		var $alert = $(el);
		var title = $alert.attr("data-aefis-title");
		var content = $alert.attr("data-aefis-content");

		that.alert(title, content);
	};

	this.aefisConfirm = function (el) {
		var $confirm = $(el);
		var title = $confirm.attr("data-aefis-title");
		var content = $confirm.attr("data-aefis-content");
		var url = $confirm.attr("data-aefis-datasource");

		var successMessage = $confirm.attr("data-aefis-success-message");
		var titleIconClass = $confirm.attr("data-aefis-title-icon-class");
		var errorMessage = $confirm.attr("data-aefis-error-message");
		var data = $confirm.attr("data-aefis-data");
		var refresh = $confirm.attr("data-aefis-refresh-id");
		var confirmActionName = $confirm.attr("data-aefis-confirm-action-name");
		var onSuccess = $confirm.attr("data-aefis-on-success");

		var options = {
			content: content,
			title: title,
			confirmAction: url
		};

		if (successMessage) {
			options["successMessage"] = successMessage;
		}

		if (titleIconClass) {
			options["titleIconClass"] = titleIconClass;
		}

		if (errorMessage) {
			options["errorMessage"] = errorMessage;
		}

		if (onSuccess) {
			options["onSuccess"] = onSuccess;
		}

		if (data) {
			options["data"] = data;
		}

		if (refresh) {
			options["refreshSelector"] = refresh;
		}

		if (confirmActionName) {
			options["confirmActionName"] = confirmActionName;
		}

		aefis.ui.confirm(options);
	};

	this.formValidationErrorNotification = function (message, $formItem) {
		var dismissMessage = false;
		this.userMessage(
			message,
			"error",
			"Unable to submit the form",
			dismissMessage,
			null,
			"aefis-form-error--notification"
		);
	};

	this.userInfo = function (message, dismiss, title) {
		var dismissMessage = false;
		var msgTitle = "";
		if (dismiss) {
			dismissMessage = true;
		}
		if (title) {
			msgTitle = title;
		}
		this.userMessage(message, "info", msgTitle, dismissMessage);
	};

	this.userSuccess = function (message, dismiss, title) {
		var dismissMessage = false;
		if (!title) {
			title = "";
		}
		if (dismiss) {
			dismissMessage = true;
		}
		this.userMessage(message, "success", title, dismissMessage);
	};

	this.userWarning = function (message, dismiss, title) {
		if (!title) {
			title = "";
		}
		this.userMessage(message, "warning", title);
	};

	this.userTip = function (message, dismiss, title) {
		if (!title) {
			title = "";
		}
		this.userMessage(message, "tip", title);
	};

	this.userNotification = function (message, dismiss, title) {
		if (!title) {
			title = "";
		}
		this.userMessage(message, "notification", title);
	};

	this.userError = function (message, dismiss, title) {
		$(".aefis-container-mask").hide();
		if (!title) {
			title = "Something Went Wrong";
		}
		var dismissMessage = false;
		if (dismiss) {
			dismissMessage = true;
		}
		this.userMessage(message, "error", title, dismissMessage);
		that.loadingHideAll();
		hideFullPageLoadingMask();
	};

	this.userMessage = function (
		message,
		type,
		title,
		dismiss,
		action,
		additionalClasses,
		showBrowserNotification
	) {
		var icon = "priority_high";
		var browserNotification = false;
		var iconColorClass = "aefis-background-color--notification";
		var fixed = true;

		if (dismiss) {
			fixed = false;
		}

		if (showBrowserNotification) {
			browserNotification = true;
		}

		switch (type) {
			case "error":
				icon = "priority_high";
				iconColorClass = "aefis-background-color--danger";
				break;

			case "warning":
				icon = "priority_high";
				iconColorClass = "aefis-background-color--warning";
				break;

			case "success":
				icon = "check";
				iconColorClass = "aefis-background-color--success";
				break;

			case "info":
				icon = "info_outline";
				iconColorClass = "aefis-background-color--info";
				break;

			case "notify":
				icon = "notifications_active";
				iconColorClass = "aefis-background-color--notification";
				break;
			case "maintenance":
				icon = "build";
				iconColorClass = "aefis-background-color--danger";
				break;
			case "notification":
				icon = "notifications_active";
				iconColorClass = "aefis-background-color--tip";
				break;
			case "tip":
				icon = "lightbulb_outline";
				iconColorClass = "aefis-background-color--tip";
				break;
		}

		var options = {
			message: message,
			additionalClasses: additionalClasses,
			fixed: fixed,
			size: "large",
			icon: icon,
			iconColorClass: iconColorClass
		};

		if (title) {
			options["title"] = title;
		}

		$.growl(options);

		browserNotification = false;
		if (browserNotification) {
			var browserNotificationTitle = "HelioCampus Notification";
			var browserNotificationContent = message;
			var options = {
				body: browserNotificationContent,
				icon: ""
			};
			aefis.util.requestBrowserNotification(browserNotificationTitle, options);
		}
	};

	this.toggleMobileMenu = function () {
		var $mobileMenu = $("#aefis-mobile-main-navigation");
		var height = $("#aefis-main-content-container").height() + 25;
		$mobileMenu.height(height);
		$("#aefis-topnav-notification-dropdown").removeClass("open");
		$("#aefis-topnav-user-dropdown").removeClass("open");

		if ($mobileMenu.position().left == 0) {
			that.hideMobileMenu();
		} else {
			that.showMobileMenu();
		}

		$mobileMenu.swipeleft(function () {
			that.hideMobileMenu();
		});

		$("#aefis-main-content-container").swiperight(function () {
			that.showMobileMenu();
		});

		$(".dropdown-toggle").on("click", function () {
			that.hideMobileMenu();
		});

		$("#aefis-mobile-main-navigation a")
			.off("click")
			.on("click", function () {
				that.hideMobileMenu();
			});
	};

	this.showMobileMenu = function () {
		var $mobileMenu = $("#aefis-mobile-main-navigation");
		$mobileMenu.animate({ left: 0 }, "fast");
		//$("#aefis-main-content-container").addClass("no-overflow");
		$("#aefis-topnav-menu-dropdown").addClass("mobile-button open");
		//$('#aefis-main-content-container').addClass('blur3px');
	};

	this.hideMobileMenu = function () {
		var $mobileMenu = $("#aefis-mobile-main-navigation");
		$mobileMenu.animate({ left: "-250px" }, "fast");
		//$("#aefis-main-content-container").removeClass("no-overflow");
		$("#aefis-topnav-menu-dropdown").removeClass("mobile-button open");
		//$('#aefis-main-content-container').removeClass('blur3px');
	};

	this.widgetTab = function (page, tab) {
		$("#" + page + "1").hide();
		$("#" + page + "2").hide();
		$("#" + page + tab).show();
		$("#tab" + page + "1").removeClass("current");
		$("#tab" + page + "2").removeClass("current");
		$("#tab" + page + tab).addClass("current");
	};

	this.loadManageOption = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		aefis.ui.animateManageOption(el);
		window.location = url;
	};

	this.animateManageOption = function (el) {
		var $button = $(el);
		var buttonWidth = $button.width();
		var buttonContent = $button.html();
		if (!$button.attr("data-aefis-prev-content")) {
			$button.attr("data-aefis-prev-content", buttonContent);
		}
		/*$button.css('min-width', buttonWidth);*/
		$button.parent().find(".btn").addClass("disabled").prop("disabled", "disabled");
		$button.addClass("spinner");
		$button.html("Loading");
	};

	this.restoreManageButton = function (el) {
		var $button = $(el);
		var previousContent = $button.attr("data-aefis-prev-content");
		$button.html(previousContent).removeClass("disabled").removeClass("spinner");
		$button.parent().find(".btn").removeClass("disabled").removeAttr("disabled");
	};

	this.restoreAllManageButtons = function () {
		if ($("button.aefis-manage-button").length) {
			$(".aefis-manage-button").each(function () {
				var $button = $(this);
				aefis.ui.restoreManageButton($button);
			});
		}
	};

	this.restoreSession = function () {
		var objectKey = "aefis-notification-total-count";
		aefis.app.deleteAefisLocalStorage(objectKey);
		aefis.ui.loadingShow("main", "Restoring Session", "quick", true, false);
	};

	this.toggleAdvancedSearchFilter = function (el) {
		var filterObj = $("#advFilters");
		var elementDisplay = filterObj.height();
		var containerHeight = $("#advFilters-container").height();

		if (filterObj.height() == 0) {
			filterObj.animate({ height: containerHeight });
			$(el).html(
				'<i class="fa fa-chevron-circle-up aefis-font-icon" aria-hidden="true" ></i>Hide Advanced Search Options</a>'
			);
		} else {
			filterObj.animate({ height: 0 });
			$(el).html(
				'<i class="fa fa-chevron-circle-down aefis-font-icon" aria-hidden="true" ></i>Show Advanced Search Options</a>'
			);
		}
	};

	this.signout = function (url) {
		var objectKey = "aefis-notification-total-count";
		aefis.app.deleteAefisLocalStorage(objectKey);
		$("body")
			.addClass("modal-open")
			.append('<div class="modal-backdrop" style="z-index: 999;"></div>');
		showFullPageLoadingMask("Signing Out of AEFIS");

		window.location = url;
	};

	this.basicAlert = function (title, msg) {
		alert(msg);
	};

	this.alert = function (title, msg, dismissOptionUniqueId) {
		var randomnumber = Math.floor(Math.random() * 100);
		var id = "aefis-modal-alert-dialog" + randomnumber;
		var dismissOption = false;
		var show = true;

		if (dismissOptionUniqueId) {
			id = dismissOptionUniqueId;
			dismissOption = true;
			var isDismissed = aefis.app.getAefisLocalStorage("aefis-alert-dismiss-" + id);

			if (isDismissed) {
				show = false;
			}
		}
		if (show) {
			var dialogHeader =
				'<div class="modal-header"><button aria-label="close dialog" class="close" data-dismiss="modal"><i class="material-icons" aria-hidden="true" style="color: #000000;">clear</i></button><h2>' +
				title +
				"</h2></div>";
			var dialogContent = '<div class="modal-body">' + msg + "</div>";
			var dialogFooter =
				'<div class="modal-footer"><button type="button" class="btn" data-dismiss="modal">Close</button></div>';

			if (dismissOption) {
				dialogFooter =
					'<div class="modal-footer"><div class="pull-left disable-user-select" style="display:inline-block;padding-left: 0px !important; margin-top: 5px;"><label class="checkbox"><input type="checkbox" class="aefis-do-not-show-again" data-aefis-target="' +
					id +
					'">Do Not Show Again</label></div><button type="button" class="btn" data-dismiss="modal">Close</button></div>';
			}

			var dialog =
				'<div id="' +
				id +
				'" class="modal hide fade aefis-modal-dialog aefis-modal-dialog--alert" tabindex="-1">' +
				dialogHeader +
				dialogContent +
				dialogFooter +
				"</div>";
			$(dialog).appendTo("body");
			var $modal = $("#" + id);
			$modal.modal();
			$modal.one("hidden", function (e) {
				setTimeout(function () {
					$modal.remove();
				}, 800);
			});
			$modal.on("hidden", function () {
				$(window).trigger("aefis-modal-closed", $modal);
			});

			$modal.on("shown", function () {
				setFocusToFirstItemInObject($modal);

				$modal.keydown(function (e) {
					trapTabKey($(this), e);
				});
			});
		}
	};

	this.trapTabKey = function (obj, evt) {
		trapTabKey(obj, evt);
	};

	function trapTabKey(obj, evt) {
		if (evt.which == 9) {
			var o = obj.find("*");
			var focusableItems;
			var focusableElementsString = getFirstFocusableElementsString();
			focusableItems = o.filter(focusableElementsString).filter(":visible");
			var focusedItem;
			focusedItem = jQuery(":focus");
			var numberOfFocusableItems;
			numberOfFocusableItems = focusableItems.length;
			var focusedItemIndex;
			focusedItemIndex = focusableItems.index(focusedItem);
			if (evt.shiftKey) {
				if (focusedItemIndex == 0) {
					focusableItems.get(numberOfFocusableItems - 1).focus();
					evt.preventDefault();
				}
			} else {
				if (focusedItemIndex == numberOfFocusableItems - 1) {
					focusableItems.get(0).focus();
					evt.preventDefault();
				}
			}
		}
	}

	function getFirstFocusableElementsString() {
		return "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex='0'], *[contenteditable]";
	}

	function getFocusableElementsString() {
		return "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled],.close), iframe, object, embed,  *[tabindex='0'], *[contenteditable]";
	}

	function setFocusToFirstItemInObject(obj) {
		var focusableElementsString = getFocusableElementsString();
		var o = obj.find("*");
		o.filter(focusableElementsString).filter(":visible").first().focus();
	}

	this.setFocusToFirstItemInObject = function (obj) {
		setFocusToFirstItemInObject(obj);
	};

	this.confirm = function (options) {
		var defaults = {
			title: "",
			titleIconClass: "",
			content: "Are you sure?",
			successMessage: "",
			errorMessage: "Unexpected error.",
			data: {},
			cancelAction: null,
			confirmAction: null,
			confirmUrl: null,
			confirmActionName: "Delete",
			cancelActionName: "Close",
			refreshSelector: "",
			onSuccess: null,
			onConfirm: null,
			onError: null,
			disableEsc: false,
			additionalClasses: "",
			dialogId: ""
		};
		var options = $.extend({}, defaults, options);
		if (!options.title) {
			options.title = options.confirmActionName + " Confirmation";
		}
		if (options.title && options.titleIconClass) {
			options.title =
				'<span class="aefis-object-action ' +
				options.titleIconClass +
				'"></span>' +
				options.title;
		}

		var modalClass = "aefis-modal-dialog modalWidth-600px aefis-modal-dialog--confirm";
		if (options.additionalClasses) {
			modalClass += " " + options.additionalClasses + " ";
		}
		var randomnumber = Math.floor(Math.random() * 100);
		var id = "aefis-modal-dialog" + randomnumber;
		if (options.dialogId != "") {
			id = options.dialogId;
		}

		var strDisableEsc = "";
		if (options.disableEsc) {
			strDisableEsc = ' data-backdrop="static" data-keyboard="false" ';
		}

		var dialogHeader =
			'<div class="modal-header"><button class="close" data-dismiss="modal" aria-label="close dialog"><i class="material-icons" aria-hidden="true" style="color: #000000;">clear</i></button><h2>' +
			options.title +
			"</h2></div>";
		var dialogContent = '<div class="modal-body">' + options.content + "</div>";
		var dialogFooter =
			'<div class="modal-footer"><button id="confirm" type="button" class="btn btn-primary" data-dismiss="modal">' +
			options.confirmActionName +
			"</button>" +
			'<button type="button" id="cancel" class="btn" data-dismiss="modal">' +
			options.cancelActionName +
			"</button></div>";
		var dialog =
			'<div id="' +
			id +
			'" ' +
			strDisableEsc +
			' class="modal hide fade ' +
			modalClass +
			'" tabindex="-1">' +
			dialogHeader +
			dialogContent +
			dialogFooter +
			"</div>";

		$(dialog).appendTo("body");

		var $modal = $("#" + id);

		$modal.modal();

		$modal.find("#cancel").on("click", function (e) {
			$(".btn[data-loading-text]").button("reset");

			if (options.cancelAction != null) {
				options.cancelAction();
			}
		});

		$modal
			.find("#confirm")
			.unbind("click")
			.on("click", function (e) {
				if (options.confirmAction != null) {
					if (typeof options.confirmAction === "string") {
						new aefis.ApiWrapper().call(options.confirmAction, {
							data: JSON.stringify(options.data),
							type: "POST",
							onSuccess: function (formObject, jqXhr) {
								var responseHeader = jqXhr.getResponseHeader("Content-Location");
								if (options.successMesage && options.successMesage != "") {
									that.userInfo(options.successMessage, true);
								}
								$(options.refreshSelector).trigger("refresh");
								if (options.onSuccess && options.onSuccess != "") {
									if (typeof options.onSuccess === "function") {
										options.onSuccess(responseHeader);
									} else {
										eval(options.onSuccess);
									}
								}
								e.stopPropagation();
								return false;
							},
							onError: function (formObject, jqXhr, error) {
								if (!jqXhr.status === 403) {
									that.userError(options.errorMessage, true);
								}
								if (options.onError != null) {
									options.onError();
								}
								return false;
							}
						});
					} else {
						options.confirmAction();
					}
				} else if (options.confirmUrl != null) {
					window.location.href = options.confirmUrl;
				}
				if (options.onConfirm != null) {
					options.onConfirm();
				}
			});
		$modal.one("hidden", function (e) {
			setTimeout(function () {
				$modal.remove();
				$(".btn[data-loading-text]").button("reset");
				e.stopPropagation();
				if ($("button.aefis-manage-button").length) {
					$(".aefis-manage-button").each(function () {
						var $button = $(this);
						aefis.ui.restoreManageButton($button);
					});
				}
			}, 800);
		});
		$modal.on("hidden", function () {
			$(window).trigger("aefis-modal-closed", $modal);
			if ($("button.aefis-manage-button").length) {
				$(".aefis-manage-button").each(function () {
					var $button = $(this);
					aefis.ui.restoreManageButton($button);
				});
			}
		});
		$modal.on("shown", function () {
			setFocusToFirstItemInObject($modal);

			$modal.keydown(function (e) {
				trapTabKey($(this), e);
			});
		});
	};

	this.hideAllDialogs = function () {
		$(".modal").modal("hide");
		try {
			if (window.self != window.top) {
				window.parent.aefis.ui.hideAllDialogs();
			}
		} catch (err) {}
	};

	this.modalDialog = function (params) {
		$("body").modalmanager("loading");
		var $spinnerHtml = $("#aefis-app-area-preloader").html();
		var defaults = {
			title: "Attention",
			contentURL: "", //todo: deprecate in favor of contentUrl
			contentUrl: "",
			content: "",
			backdrop: "static",
			keyboard: false,
			modal: true,
			closeCallback: "",
			addBodyClass: "",
			addModalClass: "",
			showFooterCloseButton: false,
			closeButtonText: "Close",
			animate: true,
			useFrame: false,
			frameHeight: "",
			spinner: '<div class="aefis-app-area-preloader">' + $spinnerHtml + "</div>",
			frameScrolling: "yes",
			size: "default",
			footerContent: "",
			onShown: "",
			titleIconClass: "",
			dismissOptionUniqueId: "",
			exportOptions: "",
			exportOptionsUrl: "",
			modalId: "",
			noBodyPadding: false,
			hideHeaderClose: false,
			scrollingBody: true
		};

		var modalOptions = {};
		var options = $.extend({}, defaults, params);
		var dialogContent;
		var bodyClass = "";
		var modalClass = "aefis-modal-dialog";
		var randomnumber = Math.floor(Math.random() * 100);
		var id = "aefis-modal-dialog" + randomnumber;

		if (options.modalId != "") {
			id = options.modalId;
		}

		var show = true;
		var additionalHeaderContent = "";

		if (options.dismissOptionUniqueId && options.dismissOptionUniqueId !== "") {
			id = dismissOptionUniqueId;
			dismissOption = true;
			var isDismissed = aefis.app.getAefisLocalStorage("aefis-modal-dismiss-" + id);
			if (isDismissed) {
				show = false;
			}
		}

		if (options.exportOptions != "") {
			var exportOptionsArray = options.exportOptions.split(",");
			var exportButtonHtml = '<div class="aefis-modal-export-options">';
			var newUrl = options.contentUrl;

			if (options.exportOptionsUrl != "") {
				newUrl = options.exportOptionsUrl;
			}

			exportButtonHtml +=
				'<div class="btn-group"><a class="btn dropdown-toggle" data-toggle="dropdown" aria-label="export options">Export <span class="caret"></span></a>';
			exportButtonHtml += '<ul class="dropdown-menu pull-right" data-container="body">';

			if (exportOptionsArray.indexOf("print") > -1) {
				var printUrl = newUrl + "&rf=print";
				exportButtonHtml +=
					'<li><a href="' +
					printUrl +
					'" class="aefis-object-action print" target="_new">Print</a></li>';
			}

			if (exportOptionsArray.indexOf("pdf") > -1) {
				var pdfUrl = newUrl + "&rf=pdf";
				exportButtonHtml +=
					'<li><a href="' + pdfUrl + '" class="aefis-object-action pdf">PDF</a></li>';
			}
			exportButtonHtml += "</ul></div></div>";
			additionalHeaderContent = exportButtonHtml;
		}

		if (show) {
			if (options.contentURL != "") {
				options.contentUrl = options.contentURL; //here for conversion
			}

			// if a size is defined (small,medium,large), set the modalClass and bodyClass
			if (options.size == "small") {
				modalClass += " modalWidth-600px";
			} else if (options.size == "medium") {
				modalClass += " modalWidth-700px";
			} else if (options.size == "large") {
				modalClass += " modalWidth-900px";
			} else if (options.size == "xlarge") {
				modalClass += " modalWidth-1100px";
			} else if (options.size == "full") {
				modalClass += " modalWidth-full";
			}

			if (options.titleIconClass && options.titleIconClass != "") {
				options.title =
					'<i class="aefis-font-icon ' +
					options.titleIconClass +
					'"></i>' +
					'<span id="aefis-modal-dialog-title' +
					randomnumber +
					'"/>' +
					options.title +
					"</span>";
			} else {
				var convertedTitle = options.title.toLowerCase();

				if (convertedTitle.indexOf(" ") >= 0) {
					var splitResult = convertedTitle.split(" ");
					convertedTitle = splitResult[0];
				}
				options.title =
					'<span id="aefis-modal-dialog-title' +
					randomnumber +
					'" class="aefis-object-action ' +
					convertedTitle +
					' aefis-ui-modal-title">' +
					options.title +
					"</span>";
			}

			if (options.addBodyClass && options.addBodyClass != "") {
				bodyClass = options.addBodyClass;
			}
			// if modalClass is defined, use it to set the width
			if (options.addModalClass && options.addModalClass != "") {
				modalClass = " " + options.addModalClass;
			}

			if (options.noBodyPadding) {
				bodyClass += " aefis-dialog-no-body-padding";
			}

			if (!options.scrollingBody) {
				bodyClass += " aefis-dialog-no-body-scrolling";
			}

			// contruct the loading container
			var loadingContainer =
				'<div id="aefis-loadingcontainer" class="loadingContainer" aefis-loading-type="quick"></div>';
			if (options.hideHeaderClose) {
				var dialogHeader =
					'<div class="modal-header"><h2>' +
					options.title +
					"</h2>" +
					additionalHeaderContent +
					"</div>";
			} else {
				var dialogHeader =
					'<div class="modal-header"><button class="close" data-dismiss="modal" aria-label="close dialog"><i class="material-icons" aria-hidden="true" style="color: #000000;">clear</i></button><h2>' +
					options.title +
					"</h2>" +
					additionalHeaderContent +
					"</div>";
			}

			// construct dialog content based on use of iFrame for content or not as determined by options.useFrame
			if (options.useFrame) {
				dialogContent =
					'<div class="modal-body modal-body-iframe ' +
					bodyClass +
					'">' +
					loadingContainer +
					'<iframe id="aefis-dialog-iframe" class="modal-iframe"></iframe></div>';
			} else {
				dialogContent = '<div class="modal-body ' + bodyClass + '"></div>';
			}

			// show a footer close button?
			var dialogFooter = options.showFooterCloseButton
				? '<div class="modal-footer"><button type="button" class="btn aefis-modal-footer-close-button" data-dismiss="modal">' +
				  options.closeButtonText +
				  "</button></div>"
				: '<div class="modal-footer"></div>';
			// show footer content?
			if (options.footerContent && options.footerContent != "") {
				dialogFooter = '<div class="modal-footer">' + options.footerContent + "</div>";
			}
			//now construct the dialog
			var dialog =
				'<div id="' +
				id +
				'" aria-modal="true" role="dialog" data-backdrop="static" data-keyboard="false" class="modal hide fade aefis-ui-dialog aefis-modal-dialog ' +
				modalClass +
				'" aria-labelledby="aefis-modal-dialog-title' +
				randomnumber +
				'">' +
				dialogHeader +
				dialogContent +
				dialogFooter +
				"</div>";

			if (options.size == "large") {
				$(dialog).addClass("container");
			}
			$(dialog).appendTo("body");
			var $modal = $("#" + id);

			var moveButtons = function (id) {
				$("#" + id + " .aefis-modal-dialog-buttons").each(function () {
					var rootContainerId = $modal.attr("id");
					var content = $(this).html();
					var parentForm = $(this).closest("form");
					var submitButton = $(this).children('button.btn.btn-primary[type="submit"]');
					var submitButtonClickEvent = $(submitButton).attr("onclick");

					$("#" + rootContainerId + " .modal-footer")
						.append(content)
						.promise()
						.done(function () {
							if (!submitButtonClickEvent) {
								$(this)
									.children('button[type="submit"]')
									.on("click", function (e) {
										var hasTinyMCE = parentForm.find("div.mce-tinymce");
										if (hasTinyMCE.length) {
											tinymce.triggerSave();
										}
										//$('#'+rootContainerId+' .modal-footer').find('.btn[data-loading-text]').button('loading');
										$(parentForm).submit();
									});
							}
						});
					$(this).remove();
				});
			};

			//load the dialog content
			if (options.useFrame) {
				that.loadingShow("#aefis-loadingcontainer", "Loading", "quick");
				// if a frame is desired, load the iframe with the content url src
				$("#" + id + " .modal-iframe").attr("src", options.contentUrl);
				$("#" + id + " .modal-iframe").attr("scrolling", options.frameScrolling);
				$modal.modal(modalOptions);

				if (options.frameHeight !== "") {
					$("#" + id + " .modal-body-iframe").css("height", options.frameHeight);
				}

				$("#aefis-dialog-iframe").load(function () {
					that.loadingHideAll();
				});
			} else if (options.content != "" && options.content.length) {
				//var $content = $(options.content);
				//if ($content) {
				//options.content = $content.clone();
				//};
				//REMOVED THIS. It doesnt work.
				$("#" + id + " .modal-body").html(options.content);

				//modal button move
				moveButtons(id);
				$modal.modal(modalOptions);
				//aefis.app.initializePage($modal);
				if (options.onShown && options.onShown != "") {
					if (typeof options.onShown === "function") {
						options.onShown(id);
					} else {
						eval(options.onShown);
					}
				}
			} else {
				$("#" + id + " .modal-body").load(options.contentUrl, "", function () {
					$modal.modal(modalOptions);

					//modal button move
					moveButtons(id);
					if (options.onShown && options.onShown != "") {
						if (typeof options.onShown === "function") {
							options.onShown(id);
						} else {
							eval(options.onShown);
						}
					}
					aefis.app.initializePage($modal);
				});
			}
			$modal.one("hidden", function (e) {
				aefis.windowQueue.pop();
				// TODO For some reason this requires an asynch remove. Not a great way. Might be resolved. OY
				setTimeout(function () {
					$modal.remove();
					if (aefis.windowQueue.length) {
						// commented this out as it was causing all modal dialog close to scroll forms to top input. Phil
						//aefis.windowQueue[aefis.windowQueue.length-1].find("form:visible:first").find(":input:visible:first").focus();
					} else {
						//$("form:visible:first").find(":input:visible:first").focus();
					}
				}, 800);
				if (options.closeCallback && options.closeCallback != "") {
					try {
						if (typeof options.closeCallback === "function") {
							options.closeCallback();
						} else {
							eval(options.closeCallback);
						}
					} catch (err) {
						$modal.remove();
					}
				}
			});
			$("body").addClass("modal-open");
			$modal.on("hidden", function () {
				$(window).trigger("aefis-modal-closed", $modal);
				if ($(".aefis-modal-dialog").length == 0) {
					$("body").removeClass("modal-open");
					$(".modal-backdrop").remove();
					$(".modal-scrollable").remove();
				}
			});
			$modal.on("shown", function () {
				$("#" + id + " .aefis-tooltip")
					.tooltip({ container: ".modal-body" })
					.on("show", function (e) {
						e.stopPropagation();
					})
					.on("shown", function (e) {
						e.stopPropagation();
					})
					.on("hide", function (e) {
						e.stopPropagation();
					})
					.on("hidden", function (e) {
						e.stopPropagation();
					});
				if ($("button.aefis-manage-button").length) {
					$(".aefis-manage-button").each(function () {
						var $button = $(this);
						aefis.ui.restoreManageButton($button);
					});
				}
				that.initializeAefisMaterialComponents();
				that.upgradeMDLDOM();
				$modal.on("AefisFramework.UI.Dialog:close", function () {
					$modal.modal("hide");
				});
				$modal.find("input:first:visible").focus();

				$modal.keyup(function (e) {
					if (e.key == "Escape") {
						$modal.trigger("AefisFramework.UI.Dialog:close");
					}
				});

				setFocusToFirstItemInObject($modal);

				$modal.keydown(function (e) {
					trapTabKey($(this), e);
				});
			});
		} //end of show
	};

	this.upgradeMDLDOM = function () {
		if (componentHandler) {
			var isMobileDevice = aefis.util.isMobileDevice();

			componentHandler.upgradeDom();
		}
	};

	this.notificationSuccess = function (title, text) {
		var defaults = {
			title:
				'<i class="fa fa-exclamation-circle aefis-font-icon" aria-hidden="true" ></i>' +
				title,
			text: text,
			type: "success"
		};

		aefis.ui.notification(defaults);
	};

	this.notificationInfo = function (title, text) {
		var defaults = {
			title:
				'<i class="fa fa-exclamation-circle aefis-font-icon" aria-hidden="true" ></i>' +
				title,
			text: text,
			class_name: "aefis-notification-info"
		};

		aefis.ui.notification(defaults);
	};

	/////////////////////////////
	// UI - drawWithTemplate
	// UI Function: This is to process results with a Handlebars template
	//   'data' is data used for drawing with the template.
	//   'dataContainer' should have the attribute 'data-aefis-template-id' that contains the id of the Handlebars template.
	//   'dataContainer' is also where the result will be placed.
	//   data supplied to the template will ALWAYS use the variable 'records'... use like {{records.[0].property}}
	this.drawWithTemplate = function (data, dataContainer) {
		if (aefis.debug) {
			console.log("attempting to draw object of type: " + jQuery.type(data));
		}
		if (!data) {
			var data = $(dataContainer).html();
		}
		var source = $("#" + $(dataContainer).attr("data-aefis-template-id")).html(); // get template source
		var template = Handlebars.compile(source); // compile with handlebars
		$(dataContainer).html(template({ records: data })); // apply data to the template
		$(dataContainer).trigger("completed");
	};

	/////////////////////////////
	// UI - drawObjectArrayMultipleGroupsWithTemplate
	// UI Function: This is to process results that should be broken into multiple sets by the
	//   designated 'sortedByPropertyList'. Drawing is done with a Handlebars template.
	//   'recordArray' is an array of records (objects with properties) to be used for drawing with the template.
	//   'dataContainer' should have the attribute 'data-aefis-template-id' that contains the id of the Handlebars template.
	//   'dataContainer' is also where the result will be placed.
	//   'sortedByPropertyList' is a list ('val,val') of properties this array of objects is sorted by and should be used for dividing into groups for drawing.
	//   data supplied to the template will ALWAYS use the variable 'records'... use like {{records.[0].property}}
	//   'aefis-main-table-index' is written to each group.
	this.drawObjectArrayMultipleGroupsWithTemplate = function (
		objectArray,
		dataContainer,
		sortedByPropertyList
	) {
		var tempArray = [];
		var currentKeyObj = { bogusKey: -1 };

		// if no length, set no records
		if (objectArray.length == 0) {
			if (aefis.debug) {
				console.log("no records returned.");
			}

			if ($(dataContainer).attr("data-aefis-default-content")) {
				$(dataContainer).html($(dataContainer).attr("data-aefis-default-content"));
			} else {
				var output =
					'<div class="aefis-report-initial-message" style="padding: 0px !important;">\
								<div style="padding:35px;" class="aefis-user-message">\
									<div class="aefis-user-message-icon">\
										<i aria-hidden="true" id="aefis-font-icon-9EC4B788-DB18-43D8-82669E60773C73F6" class="material-icons  md-36 muted" tabindex="-1"></i>\
									</div>\
									<div class="aefis-user-message-title">\
										No Results Found\
									</div>\
									<div class="aefis-user-message-content">\
										Either there are no results for selected parameters or you do not have a permission to view the results!<br> Please change the report parameters!\
									</div>\
								</div>\
							</div>';
				$(dataContainer).html(output);
			}
			return false;
		}

		var source = $("#" + $(dataContainer).attr("data-aefis-template-id")).html(); // get template source
		var template = Handlebars.compile(source);
		var groupindex = 0;

		if (aefis.debug) {
			console.log(
				"type of the objectArray: " +
					jQuery.type(objectArray) +
					" length: " +
					objectArray.length
			);
		}

		for (var i = 0; i < objectArray.length; i++) {
			if (aefis.debug) {
				console.log("looking at object: ");
				console.log(objectArray[i]);
				console.log(" current object: ");
				console.log(currentKeyObj);
			}
			if (
				aefis.util.comparePropertySet(sortedByPropertyList, objectArray[i], currentKeyObj)
			) {
				// add temp array
				if (aefis.debug) {
					console.log("adding data to tempArray at index:" + tempArray.length);
				}
				objectArray[i]["aefisMainTableIndex"] = groupindex;
				tempArray[tempArray.length] = objectArray[i];
			} else {
				groupindex++;
				currentKeyObj = objectArray[i];
				if (tempArray.length) {
					// add to output, clear temp array
					if (aefis.debug) {
						console.log("adding records to display of length: " + tempArray.length);
					}
					$(dataContainer).append(template({ records: tempArray }));
					tempArray = [];
				}
				objectArray[i]["aefisMainTableIndex"] = groupindex;
				tempArray[tempArray.length] = objectArray[i];
			}
		}
		if (tempArray.length) {
			$(dataContainer).append(template({ records: tempArray }));
		}
		if (aefis.debug) {
			console.log("finished updating ui with data.");
		}
	};

	function writeLoadingContainer($loadingContainer, onTop, useSVG, topOffsetPercent) {
		var spinner =
			'<div id="aefis-loading-container-spinner-image" class="material-spinner-container small"><div class="material-spinner"></div></div>';
		$loadingContainer
			.addClass("alert alert-gray nopadding aefis-loadingcontainer")
			.append(
				spinner +
					'<span id="aefis-loadingcontainer-message" style="margin-left:5px;">Loading...</span><div id="aefis-loadingcontainer-progressbar" class="mdl-progress mdl-js-progress mdl-progress__indeterminate" style="margin-top:5px;height:5px;position:relative;"></div>'
			);
		if (topOffsetPercent) {
			$loadingContainer.css("margin-top", topOffsetPercent);
		}
	}

	this.fullPagePreloader = function (text) {
		var $container = $("#aefis-app-area-preloader");
		var preloaderText = "Loading...";
		if (text) {
			preloaderText = "Loading <strong>" + text + "</strong>";
		}
		$container.find(".aefis-app-area-preloader--header-subtext").html(preloaderText);
		$container.fadeIn();
	};

	this.hideFullPagePreloader = function (text) {
		var $container = $("#aefis-app-area-preloader");
		var preloaderText = "Loading...";
		if (text) {
			preloaderText = "Loading <strong>" + text + "</strong>";
		}

		$container.fadeOut(function () {
			$container.find(".aefis-app-area-preloader--header-subtext").html(preloaderText);
		});
	};

	this.loadingContainers = []; // to track loading containers

	this.loadingIndicator = function (containerSelector, message, indicatorType) {
		if (!aefis.app.isRequestFromPdfServer()) {
			// this turns all loading ui off for pdf
			var $container = $(containerSelector);
			var containerLoc = jQuery.inArray(containerSelector, that.loadingContainers);
			if (containerLoc < 0) {
				if (aefis.debug) {
					console.log(
						"aefis.ui.loadingShow: adding " +
							containerSelector +
							" to loadingContainers array."
					);
				}
				that.loadingContainers[that.loadingContainers.length] = containerSelector; // not there, add
			}

			var msg = message ? message : "Loading...";

			var html = '<div class="aefis-loading-indicator--container">';
			html +=
				'<div class="aefis-loading-indicator--row"><div class="aefis-loading-indicator--indicator aefis-indicator-hide mdl-shadow--2dp">' +
				msg +
				"</div></div>";
			html += "</div>";

			$container
				.append(html)
				.promise()
				.done(function () {
					setTimeout(function () {
						$container
							.find("div.aefis-loading-indicator--indicator")
							.removeClass("aefis-indicator-hide");
					}, 100);
				});

			$container.on("AefisLoadingIndicator:hide", function () {
				$container
					.find("div.aefis-loading-indicator--indicator")
					.addClass("aefis-indicator-hide");
			});

			$container.on("AefisLoadingIndicator:hidden", function () {
				$container.find("div.aefis-loading-indicator--container").remove();
			});

			$container
				.find("div.aefis-loading-indicator--indicator")
				.one(
					"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
					function (event) {
						var $ind = $container.find("div.aefis-loading-indicator--indicator");
						if ($ind.hasClass("aefis-indicator-hide")) {
							$container.trigger("AefisLoadingIndicator:hidden");
						} else {
							$container.trigger("AefisLoadingIndicator:shown");
						}
					}
				);
		}
	};

	// containerSelector defaults to '#aefis-loadingcontainer'
	// aefis-loading-type ['quick'|'slow'] is an attribute on the element referenced by the containerSelector or '#aefis-loadingcontainer'. defaults to slow
	// currently 'quick' show a spinner, 'slow' uses progressbar
	this.loadingShow = function (
		containerSelector,
		message,
		progressType,
		onTop,
		solid,
		barDelay,
		topOffsetPercent,
		hideIndicator
	) {
		if (!aefis.app.isRequestFromPdfServer()) {
			// this turns all loading ui off for pdf
			if (jQuery.type(containerSelector) === "string") {
				var containerSel = containerSelector + " #aefis-loadingcontainer";
				var $loadingContainer = $("<div id='aefis-loadingcontainer' />").prependTo(
					$(containerSelector)
				);
			} else {
				var containerSel = "#aefis-loadingcontainer";
				var $loadingContainer = $("#aefis-loadingcontainer");
			}

			var containerLoc = jQuery.inArray(containerSel, that.loadingContainers);
			if (containerLoc < 0) {
				if (aefis.debug) {
					console.log(
						"aefis.ui.loadingShow: adding " +
							containerSel +
							" to loadingContainers array."
					);
				}
				that.loadingContainers[that.loadingContainers.length] = containerSel; // not there, add
			}

			if ($loadingContainer.find("#aefis-loadingcontainer-progressbar").length == 0) {
				// fix for not drawing multiple loading content
				if (topOffsetPercent) {
					writeLoadingContainer($loadingContainer, onTop, true, topOffsetPercent);
				} else {
					writeLoadingContainer($loadingContainer, onTop, true);
				}
			}

			var msg = message ? message : "loading...";
			var type =
				jQuery.type(progressType) === "string"
					? progressType
					: $loadingContainer.attr("aefis-loading-type");

			if (type == "quick") {
				$loadingContainer.find("#aefis-loadingcontainer-progressbar").hide();
				$loadingContainer.find("#aefis-loadingcontainer-message").html(msg);
				$loadingContainer.find("#aefis-loadingcontainer-spinner").show();
				$loadingContainer.find("div.material-spinner").show();
				$loadingContainer.find("#aefis-loading-container-spinner-image").show();
				$loadingContainer.find(".material-spinner-container").show();
				if (!$loadingContainer.is(":visible")) {
					$loadingContainer
						.show()
						.promise()
						.done(function () {
							$loadingContainer.addClass("animated zoomIn");
						});
				}
			} else {
				$loadingContainer.find("#aefis-loadingcontainer-spinner").hide();
				$loadingContainer.find("#aefis-loading-container-spinner-image").hide();
				$loadingContainer.find(".material-spinner-container").hide();
				$loadingContainer.find("div.material-spinner").hide();
				$loadingContainer.find("#aefis-loadingcontainer-message").html(msg);
				$loadingContainer.find("#aefis-loadingcontainer-progressbar").fadeIn();
				if (!$loadingContainer.is(":visible")) {
					$loadingContainer
						.show()
						.promise()
						.done(function () {
							$loadingContainer.addClass("animated zoomIn");
							$(window).trigger("loadAefisProgress");
						});
				}
			}

			if (hideIndicator) {
				$loadingContainer.find("#aefis-loadingcontainer-spinner").hide();
				$loadingContainer.find("#aefis-loading-container-spinner-image").hide();
				$loadingContainer.find(".material-spinner-container").hide();
				$loadingContainer.find("div.material-spinner").hide();
				$loadingContainer.find("#aefis-loadingcontainer-progressbar").hide();
			}

			if (onTop == "true" || onTop == true) {
				var $containerMask = $("body").find(".aefis-container-mask");
				if ($containerMask.length) {
					$containerMask.remove();
				}
				var loadingHtml = $('<div class="aefis-container-mask" ></div>');
				$loadingContainer.addClass("ontop");
				$(containerSelector)
					.append(loadingHtml)
					.promise()
					.done(function () {
						if (solid == true || solid == "true") {
							if (jQuery.type(containerSelector) === "string") {
								$(containerSelector + " .aefis-container-mask").addClass("solid");
							} else {
								$(containerSelector)
									.find(".aefis-container-mask")
									.addClass("solid");
							}
						}
						if (jQuery.type(containerSelector) === "string") {
							$(containerSelector + " .aefis-container-mask").addClass("fast");
						} else {
							$(containerSelector).find(".aefis-container-mask").fadeIn("fast");
						}
					});
			}

			if (aefis.debug) {
				console.log(
					"aefis.ui.loadingShow: finished showing for " +
						containerSel +
						". loadingContainers is now: "
				);
				console.log(that.loadingContainers);
			}

			//aefis.ui.screenreaderAnnouncement(message);
		}
	};

	this.loadingHide = function (containerSelector, callback, callbackScope) {
		if (jQuery.type(containerSelector) === "string") {
			var containerSel = containerSelector + " #aefis-loadingcontainer";
			var $loadingContainer = $(containerSelector + " #aefis-loadingcontainer");
		} else {
			var containerSel = "#aefis-loadingcontainer";
			var $loadingContainer = $("#aefis-loadingcontainer");
		}

		var containerLoc = jQuery.inArray(containerSel, that.loadingContainers);
		if (containerLoc >= 0) {
			that.loadingContainers.splice(containerLoc, 1); // found it. remove
		}

		if ($loadingContainer.length) {
			$loadingContainer.addClass("zoomOut");
			that.doAfterAnimationEnds($loadingContainer, function () {
				$loadingContainer
					.fadeOut("fast")
					.promise()
					.done(function () {
						if ($loadingContainer.find("#aefis-loadingcontainer-progressbar").length) {
							$loadingContainer.find("#aefis-loadingcontainer-progressbar").hide();
						}

						if ($loadingContainer.find("#aefis-loadingcontainer-spinner").length) {
							$loadingContainer.find("#aefis-loadingcontainer-spinner").hide();
						}

						$(".aefis-container-mask")
							.fadeOut(400)
							.promise()
							.done(function () {
								$(".aefis-container-mask").remove();
								$loadingContainer.remove();
								if (callback) {
									callback.call(callbackScope);
								}
							});
					});
			});
		} else {
			if (callback) {
				callback.call(callbackScope);
			}
		}

		if (aefis.debug) {
			console.log(
				"aefis.ui.loadingHide: finished hiding for " +
					containerSel +
					". loadingContainers is now: "
			);
			console.log(that.loadingContainers);
		}
	};

	this.loadingHideAll = function (callback, callbackScope) {
		// loop through all loadingContainers and hide
		var loaderCount = that.loadingContainers.length;
		for (var i = 0; i < loaderCount; i++) {
			// index of 0 as containers array element is removed by hide function
			if (aefis.debug) {
				console.log(
					"aefis.ui.loadingHideAll: before calling loadingHide('" +
						that.loadingContainers[0] +
						"')"
				);
			}
			that.loadingHide(that.loadingContainers[0].replace(" #aefis-loadingcontainer", ""));
			if (aefis.debug) {
				console.log(
					"aefis.ui.loadingHideAll: after calling loadingHide('" +
						that.loadingContainers[0] +
						"')"
				);
			}
		}
		if (callback) {
			callback.call(callbackScope);
		}
	};

	this.processAefisTokenListObject = function () {
		if ($("body").find(".aefis-token-list-object").length) {
			$(".aefis-token-list-object").each(function () {
				var obj = $(this);
				var objCss = obj.attr("data-aefis-token-css");
				var objCode = obj.attr("data-aefis-token-code");
				var objEntity = obj.attr("data-aefis-token-entity");
				var objName = obj.attr("data-aefis-token-name");
				var htmlAppend = '<div class="muted ">' + objName + "</div></div></div>";
				if (!objName) {
					htmlAppend = "</div></div>";
				}

				var that = $(this);
				var newHtml =
					'<div class="row-fluid"><div class="span4" style="float: left;text-align:center;"><span class="aefis-token ' +
					objCss +
					'" data-trigger="hover" data-content="' +
					objCode +
					'" data-placement="top" data-html="true" data-toggle="popover" data-container="body" data-delay="500">' +
					objCode +
					'</span></div><div style="display: inline-block;" class="span8"><div class=""><strong>' +
					objEntity +
					"</strong></div>" +
					htmlAppend;

				obj.html(newHtml)
					.promise()
					.done(function () {
						$(".aefis-token").popover();
					});
			}); //end of each
		}
	};

	this.initializeAefisButton = function () {
		$(".aefis-button:not(.hide-loading)")
			.off("click")
			.on("click", function (event) {
				var $button = $(this).find("i");
				if (!$button || $button.length == 0) {
					$button = $(this).find("span");
				}
				$button.addClass("animated bounceOut");
				that.doAfterAnimationEnds($button, function () {
					$button.attr("class", "aefis-button-loading");
					$button.addClass("animated bounceIn");
				});
			});
	};

	this.initializeAefisActionButton = function () {
		$(".aefis-action-button:not(.hide-loading)")
			.off("click")
			.on("click", function (event) {
				event.preventDefault();
				event.stopPropagation();
				var $button = $(this).find("span");
				var buttonLink = $(this).attr("href");
				if (!$button || $button.length == 0) {
					$button = $(this).find("span");
				}
				$button.addClass("animated bounceOut");
				that.doAfterAnimationEnds($button, function () {
					$button.attr("class", "aefis-action-button-loading");
					$button.addClass("animated bounceIn");
					window.location.href = buttonLink;
				});
			});

		$(".aefis-mdl-action-button:not(.hide-loading)").on("click", function (event) {
			var $button = $(this);
			var $iconContainer = $button.find("span");
			$button.prop("disabled", "disabled");
			$iconContainer.fadeOut(function () {
				$iconContainer.removeClass("material-icons");
				$iconContainer.html("");
				$iconContainer.attr("class", "aefis-button-loading");
				$iconContainer.fadeIn();
			});
		});
	};

	this.disableSelector = function (el) {
		var sel = $(el);
		var newHtml = '<div class="aefis-disabled"></div>';

		sel.prepend(newHtml);
	};

	this.removeDisableSelector = function (el) {
		var sel = $(el);
		$(el + " .aefis-disabled")
			.fadeOut("fast")
			.promise()
			.done(function () {
				sel.remove(el + " .aefis-disabled");
			});
	};

	this.removeIfPublished = function () {
		var objectStatus = $("#aefis-object-status").val();
		var checkValue = "published";

		if (objectStatus) {
			objectStatus = objectStatus.toLowerCase();
		}

		if (objectStatus && objectStatus == checkValue) {
			$(".aefis-remove-if-published").each(function () {
				var $obj = $(this);

				if (!$obj.hasClass("aefis-processed-published")) {
					$obj.addClass("aefis-processed-published");
					if ($obj.attr("type") == "radio") {
						$obj.iCheck("disable");
					} else if ($obj.hasClass("aefis-slider")) {
						$obj.addClass("disable");
					} else if ($obj.is("textarea")) {
						$obj.attr("disabled", "disabled");
					} else if ($obj.attr("type") == "checkbox") {
						$obj.iCheck("disable");
					} else if ($obj.hasClass("selectpicker")) {
						$obj.prop("disabled", true);
						$obj.selectpicker("refresh");
					} else if ($obj.hasClass("aefis-select")) {
						$obj.prop("disabled", true);
						$obj.selectpicker("refresh");
					} else if ($obj.prop("tagName") == "BUTTON") {
						//$obj.attr('disabled','disabled');
						$obj.remove();
					} else if ($obj.prop("tagName") == "INPUT") {
						$obj.attr("disabled", "disabled");
					} else {
						$obj.remove();
					}
				}
			});
		}
	};

	this.setAefisGoalChartPercent = function ($chart, percent) {
		var value = parseInt(percent);
		var $bar = $chart.find(".aefis-goal-chart--bar--progress");
		var currentWidth = $bar.width();
		var oldWidthClass = "p" + currentWidth;
		$bar.addClass("p" + value);
		$bar.removeClass(oldWidthClass);
	};

	this.setAefisGoalChartText = function ($chart, text) {
		$chart.find(".aefis-goal-chart--bar--title").html(text.trim());
	};

	this.processAefisChecklistObject = function () {
		$(".aefis-checklist:not(.processed)").each(function () {
			var obj = $(this);
			var title = obj.attr("data-aefis-title");
			var showProgress =
				obj.attr("data-aefis-show-progressbar") &&
				(obj.attr("data-aefis-show-progressbar") == "no" ||
					obj.attr("data-aefis-show-progressbar") == "false")
					? false
					: true;
			var titleHtml = '<div class="aefis-checklist-title-container mdl-grid">';
			titleHtml += '<h3 class="aefis-checklist-title">' + title + "</h3>";
			titleHtml +=
				'<div class="mdl-cell--3-col" style="margin-left:5px;"><div class="aefis-goal-chart small-goal-chart aefis-checklist-progressbar"><div class="aefis-goal-chart--bar"><div class="aefis-goal-chart--bar--all"></div><div class="aefis-goal-chart--bar--progress p0"></div><div class="aefis-goal-chart--bar--title aefis-progress-text">0% Complete</div></div></div></div>';
			var completedHtml =
				'<i class="material-icons aefis-status-color published material-inline-font-container">&#xE86C;</i>';
			var startedHtml =
				'<i class="material-icons aefis-status-color published material-inline-font-container">&#xE427;</i>';
			var notStartedHtml =
				'<i class="material-icons md-dark md-inactive material-inline-font-container">&#xE836;</i>';
			var thatObj = obj;

			obj.addClass("processed");
			if (showProgress) {
				obj.prepend(titleHtml);
			}
			obj.find(".aefis-checklist-item").each(function () {
				//each checklist item
				var checklistObj = $(this);
				var checklistItemTitle = checklistObj.attr("data-aefis-title");
				var checklistItemTitleHtml =
					'<div class="panel-heading"><span style="font-size: 15px; margin: 0px;">' +
					checklistItemTitle +
					"</span></div>";
				checklistObj.addClass("panel");
				checklistObj.prepend(checklistItemTitleHtml);
			});

			obj.find(".aefis-checklist-group-item").each(function () {
				// process each checklist item
				var checklistGroupItem = $(this);
				checklistGroupItem.addClass("animated fadeIn");
				var currentStatusObj = checklistGroupItem.find("div");
				var currentStatus = currentStatusObj.attr("data-aefis-status");
				var isRequired = currentStatusObj.attr("data-aefis-required");
				var requiredHtml =
					'<i class="fa fa-asterisk fa-fw aefis-checklist-required-icon aefis-tooltip" aria-hidden="true" data-container="body" data-placement="top"title="Required"></i>';

				switch (currentStatus.trim()) {
					case "0":
						$(currentStatusObj).prepend(notStartedHtml);
						break;

					case "1":
						$(currentStatusObj).prepend(startedHtml);
						break;

					case "2":
						$(currentStatusObj).prepend(startedHtml);
						break;

					case "3":
						$(currentStatusObj).prepend(completedHtml);
						break;

					case "99":
						$(checklistGroupItem).remove();
						break;
				}

				if (isRequired && isRequired == "true") {
					$(currentStatusObj).append(requiredHtml);
				}
			});

			//obj.find('.aefis-checklist-item-container').addClass('');
			//  obj.find('.aefis-checklist-item-container').first().before('<div class="mdc-layout-grid"><div class="mdc-layout-grid__inner">');
			// obj.find('.aefis-checklist-item-container').last().addClass('last').after('</div></div>');

			//check each container for completion
			$(".aefis-checklist-item")
				.each(function () {
					var $checklist = $(this);
					var listCount = $checklist.find(".aefis-checklist-group li").length;
					var completeCount = $checklist.find("div[data-aefis-status=3]").length;
					if (listCount == completeCount) {
						$checklist.addClass("panel-success");
					}
				})
				.promise()
				.done(function () {
					//count all items and completion for percentage complete
					var totalListCount = $(".aefis-checklist").find(
						".aefis-checklist-group li"
					).length;
					var totalCompleteCount = $(".aefis-checklist").find(
						"div[data-aefis-status=3]"
					).length;
					var totalPercentCompleted = 0;
					//var objHeight = 0;
					if (totalCompleteCount != 0 && showProgress) {
						totalPercentCompleted = Math.round(
							((totalCompleteCount / totalListCount) * 100).toFixed(1)
						);
						var $chart = $(".aefis-checklist-progressbar");
						aefis.ui.setAefisGoalChartPercent($chart, totalPercentCompleted);
						aefis.ui.setAefisGoalChartText(
							$chart,
							totalPercentCompleted + "% Complete"
						);
					}
					//resize to tallest

					$(".aefis-checklist-item").matchHeight();
				});
		});
	};

	this.addMaskToObject = function (el) {
		var obj = $(el);
		obj.css("position", "relative");
		obj.prepend('<div class="aefis-container-mask"></div>');
		$(el + " .aefis-container-mask").fadeIn();
	};

	this.removeMaskFromObject = function (el) {
		var obj = $(el);
		$(el + " .aefis-container-mask")
			.fadeOut()
			.promise()
			.done(function () {
				$(el + " .aefis-container-mask").remove();
			});
	};

	this.removeAllMasks = function () {
		$(".aefis-container-mask")
			.fadeOut()
			.promise()
			.done(function () {
				$(".aefis-container-mask").remove();
			});
	};

	this.doAfterTransitionEnds = function (object, funct) {
		$(object).one($.support.transition.end, funct);
	};

	this.doAfterAnimationEnds = function (object, funct) {
		var transitionEvent =
			"webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend";
		$(object).one(transitionEvent, funct);
	};

	this.clearInput = function (inputField) {
		var $inputField = $(inputField);
		var elementId = $inputField.attr("id");
		document.getElementById(elementId).value = "";
	};

	this.toggleCollapsibleContainer = function (button) {
		var $button = $(button);
		var target = $button.attr("data-aefis-target");
		var $target = $(target);
		var doNotUpdateButton = $button.attr("data-aefis-do-not-update-button");
		if (!$button.hasClass("super-muted")) {
			if ($target.hasClass("aefis-collapsible-container--collapse")) {
				$target.removeClass("aefis-collapsible-container--collapse");
				$target.addClass("aefis-collapsible-container--expand");
				$target.attr("aria-expanded", true);
				if (!doNotUpdateButton) {
					if (!$button.hasClass("aefis-collapsible-button--active")) {
						$button.addClass("aefis-collapsible-button--active");
					} else {
						$button.removeClass("aefis-collapsible-button--active");
					}
				}
				that.doAfterAnimationEnds($target, function () {
					$target.trigger("expanded");
				});
			} else {
				$target.removeClass("aefis-collapsible-container--expand");
				$target.addClass("aefis-collapsible-container--collapse");
				$target.attr("aria-expanded", false);
				if (!doNotUpdateButton) {
					if (!$button.hasClass("aefis-collapsible-button--active")) {
						$button.addClass("aefis-collapsible-button--active");
					} else {
						$button.removeClass("aefis-collapsible-button--active");
					}
				}
				that.doAfterAnimationEnds($target, function () {
					$target.trigger("collapsed");
				});
			}
		}
	};

	this.collapseContent = function (object) {
		var $obj = $(object);
		var collapseObject = $obj.attr("data-aefis-target");
		var offset = $obj.attr("data-aefis-offset");
		var hide = $obj.attr("data-aefis-hide");
		var $collapseObject = $("#" + collapseObject);

		var collapseObjectHeight = $collapseObject.outerHeight();
		var collapseObjectOriginalHeight = $obj.attr("data-aefis-original-height");
		var collapsed = false;
		var newHeight = 0;
		var hideDiv = true;

		$obj.attr("aria-controls", collapseObject);
		$obj.attr("aria-expanded", true);

		if (hide && hide == "false") {
			hideDiv = false;
		}

		if (!collapseObjectOriginalHeight) {
			$obj.attr("data-aefis-original-height", collapseObjectHeight);
		} else {
			collapsed = true;
		}

		if (offset) {
			newHeight = offset;
		}

		if (collapsed) {
			$collapseObject.stop().show().animate({ height: collapseObjectOriginalHeight }, 200);
			$obj.removeAttr("data-aefis-original-height");
			$obj.attr("aria-expanded", true);
		} else {
			$collapseObject.stop().animate({ height: newHeight }, 200, function () {
				if (hideDiv) {
					$collapseObject.hide();
				}
				$obj.attr("aria-expanded", false);
			});
		}
		$obj.find("i").toggleClass("down");
	};

	this.initializeToggle = function (toggle, container) {
		var stateLoaded = false;
		var $container = $("body");
		if (container) {
			$container = $(container);
		}
		if (toggle) {
			var $toggles = $(toggle);
		} else {
			var $toggles = $container.find(
				'input.mdl-switch__input[type="checkbox"]:not(.aefis-initialized)'
			);
		}
		if ($toggles.length) {
			$toggles.each(function () {
				var $toggle = $(this);
				var toggleWhenOn = $toggle.attr("data-aefis-when-on-toggle-control");
				var toggleWhenOff = $toggle.attr("data-aefis-when-off-toggle-control");
				var saveState = $toggle.attr("data-aefis-save-state");
				if (saveState && saveState == "true") {
					if (!stateLoaded) {
						var currentState = aefis.app.getState();
						stateLoaded = true;
					}
					if (currentState && stateLoaded) {
						var paramLevel = currentState.parameters;
						var savedName = paramLevel["Name"];
						if (savedName == $toggle.attr("name")) {
							var savedValue = paramLevel["Value"];
							if (savedValue === true) {
								$toggle.attr("checked", "checked");
							} else {
								$toggle.removeAttr("checked");
							}
						}
					}
					$toggle.on("change", function (e) {
						var value = false;
						if ($toggle.is(":checked")) {
							value = true;
						}
						var parameters = {
							Name: $toggle.attr("name"),
							Value: value
						};
						var stateData = { parameters: parameters, viewdata: "" };
						aefis.app.setState(stateData);
						aefis.app.saveStateOnServer(stateData);
					});
				}
				if (toggleWhenOn || toggleWhenOff) {
					$toggle.on("change", function (e) {
						var value = toggleWhenOn;
						if (!$toggle.is(":checked")) {
							value = toggleWhenOff;
						}
						var param = value.split(":");
						var $updateControl = $(param[0]);
						console.log($updateControl);
						if (param[1] == "show") {
							$updateControl.fadeIn();
						} else {
							$updateControl.fadeOut();
						}
					});
				}
				$(toggle).addClass("aefis-initialized");
			});
		}
	};

	this.getHeightOfTallest = function (element) {
		var t = 0; // the height of the highest element (after the function runs)
		var t_elem; // the highest element (after the function runs)
		var elem = element;
		$(elem).each(function () {
			var obj = $(this);
			if (obj.height() > t) {
				t_elem = this;
				t = obj.height();
			}
		});

		return t;
	};

	this.initializeTooltip = function () {
		if ($(".aefis-tooltip:not(.aefis-initialized)").length) {
			$(".aefis-tooltip:not(.aefis-initialized)").each(function () {
				var $tooltip = $(this);
				$tooltip.tooltip();
				$tooltip.addClass("aefis-initialized");
			});
		}
	};

	this.initializeLocationAutocomplete = function () {
		if ($("input.aefis-location-autocomplete:not(.aefis-initialized)").length) {
			$("input.aefis-location-autocomplete").each(function () {
				var input = this;
				var $input = $(this);
				var opts = {
					types: ["(cities)"]
				};
				try {
					var searchBox = new google.maps.places.Autocomplete(input, opts);
					searchBox.addListener("place_changed", function () {
						var place = searchBox.getPlace();
						var address = place.formatted_address;
						$input.attr("value", address).trigger("change");
					});
				} catch (e) {
					aefis.ui.userError(
						"There was an error loading the survey form. Please refresh your page."
					);
				}
				$input.addClass("aefis-initialized");
			});
		}
	};

	this.initializeAefisNumberInput = function (obj) {
		if (obj) {
			var $input = $(obj);
		} else {
			var $input = $("input.aefis-number-input:not(.aefis-initialized)");
		}
		$input.each(function () {
			var $obj = $(this);
			var minimum = $obj.attr("data-aefis-minimum");
			var maximum = $obj.attr("data-aefis-maximum");
			var numberOfDecimals = $obj.attr("data-aefis-numberOfDecimals");
			var step = $obj.attr("data-aefis-step");
			var ignoreSpinner = $obj.attr("data-aefis-no-spinner");
			var isSLTQuestion = $obj.hasClass("slt-question-input");
			//if (ignoreSpinner) {

			//} else {
			var options = {
				minimum: 0,
				maximum: 1000,
				step: 1,
				numberOfDecimals: 0,
				isSLTQuestion: isSLTQuestion
			};
			if (minimum) {
				options.minimum = parseFloat(minimum);
			}
			if (maximum) {
				options.maximum = parseFloat(maximum);
			}
			if (numberOfDecimals) {
				options.numberOfDecimals = parseInt(numberOfDecimals);
			}
			if (step) {
				options.step = parseFloat(step);
			}
			if (!$obj.hasClass("aefis-initialized")) {
				$obj.spinedit(options);
			}
			$obj.addClass("aefis-initialized");
			//};
		});
	};

	this.initializeDropdownMenuCheck = function () {
		var $menu = $(".dropdown-menu.check");
		if ($menu.length) {
			$menu.each(function () {
				var $thisMenu = $(this);
				$thisMenu.find("a.checked").addClass("aefis-dropdown-list-check");
				$thisMenu.find("a:not(.ignore)").each(function () {
					var $item = $(this);
					$item.off("click").on("click", function () {
						if ($item.hasClass("sticky")) {
							if ($item.hasClass("aefis-dropdown-list-check")) {
								$item.removeClass("aefis-dropdown-list-check");
							} else {
								$item.addClass("aefis-dropdown-list-check");
							}
						} else {
							$thisMenu
								.find("a:not(.sticky)")
								.removeClass("aefis-dropdown-list-check");
							$item.addClass("aefis-dropdown-list-check");
						}
					});
				});
			});
		}

		return false;
	};

	this.initializeRangeSlider = function (slider) {
		var $slider = $(slider);
		var sliderId = $slider.attr("id");
		var grid = $slider.attr("data-aefis-grid");
		var defaultValue = $slider.attr("data-aefis-default-value");
		var labels = $slider.attr("data-aefis-labels");
		var values = $slider.attr("data-aefis-values");
		var step = $slider.attr("data-aefis-step");
		var createInput = $slider.attr("data-create-input");
		var name = $slider.attr("data-aefis-name") || "range slider";
		var disable = false;
		var input = true;
		if ($slider.attr("disabled")) {
			disable = true;
		}
		if (createInput) {
			input = createInput;
		}
		if (input) {
			var aefisObject = $slider.attr("data-aefis-object");
			var newSliderId = sliderId + aefis.util.createUUID();
			var inputObject =
				'<input name="' +
				createInput +
				'" id="' +
				createInput +
				'" data-aefis-object="' +
				aefisObject +
				'" style="display: none;">';
			if (!aefisObject) {
				var inputObject =
					'<input name="' +
					createInput +
					'" id="' +
					createInput +
					'" style="display: none;">';
			}
			$slider.after(inputObject);
			$slider
				.attr("id", newSliderId)
				.attr("name", newSliderId)
				.attr("aria-label", name)
				.removeAttr("data-aefis-object");
			$slider = $("#" + newSliderId);
		}
		var defaults = {
			type: "single",
			grid: true,
			grid_snap: true,
			prettify_enabled: true,
			disable: false,
			onFinish: function (data) {
				var sliderValue = data.from_value;
				$slider.trigger("finish");
				if (input) {
					if (labels) {
						var labelArray = labels.split(",");
						var valuesArray = values.split(",");
						var selectedValue = valuesArray[data.from];
					} else if (values) {
						var valuesArray = values.split(",");
						var selectedValue = valuesArray[data.from];
					}
					$("#" + createInput).val(selectedValue);
				}
			}
		};
		var options = $.extend({}, defaults, options);
		if (grid) {
			options.grid = grid;
		}
		if (disable) {
			options.disable = true;
		}
		if (defaultValue) {
			var valArray = values.split(",");
			if (labels && labels.split(",").indexOf(defaultValue) != -1) {
				var valArray = labels.split(",");
			}
			var newDefaultValue = $.inArray(defaultValue, valArray);
			options.from = newDefaultValue;
		}
		if (labels) {
			options.values = labels.split(",");
		} else if (values) {
			options.values = values.split(",");
		}
		if (step) {
			options.step = step;
		}
		$slider.ionRangeSlider(options);
	};

	this.initializeAefisInput = function (obj, callback) {
		var $obj = $("input.aefis-radio-input, input.aefis-checkbox-input");
		if (obj) {
			$obj = $(obj);
		}
		$obj.iCheck({
			checkboxClass: "icheckbox_square-blue",
			radioClass: "iradio_square-blue",
			labelHover: false,
			aria: true,
			increaseArea: "30%"
		});
		if (typeof callback === "function") {
			callback();
		}
		that.initializeSettingsCheckbox();
	};

	this.initializeSettingsCheckbox = function () {
		if ($(document).find("form.aefis-settings-form").length) {
			$("form.aefis-settings-form")
				.find("input.aefis-setting-checkbox")
				.each(function () {
					var $checkbox = $(this);
					var name = $checkbox.attr("name");
					var id = $checkbox.attr("id");
					var $hiddenInput = $checkbox.closest("label").find("#" + name + "_hidden"); //$('#' + name + '_hidden');

					var object = $hiddenInput.attr("data-aefis-object");
					var original = $hiddenInput.attr("data-aefis-original-object");
					var originalName = $hiddenInput.attr("data-aefis-original-name");

					$checkbox.on("ifChecked", function (event) {
						$hiddenInput.attr("data-aefis-object", "");
						$hiddenInput.attr("name", originalName + "_hidden");
					});
					$checkbox.on("ifUnchecked", function (event) {
						$hiddenInput.attr("data-aefis-object", original);
						$hiddenInput.attr("name", originalName);
					});
				});
		}
	};

	this.initializeSettingsToggle = function () {
		if ($(document).find("form.aefis-settings-form").length) {
			$("form.aefis-settings-form")
				.find("input.aefis-setting-toggle")
				.each(function () {
					var $checkbox = $(this);
					var name = $checkbox.attr("name");
					var id = $checkbox.attr("id");
					var $hiddenInput = $checkbox.closest("label").find("#" + name + "_hidden"); //$('#' + name + '_hidden');

					var object = $hiddenInput.attr("data-aefis-object");
					var original = $hiddenInput.attr("data-aefis-original-object");
					var originalName = $hiddenInput.attr("data-aefis-original-name");
					$checkbox.on("click", function (event) {
						if ($checkbox.is(":checked")) {
							$hiddenInput.attr("data-aefis-object", "");
							$hiddenInput.attr("name", originalName + "_hidden");
							$checkbox.attr("name", originalName);
						} else {
							$hiddenInput.attr("data-aefis-object", original);
							$hiddenInput.attr("name", originalName);
							$checkbox.attr("name", originalName + "_hidden");
						}
					});
				});
		}
	};

	this.initializeAefisTagPopover = function () {
		$(".aefis-tag-popover").each(function () {
			var $obj = $(this);
			var name = $obj.attr("data-aefis-tag-name");
			var code = $obj.attr("data-aefis-tag-code");
			var entity = $obj.attr("data-aefis-tag-entity");
			var css = $obj.attr("data-aefis-tag-css");
			var id = $obj.attr("data-aefis-tag-id");
			var title = code ? '<i class="fa fa-tag fa-fw" aria-hidden="true" ></i>' + code : null;
			var contentHtml = "";
			var mainBusinessObject = "";

			if (entity == "Course") {
				mainBusinessObject = "AefisCourse";
			} else if (entity == "Syllabus") {
				mainBusinessObject = "AefisSyllabus";
			} else if (entity == "CourseSection") {
				mainBusinessObject = "AefisCourseSection";
			} else if (entity == "Program") {
				mainBusinessObject = "AefisProgram";
			}

			if (mainBusinessObject != "") {
				contentHtml =
					'<a target="_new" href="index.cfm/page/' +
					mainBusinessObject +
					".home?" +
					entity +
					"Id=" +
					id +
					'"><u>' +
					name +
					"</u> </a><br/><br/><strong>Type:&nbsp;</strong>" +
					entity +
					"</span>";
			} else {
				contentHtml = name + "<br/><br/><strong>Type:&nbsp;</strong>" + entity + "</span>";
			}

			$obj.addClass(css).addClass("aefis-popover");

			$obj.popover({
				trigger: "click",
				html: true,
				content: contentHtml,
				title: title,
				placement: "top",
				toggle: "popover",
				container: "body"
			});

			$(".aefis-tag-popover")
				.off("click")
				.on("click", function () {
					$(this).popover("show");
					$(".aefis-tag-popover").not(this).popover("hide");
				});

			$("body")
				.off("click")
				.on("click", function (e) {
					if (!$(".aefis-tag-popover").is(e.target)) {
						$(".aefis-tag-popover").popover("hide");
					}
				});
		});
	};

	this.toggleItem = function (el) {
		var $obj = $(el);
		var hideId = $obj.attr("data-aefis-hide-id");
		var showId = $obj.attr("data-aefis-show-id");
		var focus = $obj.attr("data-aefis-focus-id");

		$(hideId)
			.hide()
			.promise()
			.done(function () {
				$(showId).show();
				if (focus) {
					$(focus).focus();
				}
			});
	};

	this.toggleManagerSearch = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var $parent = $obj.parent();
		var target = $obj.attr("data-aefis-target");
		var $target = $(target);
		var isOpen = false;

		if ($target.parent().hasClass("twitter-typeahead")) {
			$target = $target.parent().find("input.aefis-typeahead-generated-field");
		}

		if (!$target.hasClass("aefis-manager-search--active")) {
			$parent
				.find("input:not(.aefis-list-filter-field)")
				.removeClass("aefis-manager-search--inactive")
				.addClass("aefis-manager-search--active");
			// $target.find('input').addClass('aefis-manager-search--active');
			isOpen = true;
		} else {
			$parent
				.find("input:not(.aefis-list-filter-field)")
				.removeClass("aefis-manager-search--active")
				.addClass("aefis-manager-search--inactive");
			// $target.find('input').addClass('aefis-manager-search--inactive');
		}
		if (url) {
			var menuItemFavorites = {
				ExpandManagerSearch: isOpen
			};
			new aefis.ApiWrapper().call(url, {
				data: JSON.stringify(menuItemFavorites),
				type: "POST",
				onSuccess: function () {
					//
				},
				onError: function (jqXhr, error) {
					that.userError("Unable to save your search preference.");
					return false;
				}
			});
		}
	};

	this.documentArtifactPreview = function (el, documentUrl, target, filename) {
		var $obj = $(el);
		if (!target) {
			var target = "aefis-object-preview-iframe";
		}
		var $target = $("#" + target);
		if (!documentUrl) {
			var documentUrl = $obj.attr("data-aefis-document-url");
		}
		var ifrm = document.getElementById(target);
		ifrm = ifrm.contentWindow || ifrm.contentDocument.document || ifrm.contentDocument;
		if (ifrm && ifrm.aefis) {
			var extension = "";
			var extensionArray = ["avi", "flv", "mov", "mp4", "wmv", "aac", "flac", "ogg", "wma"];
			var audioExtensionArray = ["aac", "m4a", "mp3", "wav"];
			var exclusionExtensionArray = ["zip"];
			if (documentUrl) {
				if (filename) {
					var nameArray = filename.split(".");
					extension = nameArray[nameArray.length - 1];
				}
			}
			if (documentUrl) {
				if (exclusionExtensionArray.indexOf(extension.toLowerCase()) > -1) {
					var options = {
						title: "File Type Not Supported",
						content:
							"We attempted to preview the file.  Unfortunately, the file type <strong>" +
							extension +
							"</strong> is not supported.  However, you may download the file.<br/><br/>Would you like to download the file?",
						confirmAction: function () {
							window.location = documentUrl;
						},
						confirmActionName: "Yes, Download File",
						cancelActionName: "No, Cancel",
						onSuccess: function () {}
					};
					ifrm.aefis.ui.confirm(options);
				} else if (extensionArray.indexOf(extension.toLowerCase()) > -1) {
					var divStyle = "margin-top:50px;margin:50px;height: calc(100vh - 150px);";
					ifrm.aefis.ui.audioVideoPlayer(
						"",
						documentUrl,
						$target,
						true,
						extension,
						divStyle
					);
				} else if (audioExtensionArray.indexOf(extension.toLowerCase()) > -1) {
					var divStyle = "margin-top:50px;margin-left: 400px;";
					ifrm.aefis.ui.audioPlayer("", documentUrl, $target, true, extension, divStyle);
				} else {
					ifrm.aefis.ui.filePreview(el, documentUrl, $target, true);
				}
			}
		}
	};

	this.audioPlayer = function (
		el,
		documentUrl,
		$target,
		targetIsIframe,
		extension,
		divStyle,
		append
	) {
		$target.find("audio").parent().remove();
		var content =
			"<div style='" +
			divStyle +
			"' \
                            ><figure><figcaption style='padding:8px;color:#000000;width:125px;background:#f5f5f5;border-radius:4px;margin-bottom:16px;margin-left:20px;'>Listen to the audio file:</figcaption><audio id='audio-player' controls src=" +
			documentUrl +
			">\
      				To listen to this audio please enable JavaScript, and consider upgrading to a web browser that \
    			supports HTML5 audio\
                            </audio></figure>\
                        </div>\
                        ";

		if (!$target) {
			var options = {
				size: "full",
				title: "File Preview",
				titleIconClass: "fa fa-eye fa-fw",
				content: content
			};
			this.modalDialog(options);
		} else {
			if (targetIsIframe) {
				if (append) {
					$("body").append(content);
				} else {
					$("body").html(content);
				}
			} else {
				if (append) {
					$target.append(content);
				} else {
					$target.html(content);
				}
			}
		}
		return false;
	};

	this.audioVideoPlayer = function (
		el,
		documentUrl,
		$target,
		targetIsIframe,
		extension,
		divStyle,
		append
	) {
		$target.find("video").parent().remove();
		var content =
			"<div style='" +
			divStyle +
			"' \
                            ><video id='av-player' class='video-js' style='width: 100%;height:100%;' controls autoplay data-setup='{}'>\
                              <source src=" +
			documentUrl +
			" type='video/mp4'>\
					<p class='vjs-no-js'>\
      				To view this video please enable JavaScript, and consider upgrading to a web browser that \
    <a href='https://videojs.com/html5-video-support/' target='_blank'>supports HTML5 video</a>\
    </p>\
                            </video>\
                        </div>\
                        ";

		if (!$target) {
			var options = {
				size: "full",
				title: "File Preview",
				titleIconClass: "fa fa-eye fa-fw",
				content: content
			};
			this.modalDialog(options);
		} else {
			if (targetIsIframe) {
				if (append) {
					$("body").append(content);
				} else {
					$("body").html(content);
				}
			} else {
				if (append) {
					$target.append(content);
				} else {
					$target.html(content);
				}
			}
		}
		var options = {};
		var player = videojs(
			document.querySelector(".video-js"),
			{
				suppressNotSupportedError: true,
				responsive: true
			},
			function onPlayerReady() {
				this.play();
			}
		);
		return false;
	};

	this.filePreview = function (el, documentUrl, $target, targetIsIframe, appendToEnd = false) {
		var documentPath = $(el).attr("href");
		var $obj = $(el);
		var title = $obj.attr("data-aefis-title");
		if (documentUrl) {
			documentPath = documentUrl;
		}
		var previewUrl = "index.cfm/page/AefisDocument.preview?";
		var docurl = previewUrl + "documentUrl=" + encodeURIComponent(documentPath);
		var content =
			'<iframe title="Document Preview" id="heliocampus-document-preview-iframe" width="100vh" height="100vh" style="width: 100%;height:100%;" src="' +
			docurl +
			'" />';

		if (!$target) {
			content =
				'<iframe title="Document Preview" id="heliocampus-document-preview-iframe" width="100vh" height="100vh" style="width: 100%;height:calc(100vh - 100px)" src="' +
				docurl +
				'" />';
			var options = {
				size: "full",
				title: "File Preview",
				titleIconClass: "fa fa-eye fa-fw",
				content: content
			};
			this.modalDialog(options);
		} else {
			if (targetIsIframe) {
				$("body").html(content);
			} else {
				if (appendToEnd) {
					$target.append(content);
				} else {
					$target.html(content);
				}
			}
		}
		return false;
	};

	this.closeAllPopovers = function () {
		$(".aefis-popover, .aefis-token-popover, .aefis-interactive-popover").popover("hide");
	};

	this.initializeAefisInteractivePopover = function () {
		$(".aefis-interactive-popover:not(.aefis-initialized)").each(function () {
			var $popover = $(this);
			var url = $popover.attr("data-aefis-datasource");
			var placement = $popover.attr("data-aefis-placement");
			var content = $popover.attr("data-aefis-content");
			var popoverId = $popover.attr("data-popover-id");
			var optionItem =
				'<div class="aefis-export-close-container"><a href="javascript:void(0);" tabindex=0 class="aefis-popover-close" aria-label="close popover"><i class="fa fa-times fa-fw muted" aria-hidden="true" ></i></a></div>';
			var title = $popover.attr("data-aefis-title");

			if (!placement) {
				placement = "top";
			}

			var popoverContent = optionItem;
			popoverContent += content;
			$popover.attr("aria-expanded", false);
			$popover.popover({
				html: true,
				trigger: "manual",
				toggle: "popover",
				placement: placement,
				container: "body",
				title: title,
				content: popoverContent
			});

			$popover.on("shown", function () {
				$popover.attr("aria-expanded", true);
				$("a.aefis-popover-close")
					.off("click")
					.on("click", function (e) {
						e.stopPropagation();
						$popover.popover("hide");
					});
			});
			$popover.on("hide", function () {
				$popover.attr("aria-expanded", false);
			});
			$popover.addClass("aefis-initialized");
		});

		$(".aefis-interactive-popover")
			.off("click")
			.on("click", function () {
				$(this).popover("show");
				$(".aefis-interactive-popover").not(this).popover("hide");
			});
	};

	this.resetBusinessObjectSetting = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		new aefis.ApiWrapper().call(url, {
			beforeSend: function () {
				aefis.ui.initializeAjaxDisabled();
				$obj.button("loading");
			},
			onSuccess: function (data) {
				that.closeAllPopovers();
				var settingsForm = $(document).find("form").hasClass("aefis-settings-form");
				var settingsPage = $("div.aefis-settings-page");
				showFullPageLoadingMask("Refreshing Settings");
				$("body").addClass("no-overflow");
				window.location.reload();
			},
			onError: function () {
				aefis.ui.initializeAjaxEnable();
			}
		});
	};

	this.lockBusinessObjectSetting = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");

		var dialogOptions = {
			title: "Lock Setting",
			content:
				"You are about to <strong>lock</strong> this setting.<br/><br/>By locking this setting, all previously saved data for this setting at lower levels will be removed and can not be recovered. These lower level settings will instead inherit the value of this setting.<br/><br/>Are you sure?",
			titleIconClass: "lock",
			successMessage: "The setting was locked.",
			confirmActionName: "Lock Setting",
			confirmAction: url,
			onConfirm: function () {
				that.closeAllPopovers();
			},
			onSuccess: function () {
				that.closeAllPopovers();
				var settingsForm = $(document).find("form").hasClass("aefis-settings-form");
				var settingsPage = $("div.aefis-settings-page");
				showFullPageLoadingMask("Refreshing Settings");
				$("body").addClass("no-overflow");
				window.location.reload();
			}
		};

		that.confirm(dialogOptions);
	};

	this.unlockBusinessObjectSetting = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");

		var dialogOptions = {
			title: "Unlock Setting",
			content:
				"You are about to <strong>unlock</strong> this setting. Once unlocked, this setting can be edited by lower levels.<br/><br/>Are you sure?",
			titleIconClass: "lock",
			successMessage: "The setting was unlocked.",
			confirmActionName: "Unlock Setting",
			confirmAction: url,
			onConfirm: function () {
				that.closeAllPopovers();
			},
			onSuccess: function () {
				that.closeAllPopovers();
				var settingsForm = $(document).find("form").hasClass("aefis-settings-form");
				var settingsPage = $("div.aefis-settings-page");
				showFullPageLoadingMask("Refreshing Settings");
				$("body").addClass("no-overflow");
				window.location.reload();
			}
		};

		that.confirm(dialogOptions);
	};

	this.deleteTag = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var customTag = $obj.attr("data-aefis-tag-type");
		var $parent = $obj.parent();
		$parent.addClass("animated flipOutX");
		var $form = $obj.closest("form");
		var refreshId = $form.attr("data-aefis-refresh");
		new aefis.ApiWrapper().call(url, {
			beforeSend: function () {
				aefis.ui.initializeAjaxDisabled();
				$obj.addClass("disabled").prop("disabled", "disabled");
			},
			onComplete: function () {
				aefis.ui.initializeAjaxEnable();
			},
			onSuccess: function (data) {
				that.doAfterAnimationEnds($parent, function () {
					$parent.remove();
				});
				if (refreshId) {
					$(refreshId).trigger("refresh");
				}
			},
			onError: function () {
				$parent.addClass("animated flipInX");
			}
		});
	};

	this.addTag = function (el) {
		var $button = $(el);
		var target = $button.attr("data-aefis-target");
		var $target = $(target);
		var url = $button.attr("data-aefis-datasource");
		var $form = $button.closest("form");
		var refreshId = $form.attr("data-aefis-refresh");

		if ($target && $target.val() && url) {
			var tag = $target.val();
			new aefis.ApiWrapper().call(url, {
				data: { Tag: tag },
				beforeSend: function () {
					$button.button("loading");
					$("span.twitter-typeahead input").each(function () {
						$(this).attr("disabled", "disabled").addClass("disabled");
					});
				},
				onComplete: function () {
					$button.button("reset");
					$("span.twitter-typeahead input")
						.removeAttr("disabled")
						.removeClass("disabled");
					$("span.twitter-typeahead input").val("");
				},
				onSuccess: function (data) {
					var $tagContainer = $("#aefis-tags-container");
					that.initializeHandlebarsTemplate($tagContainer);
					$target.val("");
					$("#aefis-false-container .aefis-field-clear").click();
					if (refreshId) {
						$(refreshId).trigger("refresh");
					}
				}
			});
		} else if ($target && $target.val()) {
			var tag = $target.val();
		}
	};

	this.initializeDropZone = function (selector) {
		if (!selector) {
			selector = "body";
		}
		$(selector)
			.find("div.dropzone:not(.dropzone-processed)")
			.each(function () {
				var $dropzone = $(this);
				var msg =
					'<div class="dz-message aefis-dropzone-message aefis-fade" role="button" aria-label="click to upload a file"><i class="fa fa-cloud-upload-alt fa-2x" aria-hidden="true" ></i> <br/>Drop files to upload (or click)</div>';
				var limit = $dropzone.attr("data-aefis-file-limit");
				if (limit && limit == 1) {
					msg =
						'<div class="dz-message aefis-dropzone-message aefis-fade" role="button" aria-label="click to upload a file"><i class="fa fa-cloud-upload-alt fa-2x" aria-hidden="true" ></i> <br/>Drop a file to upload (or click)</div>';
				}
				var trigger = $dropzone.attr("data-aefis-refresh");
				var hideMessage = $dropzone.attr("data-aefis-hide-message");
				var autoProcess = $dropzone.attr("data-aefis-autoProcess");
				var acceptedFileTypes = $dropzone.attr("data-aefis-accept-file-types");
				var url = $dropzone.attr("data-aefis-action");
				var initFunctionString = $dropzone.attr("data-aefis-init-callback"); // called with the dropzone obj as a parameter after init() is completed
				var that = $dropzone;
				if (!limit) {
					limit = 6;
				}
				if (!autoProcess) {
					autoProcess = true;
				} else {
					autoProcess = false;
				}
				var $dropzone = $dropzone;
				var custom_message = $dropzone.attr("data-aefis-message");
				if (typeof custom_message != undefined && custom_message != null) {
					msg = custom_message;
				}
				$dropzone.append(msg);
				var options = {
					init: function () {
						this.on("success", function (file, object) {
							var returnContent = file.xhr.getResponseHeader("Content-Location");
							var dataReturnField = $(that).attr("data-aefis-value-field");

							if (dataReturnField) {
								$("#" + dataReturnField).val(returnContent);
							}
							$("#aefis-save-artifact-button").removeAttr("disabled");
							$("#aefis-dropzone").trigger("update");
							if (trigger) {
								$(trigger).trigger("refresh");
							}
							if (typeof object == undefined && object == null) {
								object = {};
							}
							$dropzone.trigger("completed", [object, file]);
							if (hideMessage) {
								$(selector).find(".dz-message").hide();
							}
						});

						this.on("error", function (file, errorMessage, xhr) {
							var errorText = $(errorMessage).find(".label").filter(function () {
									return $(this).html() === "Message";
								})
								.next("td")
								.html();
							$(file.previewElement)
								.addClass("dz-error")
								.find(".dz-error-message")
								.text(errorText);
						});

						this.on("removedfile", function (file, object) {
							if (hideMessage) {
								$(selector).find(".dz-message").show();
							}
						});

						this.on("processing", function (file, object) {
							if (hideMessage) {
								$(selector).find(".dz-message").hide();
							}
						});

						this.on("canceled", function (file, object) {
							if (hideMessage) {
								$(selector).find(".dz-message").show();
							}
							$dropzone.trigger("canceled", [object]);
						});
						/* THIS IS FOR ENABLING TRIGGERING OF CALLBACK ON EACH FILE UPLOAD... GOOD FOR ADDING DESCRIPTIONS, ETC...
					this.on("sending", function(file, xhr, formData) {
						var sendFunctionString = $(that).attr('data-aefis-sending-callback');
				console.log(sendFunctionString);
						if ( sendFunctionString !== undefined ) {
							var sendFunction = aefis.util.getFunctionByStringName(sendFunctionString);
				console.log(sendFunction);

							sendFunction.apply(undefined,[file,xhr,formData]);
						}
						//formData.append('myfoo', 'foo data');
					});
                    */
						if (initFunctionString) {
							var initFunction =
								aefis.util.getFunctionByStringName(initFunctionString);
							if (initFunction) {
								initFunction.apply(undefined, [$dropzone]);
							}
						}
					},
					url: url,
					addRemoveLinks: false,
					maxFiles: limit,
					autoProcessQueue: autoProcess,
					timeout: 120000,
					clickable: true
				};

				if (acceptedFileTypes) {
					options["acceptedFiles"] = acceptedFileTypes;
				}

				$dropzone.dropzone(options);
				$dropzone.addClass("dropzone-processed");
			});
	};

	this.initializeExportPopover = function () {
		$(".aefis-export-popover").each(function () {
			var $popover = $(this);
			//var title = 'Export Options <a href="javascript:void(0);" class="aefis-export-popover-close"><i class="fa fa-times fa-fw muted"></i></a>';
			var url = $popover.attr("data-aefis-datasource");
			var options = $popover.attr("data-aefis-export-options");
			var title = $popover.attr("data-aefis-export-title");
			var optionItem =
				'<div class="aefis-export-close-container"><a href="javascript:void(0);" class="aefis-export-popover-close"><i class="fa fa-times fa-fw muted" aria-hidden="true" ></i></a></div>';
			$popover.addClass("aefis-object-action").addClass("export");

			if (!options) {
				options = "csv,print,pdf";
			}
			if (!title) {
				title = "";
			}

			$.each(options.split(","), function () {
				var $rf = this;
				optionItem =
					optionItem +
					'<li><a href="' +
					url +
					"&rf=" +
					$rf +
					'" class="aefis-export-option-item aefis-object-action ' +
					$rf +
					'" target="aefis-hidden-iframe">' +
					$rf +
					"</a></li>";
			});

			var popoverContent =
				'<div class="aefis-export-options-list"><ul>' + optionItem + "</ul></div>";

			$popover.popover({
				html: true,
				trigger: "manual",
				toggle: "popover",
				placement: "top",
				container: "body",
				title: '<span style="padding-right:10px;">' + title + "</span>",
				content: popoverContent
			});

			$popover.on("shown", function () {
				$("a.aefis-export-popover-close")
					.off("click")
					.on("click", function (e) {
						e.stopPropagation();
						$popover.popover("hide");
					});

				$(".aefis-export-option-item")
					.off("click")
					.on("click", function () {
						that.initializeCSVDownloadNotification();
						$popover.popover("hide");
					});
			});
		});

		$(".aefis-export-popover")
			.off("click")
			.on("click", function () {
				$(this).popover("show");
				$(".aefis-export-popover").not(this).popover("hide");
			});
	};

	this.toggleInputHelp = function (el) {
		var $obj = $("#" + el);
		if ($obj.is(":visible")) {
			$obj.fadeOut("fast");
		} else {
			$obj.fadeIn("fast");
		}
	};

	this.scrollToDashboardElement = function (el, offset) {
		$("#aefis-topnav-notification-dropdown a").parent().toggleClass("open");
		that.scrollToElement(el, offset);
	};

	this.scrollToElement = function (el, offset) {
		var $obj = $(el);
		var obj_offset = $obj.offset();

		if (obj_offset) {
			var obj_top = obj_offset.top;

			if (offset) {
				obj_top = obj_top - offset;
				if (obj_top < 0) {
					obj_top = 0;
				}
			}
			obj_top = obj_top + "px";

			$("html:not(:animated),body:not(:animated)").animate(
				{
					scrollTop: obj_top
				},
				900,
				function () {
					//window.location.hash=el;
				}
			);
		}
		//return false;
	};

	this.setSelectPickerAriaOptions = function (el) {
		var $obj = $(el);
		var $button = $('button[data-id="' + $obj.attr("id") + '"]').first();
		if ($button.length > 0) {
			$button.attr("role", "combobox");
			$button.attr("aria-expanded", false);
			$button.attr("aria-label", $obj.attr("aria-label"));
		}
	};

	this.setSelectPickerDefaultValue = function (el) {
		var $obj = $(el);
		var value = $obj.attr("data-select-default-value");
		if (!value) {
			value = $obj.attr("data-aefis-default-value");
		}
		if (value) {
			$obj.selectpicker("val", value); //set default value if defined
			$obj.selectpicker("refresh");
		}
	};

	this.setSelectPickerNullOption = function (el) {
		var $obj = $(el);
		var value = $obj.attr("data-aefis-select-null-option");
		if (value) {
			$obj.append(
				$("<option>", {
					value: "",
					text: value
				})
			);
			$obj.selectpicker("refresh");
		}
	};

	this.initializeEditable = function (container) {
		var $container = $(".aefis-editable");
		if (container) {
			$container = $(container);
		}
		$container.each(function () {
			var $item = $(this);
			var refreshContainer = $item.attr("data-aefis-refresh");

			$item.editable({
				validate: function (value) {
					if ($(this).hasClass("required")) {
						if ($.trim(value) == "") {
							return "This field is required.";
						}
					}
				},
				success: function (response, newValue) {
					var target = $item.attr("data-aefis-target");
					if (target) {
						var $target = $(target);
						$target.html(newValue);
					}

					var successMsg = $(this).attr("data-aefis-success");
					if (successMsg !== "") {
						aefis.ui.userSuccess(successMsg, true);
					}
				},
				error: function (errors) {
					aefis.ui.userError("There was an error."); //todo: replace with actual error from server
				}
			});
		});
	};

	this.loadajaxlist = function (windowurl) {
		// *** THIS IS A FUNCTION TO SUPPORT TRANSITION
		// *** PROVIDES SUPPORT FOR LEGACY FUNCTION.  REMOVE WHEN POSSIBLE
		$.get(windowurl, function (data) {
			$("#listframe").html(data);
		});
	};
	this.initializeAefisProgressBar = function () {
		$(".aefis-progress-bar").each(function () {
			var $obj = $(this);
			that.aefisProgressBar($obj);
		});
	};

	this.initializeSparkline = function ($rootContainer) {
		if (!$rootContainer) {
			$rootContainer = $("body");
		}
		Highcharts.SparkLine = function (options, callback) {
			var defaultOptions = {
				chart: {
					renderTo: (options.chart && options.chart.renderTo) || this,
					backgroundColor: null,
					borderWidth: 0,
					type: "area",
					margin: [2, 0, 2, 0],
					//					width: 120,
					//					height: 20,
					style: {
						overflow: "visible"
					},
					skipClone: true
				},
				title: {
					text: ""
				},
				credits: {
					enabled: false
				},
				xAxis: {
					labels: {
						enabled: false
					},
					title: {
						text: null
					},
					startOnTick: false,
					endOnTick: false,
					tickPositions: []
				},

				yAxis: {
					alternateGridColor: null,
					endOnTick: false,
					startOnTick: false,
					labels: {
						enabled: false
					},
					title: {
						text: null
					},
					tickPositions: [0]
				},
				legend: {
					enabled: false
				},
				tooltip: {
					backgroundColor: null,
					borderWidth: 0,
					shadow: false,
					useHTML: true,
					hideDelay: 0,
					//pointFormat: "{point.y:.0f}",
					shared: true,
					padding: 0,
					positioner: function (w, h, point) {
						return { x: point.plotX - w / 2, y: point.plotY - h };
					}
				},
				plotOptions: {
					series: {
						animation: false,
						lineWidth: 1,
						shadow: false,
						states: {
							hover: {
								lineWidth: 1
							}
						},
						marker: {
							radius: 1,
							states: {
								hover: {
									radius: 2
								}
							}
						},
						fillOpacity: 0.25
					},
					column: {
						borderColor: "silver"
					}
				},
				exporting: {
					enabled: false
				}
			};
			options = Highcharts.merge(defaultOptions, options);
			return new Highcharts.Chart(options, callback);
		};

		var start = +new Date(),
			$sparkContainers = $rootContainer.find(
				"td[data-aefis-sparkline], div[data-aefis-sparkline]"
			),
			fullLen = $sparkContainers.length,
			n = 0;
		// Creating many sparkline charts is quite fast in modern browsers, but IE8 and mobile
		// can take some seconds, so we split the input into chunks and apply them in timeouts
		// in order avoid locking up the browser process and allow interaction.
		function doChunk() {
			Highcharts.setOptions({
				colors: [
					"#1f77b4",
					"#aec7e8",
					"#e377c2",
					"#f7b6d2",
					"#2ca02c",
					"#98df8a",
					"#7f7f7f",
					"#c7c7c7",
					"#bcbd22",
					"#dbdb8d",
					"#17becf",
					"#9edae5",
					"#8c564b",
					"#c49c94",
					"#ff7f0e",
					"#ffbb78",
					"#1f77b4",
					"#aec7e8",
					"#2ca02c",
					"#98df8a",
					"#d62728",
					"#ff9896",
					"#9467bd",
					"#c5b0d5"
				]
			});
			var time = +new Date(),
				i,
				len = $sparkContainers.length,
				arr;

			for (i = 0; i < len; i += 1) {
				var $container = $($sparkContainers[i]);
				var series = $container.data("aefis-sparkline");
				var formatString = "2f";
				if ($container.attr("data-aefis-sparkline-format-string")) {
					formatString = $container.attr("data-aefis-sparkline-format-string");
				}

				var options = {
					series: series,
					tooltip: {
						//headerFormat: '<span>{point.key}:</span><br/>',
						headerFormat: "",
						pointFormat:
							'{point.name}<div style="color:{series.color};">{series.name}:<b style="color:black;">{point.y:.' +
							formatString +
							"}</b></div>"
					},
					plotOptions: {}
				};

				var chart = {};

				if ($container.data("aefis-sparkline-type")) {
					var chartType = $container.data("aefis-sparkline-type");
					if (chartType == "stacked") {
						chart.type = "column";
						options.plotOptions.column = { stacking: "normal" };
					} else if (chartType == "stackedbar") {
						chart.type = "bar";
						if ($container.attr("data-aefis-sparkline-show-datalabels") == "true") {
							options.plotOptions.series = {
								stacking: "normal",
								dataLabels: {
									enabled: true,
									color: "black",
									formatter: function () {
										return (this.y == 0) ? "" : this.percentage.toLocaleString("en-US", { maximumFractionDigits: 1, minimumFractionDigits: 1 })+'%';
									}
								}
							};
						} else {
							options.plotOptions.series = { stacking: "normal" };
						}
					} else {
						chart.type = chartType;
					}
				} else {
					chart.type = "column";
				}
				if ($container.data("aefis-sparkline-height")) {
					chart.height = $container.data("aefis-sparkline-height");
				}
				if ($container.data("aefis-sparkline-width")) {
					chart.width = $container.data("aefis-sparkline-width");
				}
				if ($container.data("aefis-sparkline-color")) {
					options.colors = $container.data("aefis-sparkline-color");
				}
				options.chart = chart;
				$container.highcharts("SparkLine", options);

				n += 1;

				// If the process takes too much time, run a timeout to allow interaction with the browser
				if (new Date() - time > 500) {
					$sparkContainers.splice(0, i + 1);
					setTimeout(doChunk, 0);
					break;
				}
			}
		}
		doChunk();
	};

	this.initializeCircleChart = function (el) {
		var $obj = $(el);
		var useColors = $obj.attr("data-aefis-use-colors");
		var newBorderSize = $obj.attr("data-aefis-border-size");
		var totalPercentCompleted = $obj.attr("data-percent");
		var fgcolor = "#556b2f";
		var bordersize = 5;
		if (!$obj.hasClass("aefis-circle-rendered")) {
			if (bordersize) {
				bordersize = newBorderSize;
			}
			if (useColors) {
				if (totalPercentCompleted > 0 && totalPercentCompleted <= 33) {
					fgcolor = "#d9534f"; //red
				} else if (totalPercentCompleted > 33 && totalPercentCompleted <= 66) {
					fgcolor = "#f0ad4e"; //orange
				} else {
					fgcolor = "#5cb85c"; //green
				}
			}

			$obj.circliful({
				fgcolor: fgcolor,
				bordersize: bordersize,
				animationstep: aefis.app.isStaticPage() ? 0 : 1
			});
			$obj.addClass("aefis-circle-rendered");
		}
	};

	this.initializeDesignerToolbarTemplate = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var targetid = $obj.attr("id");
		var source = $("#aefis-designer-toolbar-template").html();
		var template = Handlebars.compile(source);
		var $target = $("#" + targetid);
		if (url) {
			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					aefis.ui.initializeAjaxDisabled();
				},
				onComplete: function () {
					aefis.ui.initializeAjaxEnable();
				},
				onSuccess: function (data) {
					$target.html(template({ records: data }));
					$target.trigger("completed");
					$target
						.contents()
						.appendTo("#aefis-form-designer-container section.toolbar-content");
				}
			});
		} else {
			$target.html(template());
			$target.trigger("completed");
			$target.contents().appendTo("#aefis-form-designer-container section.toolbar-content");
		}
	};

	this.toggleAefisRightDrawer = function (title, crunchContent, freezeScrolling) {
		var $drawer = $("#aefis-ui-drawer--right");
		var $mainContentContainer = $("#aefis-main-content-container--content");
		if (title) {
			$drawer.find("#aefis-ui-drawer--right--title").html(title);
		}
		if (!$drawer.hasClass("aefis-ui-drawer--right--open")) {
			$("#aefis-form-designer-content-container").css("marginRight", "450px");
			$drawer.addClass("aefis-ui-drawer--right--open");
			$(window).trigger("AefisRightDrawer:opened");
			if (crunchContent) {
				$mainContentContainer.addClass("aefis-ui-drawer--right--open");
			}
			if (freezeScrolling) {
				$("body").addClass("no-overflow");
			}
			$mainContentContainer.attr("aria-hidden", true);
			$drawer.attr("aria-hidden", false);
			setTimeout(function () {
				$drawer.find("button").first().focus();
				$drawer.keydown(function (e) {
					trapTabKey($(this), e);
				});
			}, 500);
		} else {
			$("#aefis-form-designer-content-container").css("marginRight", "0px");
			$drawer.removeClass("aefis-ui-drawer--right--open");
			$(window).trigger("AefisRightDrawer:closed");
			$mainContentContainer.removeClass("aefis-ui-drawer--right--open");
			$("body").removeClass("no-overflow");
			$drawer.attr("aria-hidden", true);
			$mainContentContainer.attr("aria-hidden", false);
		}
	};

	this.isRightDrawerOpen = function () {
		var $drawer = $("#aefis-ui-drawer--right");
		if (!$drawer.hasClass("aefis-ui-drawer--right--open")) {
			return false;
		} else {
			return true;
		}
	};

	this.showRightSidebarProgress = function () {
		var $progressBar = $("#aefis-form-designer--right-drawer--load-progress");
		$progressBar.fadeIn();
	};

	this.hideRightSidebarProgress = function () {
		var $progressBar = $("#aefis-form-designer--right-drawer--load-progress");
		$progressBar.fadeOut();
	};

	this.showObjectPreviewRightSidebarProgress = function () {
		var $progressBar = $("#aefis-object-preview--right-drawer--progress");
		$progressBar.fadeIn();
	};

	this.hideObjectPreviewRightSidebarProgress = function () {
		var $progressBar = $("#aefis-object-preview--right-drawer--progress");
		$progressBar.fadeOut();
	};

	this.objectPreviewRightDrawerState = function (state, clearContent) {
		var $drawer = $("#aefis-object-preview--right-drawer");
		var $container = $drawer.find("#aefis-object-preview--right-drawer--content");
		var $content = $drawer.find("#aefis-object-preview--right-drawer--content-container");
		var $skeletonContent = $drawer.find(".skeleton-content");
		var hasContent = false;
		if ($content.find(".aefis-sidebar--list--header").length) {
			hasContent = true;
		}
		if (typeof clearContent === "undefined") {
			clearContent = true;
		}

		if (state == "loading") {
			if (!hasContent) {
				$content
					.fadeOut("fast")
					.promise()
					.done(function () {
						if (clearContent) {
							$content.html("");
						}
						$skeletonContent.fadeIn("fast");
					});
			}
			$drawer
				.find("header button:not(.aefis-notification-menu--toggle)")
				.addClass("disabled")
				.attr("disabled", "disabled");
			that.showObjectPreviewRightSidebarProgress();
		}

		if (state == "loaded") {
			that.hideObjectPreviewRightSidebarProgress();
			$skeletonContent.fadeOut("fast", function () {
				$content.fadeIn("fast");
			});
			$drawer.find("header button").removeClass("disabled").removeAttr("disabled");
		}
	};

	this.formDesignerRightDrawerState = function (state) {
		var $drawer = $("#aefis-form-designer--right-drawer");
		var $container = $("#aefis-form-designer--right-drawer--content-container");
		if (state == "saving") {
			that.showRightSidebarProgress();
			that.loadingIndicator($container, "Saving...");
			$drawer
				.find("header button:not(.aefis-notification-menu--toggle)")
				.addClass("disabled")
				.attr("disabled", "disabled");
		}

		if (state == "saved") {
			that.hideRightSidebarProgress();
			$container.trigger("AefisLoadingIndicator:hidden");
			$drawer.find("header button").removeClass("disabled").removeAttr("disabled");
		}
	};

	this.toggleObjectPreviewRightDrawer = function () {
		var $drawer = $("#aefis-object-preview--right-drawer");
		if (!$drawer.hasClass("aefis-object-preview--right-drawer--open")) {
			$drawer.addClass("aefis-object-preview--right-drawer--open");
			$drawer.trigger("opening");
			that.doAfterTransitionEnds($drawer, function () {
				$drawer.trigger("opened");
				$drawer.focus();
			});
		} else {
			$drawer.removeClass("aefis-object-preview--right-drawer--open");
			$drawer.trigger("closing");
			that.doAfterTransitionEnds($drawer, function () {
				$drawer.trigger("closed");
			});
		}
		that.toggleAriaAttribute($drawer, "aria-hidden", "true,false");
		$drawer.keyup(function (e) {
			if (e.key == "Escape") {
				if (aefis.ui.isObjectPreviewRightDrawerOpen) {
					aefis.ui.toggleObjectPreviewRightDrawer();
				}
			}
		});
	};

	this.isObjectPreviewRightDrawerOpen = function () {
		var $drawer = $("#aefis-object-preview--right-drawer");
		if ($drawer.hasClass("aefis-object-preview--right-drawer--open")) {
			return true;
		}

		return false;
	};

	this.toggleSidebarDetails = function (el, useClass) {
		var $obj = $(el);
		var $container = $("#" + $obj.attr("data-aefis-hidden-content-id"));

		if (useClass) {
			var $container = $("." + $obj.attr("data-aefis-hidden-content-id"));
		}

		if ($obj.hasClass("down")) {
			$obj.removeClass("down");
			$container.addClass("aefis-zero-height-container");
			$obj.focus();
		} else {
			$obj.addClass("down");
			$container.removeClass("aefis-zero-height-container");
			$container.focus();
		}
		aefis.ui.toggleAriaAttribute($container, "aria-hidden", "true,false");
	};

	this.reviewPreviousForm = function (el, forceOpen) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var title = $obj.attr("data-aefis-title");
		var $iframe = $("#aefis-object-preview-iframe");
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var $businessObjectNameContainer = $container.find("#aefis-current-business-object-name");
		var $businessObjectIdContainer = $container.find("#aefis-current-business-object-id");
		if ($businessObjectNameContainer.length && $businessObjectIdContainer.length) {
			var businessObjectId = $businessObjectIdContainer.val();
			url += "&dataCollectionFormId=" + businessObjectId;

			var options = {
				title: title,
				contentUrl: url,
				size: "small",
				titleIconClass: ""
			};

			aefis.ui.modalDialog(options);
		}
	};

	this.getFormHistoryForSidebar = function (el, forceOpen) {
		var $obj = $(el);
		var $drawer = $("#aefis-object-preview--right-drawer");
		var $iframe = $("#aefis-object-preview-iframe");
		var autoOpenSlideOut = true;
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var $globalArtifactRefreshContainer = $("#aefis-artifacts--refresh");
		var $businessObjectNameContainer = $container.find("#aefis-current-business-object-name");
		var $businessObjectIdContainer = $container.find("#aefis-current-business-object-id");
		var $titleContainer = $drawer.find("#aefis-object-preview-sidebar-container--title");
		$titleContainer.html("Form History and Actions");
		if ($businessObjectNameContainer.length && $businessObjectIdContainer.length) {
			var businessObjectName = $businessObjectNameContainer.val();
			var businessObjectId = $businessObjectIdContainer.val();
			var url = $obj.attr("data-aefis-datasource");
			var manuallyOpenSlideOut = $obj.attr("data-aefis-open-slideout");
			if (
				(manuallyOpenSlideOut && manuallyOpenSlideOut == "false") ||
				(forceOpen && forceOpen === false)
			) {
				autoOpenSlideOut = false;
			}
			url += "&dataCollectionFormId=" + businessObjectId;
			if (!that.isObjectPreviewRightDrawerOpen() && autoOpenSlideOut) {
				that.toggleObjectPreviewRightDrawer();
			}
			var templateId = $obj.attr("data-aefis-template-id");
			var $template = $container.find(templateId);
			var source = $template.html();
			var target = $obj.attr("data-aefis-target");
			var template = Handlebars.compile(source);
			var $target = $(target);
			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					aefis.ui.objectPreviewRightDrawerState("loading");
				},
				onComplete: function () {
					var $btnRefresh = $("#aefis-artifacts-sidebar--refresh-button");
					$btnRefresh.attr("data-aefis-template-id", $obj.attr("data-aefis-template-id"));
					$btnRefresh.attr("data-aefis-datasource", $obj.attr("data-aefis-datasource"));
					$btnRefresh.attr("title", $obj.attr("title"));
					$btnRefresh.prop("onclick", null).off("click");
					$btnRefresh.off("click").on("click", function () {
						that.getFormHistoryForSidebar($btnRefresh);
					});
				},
				onError: function () {
					aefis.ui.objectPreviewRightDrawerState("loaded");
				},
				onSuccess: function (data) {
					$target.html(template({ records: data }));
					setTimeout(function () {
						aefis.ui.objectPreviewRightDrawerState("loaded");
						$(window).trigger("refreshDOMObjects");
					}, 500);
				}
			});
		}
	};

	this.getFormItemContents = function (el, forceOpen) {
		var $obj = $(el);
		var $drawer = $("#aefis-object-preview--right-drawer");
		var $iframe = $("#aefis-object-preview-iframe");
		var autoOpenSlideOut = true;
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var $globalArtifactRefreshContainer = $("#aefis-artifacts--refresh");
		var $businessObjectNameContainer = $container.find("#aefis-current-business-object-name");
		var $businessObjectIdContainer = $container.find("#aefis-current-business-object-id");
		var $titleContainer = $drawer.find("#aefis-object-preview-sidebar-container--title");
		$titleContainer.html("Table of Contents");
		if ($businessObjectNameContainer.length && $businessObjectIdContainer.length) {
			var businessObjectName = $businessObjectNameContainer.val();
			var businessObjectId = $businessObjectIdContainer.val();
			var url = $obj.attr("data-aefis-datasource");
			var manuallyOpenSlideOut = $obj.attr("data-aefis-open-slideout");
			if (
				(manuallyOpenSlideOut && manuallyOpenSlideOut == "false") ||
				(forceOpen && forceOpen === false)
			) {
				autoOpenSlideOut = false;
			}
			url += "&dataCollectionFormId=" + businessObjectId;
			if (!that.isObjectPreviewRightDrawerOpen() && autoOpenSlideOut) {
				that.toggleObjectPreviewRightDrawer();
			}
			var templateId = $obj.attr("data-aefis-template-id");
			var $template = $container.find(templateId);
			var source = $template.html();
			var target = $obj.attr("data-aefis-target");
			var template = Handlebars.compile(source);
			var $target = $(target);
			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					aefis.ui.objectPreviewRightDrawerState("loading");
				},
				onComplete: function () {
					var $btnRefresh = $("#aefis-artifacts-sidebar--refresh-button");
					$btnRefresh.attr("data-aefis-template-id", $obj.attr("data-aefis-template-id"));
					$btnRefresh.attr("data-aefis-datasource", $obj.attr("data-aefis-datasource"));
					$btnRefresh.attr("title", $obj.attr("title"));
					$btnRefresh.prop("onclick", null).off("click");
					$btnRefresh.off("click").on("click", function () {
						that.getFormItemContents($btnRefresh);
					});
				},
				onError: function () {
					aefis.ui.objectPreviewRightDrawerState("loaded");
				},
				onSuccess: function (data) {
					$target.html(template({ records: data }));
					setTimeout(function () {
						aefis.ui.objectPreviewRightDrawerState("loaded");
						$(window).trigger("refreshDOMObjects");
					}, 500);
				}
			});
		}
	};

	this.addArtifactsForSidebar = function (button, onCloseFunction) {
		var $button = $(button);
		var url = $button.attr("data-aefis-datasource");
		var title = $button.attr("data-aefis-title");
		var titleIcon = $button.attr("data-aefis-title-icon");
		var size = $button.attr("data-aefis-size");
		var closeButton = $button.attr("data-aefis-show-footer-button");
		var onClose = onCloseFunction ? onCloseFunction : $button.attr("data-aefis-onclose");
		var options = {
			title: title, //todo: deprecate in favor of contentUrl
			contentUrl: url,
			size: size,
			titleIconClass: titleIcon,
			onShown: function () {
				$("#aefis-artifacts--refresh").on("refresh", function () {
					var $button = $("#aefis-artifacts-sidebar--refresh-button");
					that.getArtifactsForSidebar($button);
				});
			}
		};

		if (closeButton) {
			options["showFooterCloseButton"] = closeButton;
		}

		if (onClose) {
			options["closeCallback"] = onClose;
		}

		aefis.ui.modalDialog(options);
	};

	this.refreshArtifactsForSideBar = function () {
		var $button = $("#aefis-artifacts-sidebar--refresh-button");
		that.getArtifactsForSidebar($button);
	};

	this.getArtifactsForSidebar = function (el, forceOpen) {
		var $obj = $(el);
		var $drawer = $("#aefis-object-preview--right-drawer");
		var $iframe = $("#aefis-object-preview-iframe");
		var autoOpenSlideOut = true;
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var $globalArtifactRefreshContainer = $("#aefis-artifacts--refresh");
		var $businessObjectNameContainer = $container.find("#aefis-current-business-object-name");
		var $businessObjectIdContainer = $container.find("#aefis-current-business-object-id");
		var $titleContainer = $drawer.find("#aefis-object-preview-sidebar-container--title");
		$titleContainer.html("Attached Artifacts");
		if ($businessObjectNameContainer.length && $businessObjectIdContainer.length) {
			var businessObjectName = $businessObjectNameContainer.val();
			var businessObjectId = $businessObjectIdContainer.val();
			var url = $obj.attr("data-aefis-datasource");
			var manuallyOpenSlideOut = $obj.attr("data-aefis-open-slideout");
			if (
				(manuallyOpenSlideOut && manuallyOpenSlideOut == "false") ||
				(forceOpen && forceOpen === false)
			) {
				autoOpenSlideOut = false;
			}
			url += "&ownerType=" + businessObjectName + "&ownerId=" + businessObjectId;
			if (!that.isObjectPreviewRightDrawerOpen() && autoOpenSlideOut) {
				that.toggleObjectPreviewRightDrawer();
			}
			var templateId = $obj.attr("data-aefis-template-id");
			var $template = $container.find(templateId);
			var source = $template.html();
			var target = $obj.attr("data-aefis-target");
			var template = Handlebars.compile(source);
			var $target = $(target);
			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					aefis.ui.objectPreviewRightDrawerState("loading", false);
				},
				onComplete: function () {
					//$('#aefis-form-designer--right-drawer').find('.skeleton-content').fadeOut();
					//$target.fadeIn();
					var $btnRefresh = $("#aefis-artifacts-sidebar--refresh-button");
					$btnRefresh.attr("data-aefis-template-id", $obj.attr("data-aefis-template-id"));
					$btnRefresh.attr("data-aefis-datasource", $obj.attr("data-aefis-datasource"));
					$btnRefresh.attr("title", $obj.attr("title"));
					$btnRefresh.prop("onclick", null).off("click");
					$btnRefresh.off("click").on("click", function () {
						that.getArtifactsForSidebar($btnRefresh);
					});
				},
				onError: function () {
					aefis.ui.objectPreviewRightDrawerState("loaded");
				},
				onSuccess: function (data) {
					$target.html(template({ records: data }));
					setTimeout(function () {
						aefis.ui.objectPreviewRightDrawerState("loaded");
						$(window).trigger("refreshDOMObjects");
					}, 500);
					var totalArtifactCount = 0;
					if (data.length) {
						totalArtifactCount = data[0].TotalArtifacts;
					}
					$globalArtifactRefreshContainer.on("refresh", function () {
						if ($iframe.length) {
							$container.find("#aefis-artifacts--refresh").trigger("refresh");
						}
					});
					aefis.ui.updatePreviewObjectArtifactCount(totalArtifactCount);
				}
			});
		}
	};

	this.deleteArtifact = function (button) {
		var $button = $(button);
		var $sidebar = $("#aefis-object-preview--right-drawer");
		var title = $button.attr("data-aefis-title");
		var target = $button.attr("data-aefis-target");
		var childContainer = $button.attr("data-aefis-child-container");
		var content = $button.attr("data-aefis-content");
		var url = $button.attr("data-aefis-datasource");

		var errorMessage = $button.attr("data-aefis-error-message");
		var refresh = $button.attr("data-aefis-refresh-id");
		var confirmActionName = $button.attr("data-aefis-confirm-action-name");

		var options = {
			content: content,
			title: title,
			confirmAction: url
		};

		if (errorMessage) {
			options["errorMessage"] = errorMessage;
		}

		options["onSuccess"] = function () {
			//aefis.ui.refreshArtifactsForSideBar();
			$sidebar.find(target).remove();
			var numberOfItems = $sidebar.find(childContainer).length;
			if (numberOfItems == 0) {
				aefis.ui.refreshArtifactsForSideBar();
			}
			var totalArtifactCount = $sidebar.find(".aefis-sidebar-artifact-row").length;
			aefis.ui.updatePreviewObjectArtifactCount(totalArtifactCount);
			aefis.ui.hideObjectPreviewRightSidebarProgress();
		};

		options["onConfirm"] = function () {
			$sidebar.find(target).hide();
			aefis.ui.showObjectPreviewRightSidebarProgress();
		};

		options["onError"] = function () {
			$sidebar.find(target).show();
			aefis.ui.hideObjectPreviewRightSidebarProgress();
		};

		if (refresh) {
			//options['refreshSelector'] = refresh;
		}

		if (confirmActionName) {
			options["confirmActionName"] = confirmActionName;
		}

		aefis.ui.confirm(options);
	};

	this.downloadDocumentArtifact = function (button) {
		var $button = $(button);
		var src = $button.attr("data-aefis-datasource");
		if (src) {
			window.open(src, "_blank");
			return false;
		}
	};

	this.toggleFormDesignerRightDrawer = function () {
		var $drawer = $("#aefis-form-designer--right-drawer");
		if (!$drawer.hasClass("aefis-form-designer--right-drawer--open")) {
			$drawer.addClass("aefis-form-designer--right-drawer--open");
			$drawer.trigger("opening");
			that.doAfterTransitionEnds($drawer, function () {
				$drawer.trigger("opened");
			});
		} else {
			$drawer.removeClass("aefis-form-designer--right-drawer--open");
			$drawer.trigger("closing");
			that.doAfterTransitionEnds($drawer, function () {
				$drawer.trigger("closed");
			});
		}
		that.toggleAriaAttribute($drawer, "aria-hidden", "true,false");
	};

	this.isFormDesignerRightDrawerOpen = function () {
		var $drawer = $("#aefis-form-designer--right-drawer");
		if ($drawer.hasClass("aefis-form-designer--right-drawer--open")) {
			return true;
		}

		return false;
	};

	this.aefisToggleButton = function (button) {
		var $button = $(button);
		var library = $button.attr("data-aefis-icon-library");
		var iconLibrary = "material";
		if (library) {
			iconLibrary = library;
		}
		var primaryIconClass = $button.attr("data-aefis-primary-state-icon-class");
		var secondaryIconClass = $button.attr("data-aefis-toggled-state-icon-class");
		var currentClass = "";
		if ($button.hasClass("aefis-toggle-icon-button--toggled")) {
			$button.removeClass("aefis-toggle-icon-button--toggled");
			currentClass = primaryIconClass;
			$button.trigger("expanded");
		} else {
			$button.addClass("aefis-toggle-icon-button--toggled");
			currentClass = secondaryIconClass;
			$button.trigger("collapsed");
		}
		if (iconLibrary == "material") {
			$button.find("i.material-icons").html(currentClass);
		} else {
			var $i = $button.find("i.fa");
			$i.attr("class", "");
			$i.addClass("fa " + currentClass);
		}
	};

	this.updateAefisProgressChartPercentage = function (chart, percentage) {
		var $chart = $(chart);
		var percentClass = "p" + percentage;
		$chart.attr("class", function (i, c) {
			return c.replace(/(^|\s)p\S+/g, "");
		});
		$chart.classList.add(percentClass);
	};

	this.toggleAefisToolbox = function () {
		var $cancel = $(".popover.in button.cancel");
		if ($cancel.length > 0) {
			$cancel.click();
		}
		var $drawer = $("#aefis-form-designer--toolbox");
		if (!$drawer.hasClass("aefis-form-designer--toolbox--open")) {
			that.openAefisToolbox();
		} else {
			that.closeAefisToolbox();
		}
	};

	this.closeAefisToolbox = function () {
		var $drawer = $("#aefis-form-designer--toolbox");
		$drawer.removeClass("aefis-form-designer--toolbox--open");
		$(window).trigger("AefisToolbox:closed");
		aefis.ui.toggleAriaAttribute($drawer, "aria-hidden", "true,false");
	};

	this.openAefisToolbox = function () {
		var $drawer = $("#aefis-form-designer--toolbox");
		$drawer.addClass("aefis-form-designer--toolbox--open");
		$(window).trigger("AefisToolbox:opened");

		aefis.ui.toggleAriaAttribute($drawer, "aria-hidden", "true,false");
		aefis.ui.doAfterTransitionEnds($drawer, function () {
			setFocusToFirstItemInObject($drawer);
			$drawer.keydown(function (e) {
				trapTabKey($(this), e);
			});
		});
	};

	this.isToolboxOpen = function () {
		var $drawer = $("#aefis-form-designer--toolbox");
		if (!$drawer.hasClass("aefis-form-designer--toolbox--open")) {
			return false;
		} else {
			return true;
		}
	};

	this.initializeDesignerMainTemplate = function (el, maskOnTop) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var editViewOnly = $obj.attr("data-aefis-edit-view-only");
		var manualLoad = $obj.attr("data-aefis-manual-load");
		var targetid = $obj.attr("id");
		var templateid = $obj.attr("data-aefis-designer-main-template-id");
		if (!templateid) {
			templateid = "aefis-designer-main-content-template";
		}
		var drawStatic = $obj.attr("data-aefis-designer-draw-static");
		var source = $("#" + templateid).html();
		if (source == undefined) {
			return;
		}
		var template = Handlebars.compile(source);
		var $target = $("#" + targetid);
		var viewContainerId = $obj.attr("data-aefis-view-container-id");
		var viewTemplateId = $obj.attr("data-aefis-view-template-id");
		var viewSource = $("#" + viewTemplateId).html();
		var viewTemplate = Handlebars.compile(viewSource);
		var $viewTarget = $("#" + viewContainerId);

		var editVariable = $("#" + templateid).attr("aefis-object-key");
		var viewVariable = $("#" + viewTemplateId).attr("aefis-object-key");

		if (manualLoad) {
			var $partial = $("body").find(
				"script.aefis-handelbars-partial:not(.aefis-initialized)"
			);
			if ($partial.length) {
				$partial.each(function () {
					var $hPartial = $(this);
					var id = $hPartial.attr("id");
					Handlebars.registerPartial(id, $hPartial.html());
					$partial.addClass("aefis-initialized");
				});
			}
			$target.html(template(editObject));
			$target.trigger("completed");
			var $contents = $target.contents();

			$("#aefis-form-designer-content-container")
				.html($contents)
				.promise()
				.done(function () {
					$target.trigger("AefisFormDesigner:editLoaded");
				});
		} else {
			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					aefis.ui.initializeAjaxDisabled();
					if (!editViewOnly) {
						aefis.ui.loadingShow(
							"#aefis-form-designer-container",
							"Loading Content",
							"quick",
							true,
							false
						);
						if (maskOnTop) {
							aefis.ui.loadingShow(
								"#" + viewContainerId,
								"Loading Content",
								"quick",
								true,
								false
							);
						} else {
							aefis.ui.loadingShow("#" + viewContainerId, "Loading Content", "quick");
						}
					}
				},
				onComplete: function () {
					aefis.ui.initializeAjaxEnable();
					if (!editViewOnly) {
						aefis.ui.loadingHide("#aefis-form-designer-container");
						aefis.ui.loadingHide("#" + viewContainerId);
					}
				},
				onSuccess: function (data) {
					var $partial = $("body").find(
						"script.aefis-handelbars-partial:not(.aefis-initialized)"
					);
					$viewTarget.trigger("completed");
					if ($partial.length) {
						$partial.each(function () {
							var $hPartial = $(this);
							var id = $hPartial.attr("id");
							Handlebars.registerPartial(id, $hPartial.html());
							$partial.addClass("aefis-initialized");
						});
					}
					if (!editViewOnly) {
						var viewObject = {
							records: data
						};
						if (viewVariable) {
							viewObject = {};
							viewObject[viewVariable] = data;
						}
						$viewTarget.html(viewTemplate(viewObject));
					}

					if (!drawStatic) {
						var editObject = {
							records: data
						};
						if (editVariable) {
							editObject = {};
							editObject[editVariable] = data;
						}
						$target.html(template(editObject));
						$target.trigger("completed");
						var $contents = $target.contents();

						$("#aefis-form-designer-content-container")
							.html($contents)
							.promise()
							.done(function () {
								$target.trigger("AefisFormDesigner:editLoaded");
							});
					} else {
						$target.trigger("AefisFormDesigner:editLoaded");
					}
				}
			});
		}
	};

	this.toggleFormDesignerLibrary = function (button) {
		var $button = $(button);
		var $drawer = $("#aefis-form-designer--left-drawer");
		var drawerOpen = $drawer.hasClass("aefis-form-designer--left-drawer--open");
		$drawer.addClass("no-border");
		//$drawer.find('.skeleton-content').hide();
		if (!drawerOpen) {
			$button.removeClass("libraryOpen").addClass("libraryClose");
			$button.html("Hide Library");
			aefis.ui.openFormDesignerLibrary();
		} else {
			$button.removeClass("libraryClose").addClass("libraryOpen");
			$button.html("View Library");
			aefis.ui.closeFormDesignerLibrary();
		}
		aefis.ui.toggleAriaAttribute($drawer, "aria-hidden", "true,false");
	};

	this.openFormDesignerLibrary = function () {
		var $designerContainer = $("#aefis-form-designer-content-container");
		var $drawer = $("#aefis-form-designer--left-drawer");

		$("#formItemLibrarySearch").focus();
		$designerContainer.css("marginLeft", "402px");
		$drawer.addClass("aefis-form-designer--left-drawer--open");
		aefis.ui.doAfterTransitionEnds($drawer, function () {
			$drawer.trigger("opened");
			setFocusToFirstItemInObject($drawer);

			$drawer.keydown(function (e) {
				trapTabKey($(this), e);
			});
		});
	};

	this.closeFormDesignerLibrary = function () {
		var $designerContainer = $("#aefis-form-designer-content-container");
		var $drawer = $("#aefis-form-designer--left-drawer");
		$designerContainer.css("marginLeft", "0px");
		$("div.aefis-form--container").removeClass("aefis-form--container-narrow-open");
		$drawer.removeClass("aefis-form-designer--left-drawer--open");
		aefis.ui.doAfterTransitionEnds($drawer, function () {
			$drawer.trigger("closed");
		});
	};

	this.adjustFormDesignerLibraryHeight = function (newOffset) {
		var $questionListContainer = $("#aefis-form-items-library-listing");

		var $lastItemInLibraryList = $("#aefis-library-form-item-list li.dd-item:last-child");
		var newOffset = 0;

		if ($lastItemInLibraryList) {
			newOffset = $lastItemInLibraryList.height() + 100;
		}
		$questionListContainer.css("height", "calc(100vh - " + newOffset + ")");
	};

	this.openFormDesigner = function (callback) {
		var $obj = $("#aefis-form-designer-container");
		var designerTitle = $("#aefis-form-designer-title").val();

		if (!designerTitle) {
			designerTitle = "Template Designer";
		}

		$("body").addClass("no-overflow");
		$("#aefis-main-content-container").fadeOut("fast");
		$("#aefis-main-container").attr("aria-hidden", true);
		$("footer").attr("aria-hidden", true);
		$("#aefis-form-designer-toolbar-title").html(designerTitle);
		$obj.focus();
		$obj.fadeIn()
			.promise()
			.done(function () {
				//var mainMenuHeight = $('#aefis-form-designer-toolbar').height();
				// var height = $('#aefis-main-container').height() - 200;
				// $obj.height(height);
				$obj.trigger("AefisFormDesigner:open");
				setFocusToFirstItemInObject($obj);

				$obj.keydown(function (e) {
					trapTabKey($(this), e);
				});
				if (callback) {
					if (typeof callback === "function") {
						callback();
					} else {
						eval(callback);
					}
				}
			});
	};

	this.closeFormDesigner = function () {
		aefis.ui.closeAllPopovers();
		var $cancel = $(".popover.in button.cancel");
		if ($cancel.length > 0) {
			$cancel.click();
		}
		var $obj = $("#aefis-form-designer-container");
		var refreshContainerId = $("#aefis-form-designer-refresh-on-exit").val();
		var $refreshContainer = $(refreshContainerId);
		$("body").removeClass("no-overflow");
		$("#aefis-main-content-container").fadeIn();
		$obj.fadeOut();
		aefis.ui.initializeHandlebarsTemplate($refreshContainer);
		$obj.trigger("AefisFormDesigner:closed");
		$("#aefis-main-content-container").attr("aria-hidden", false);
		$("#aefis-main-container").attr("aria-hidden", false);
		$("footer").attr("aria-hidden", false);
	};

	this.closeDocumentPreview = function (el) {
		var $obj = $("#aefis-document-preview-container");
		if (el) {
			var $button = $(el);
			var refreshContainerId = $button.attr("data-aefis-refresh-on-exit");
			var $refreshContainer = $(refreshContainerId);
		}
		$("body").removeClass("no-overflow");
		$("#aefis-main-content-container").fadeIn();
		$obj.fadeOut();
		//aefis.ui.initializeHandlebarsTemplate($refreshContainer);
		if (el) {
			$refreshContainer.trigger("refresh");
		}
	};

	this.initializeSortableTable = function () {
		var $tables = $("table.mdl-sortable-table");
		$tables.each(function () {
			var $table = $(this);
			$table.tablesorter({
				selectorHeaders: "thead th.mdl-sort"
			});
			$table.find("th.mdl-sort").each(function () {
				var $col = $(this);
				if ($col.hasClass("aefis-default-sort")) {
					var rows = $table.find("tbody div.aefis-user-message");
					if (rows.length == 0) {
						$col.click();
					}
				}
				$col.attr("aria-sort", "ascending");
				$col.on("click", function (event) {
					if ($col.attr("aria-sort") === "ascending") {
						$col.attr("aria-sort", "descending");
					} else {
						$col.attr("aria-sort", "ascending");
					}
				});
			});
			$table.on("sortEnd", function () {
				$table.find("th.mdl-sort").each(function () {
					var $column = $(this);
					$column
						.removeClass("mdl-data-table__header--sorted-descending")
						.removeClass("mdl-data-table__header--sorted-ascending");
					if ($column.hasClass("headerSortUp")) {
						$column.addClass("mdl-data-table__header--sorted-ascending");
					}
					if ($column.hasClass("headerSortDown")) {
						$column.addClass("mdl-data-table__header--sorted-descending");
					}
				});
			});
		});
	};

	this.initializeKeywordSearchField = function (field) {
		var $obj = $(field);
		var minLength = $obj.attr("data-aefis-min-length");
		var showClear = $obj.attr("data-show-clear-button");
		var targetid = $obj.attr("data-aefis-target");
		var searchingText = "Searching Library";
		var searchingTextParam = $obj.attr("data-aefis-loading-message");
		var searchKey = "keywords";
		var searchKeyParam = $obj.attr("data-aefis-search-key");
		if (searchKeyParam) {
			searchKey = searchKeyParam;
		}
		if (searchingTextParam) {
			searchingText = searchingTextParam;
		}
		if (!showClear) {
			//$('.aefis-filter-field-clear').remove();
		}

		if (!minLength) {
			minLength = 3;
		}

		var delay = (function () {
			var timer = 0;
			return function (callback, ms) {
				clearTimeout(timer);
				timer = setTimeout(callback, ms);
			};
		})();

		$obj.keyup(function (e) {
			e.stopPropagation();
			var data = this.value.split(" ");
			var valueLength = this.value.length;
			var searchValues = this.value;
			var $target = $(targetid);
			$target.each(function () {
				var $item = $(this);
				$item.removeClass("aefis-search-value-found");
				$item.removeClass("aefis-search-value-not-found");
			});
			delay(function () {
				//create a slight delay before processing
				if (valueLength > 0) {
					$(".aefis-filter-field-clear").fadeIn();
				} else {
					var $target = $(targetid);
					$(".aefis-filter-field-clear").fadeOut();
					$target.fadeIn();
					$target.unhighlight();
				}
				if (valueLength >= minLength) {
					//execute ajax
					aefis.app.runSearchFieldSearch($obj, searchValues, searchKey, searchingText);
				}
			}, 1500);
			//delay ends here
		});

		$(".aefis-filter-field-clear")
			.unbind("click")
			.on("click", function (e) {
				var $target = $(targetid);
				e.stopPropagation();
				$obj.val("");
				$(this).fadeOut();
				$obj.focus();
				$target.unhighlight();
				$target.each(function () {
					var $item = $(this);
					$item.removeClass("aefis-search-value-found");
					$item.removeClass("aefis-search-value-not-found");
				});
			});
	};

	this.triggerSessionEstablished = function () {
		if (aefisPendingAjaxRequest && aefisPendingAjaxRequest.length) {
			for (var index = 0; index < aefisPendingAjaxRequest.length; index++) {
				var ajaxRequest = aefisPendingAjaxRequest[index];
				var ajaxUrl = ajaxRequest.url;
				var ajaxData = ajaxRequest.options;
				aefisPendingAjaxRequest.shift();
				new aefis.ApiWrapper().call(ajaxUrl, ajaxData);
			}
		}
		$("body").trigger("SessionEstablished");
	};

	this.hideReloginForm = function () {
		var $formContainerIframe = $("#aefis-relogin--iframe");
		var sourceUrl = $formContainerIframe.attr("data-aefis-datasource-alt");
		aefis.ui.hideFullPagePreloader();
		if ($("#aefis-object-preview-iframe").length) {
			document
				.getElementById("aefis-object-preview-iframe")
				.contentWindow.aefis.ui.triggerSessionEstablished();
		}
		$formContainerIframe.off("load");
		$formContainerIframe
			.fadeOut()
			.promise()
			.done(function () {
				$formContainerIframe.attr("src", sourceUrl);
			});
	};

	this.showReloginForm = function () {
		var $formContainerIframe = $("#aefis-relogin--iframe");
		var sourceUrl = $formContainerIframe.attr("data-aefis-datasource");
		$formContainerIframe.attr("src", sourceUrl);
		aefis.ui.fullPagePreloader();
		$formContainerIframe.off("load").on("load", function () {
			$formContainerIframe.show();
		});
	};

	this.initializeHandlebarsTemplate = function (el, onComplete) {
		var $temp = $(el);
		var targetid = $temp.attr("id");
		var $multipleObject = $("div[id='" + targetid + "']");

		if ($multipleObject.length > 1) {
			$temp = $multipleObject;
		}

		$temp.each(function () {
			var $obj = $(this);
			var url = $obj.attr("data-aefis-datasource");
			var templateid = $obj.attr("data-aefis-template-id");
			var showLoadMask = $obj.attr("data-aefis-load-mask");
			var appendData = $obj.attr("data-aefis-template-append");
			var source = $("#" + templateid).html();
			var template = Handlebars.compile(source);
			var $target = $obj; //$('#'+targetid);
			var filter = $obj.attr("data-aefis-filter");
			var keywords = $obj.attr("data-aefis-keywords");
			var loadingText = $obj.attr("data-aefis-loading-text");
			var urlParameters = "";
			var viewVariable = $("#" + templateid).attr("aefis-object-key");

			if (!loadingText) {
				var loadingText = "Loading Data";
			}

			if (filter) {
				filter = decodeURIComponent(filter);
				if (filter) {
					var existingFilter = aefis.util.getQueryParameter("filter", url);
					if (existingFilter) {
						url = aefis.util.removeQueryParameter('filter', url);
						if (aefis.util.isJson(filter) && aefis.util.isJson(existingFilter)) {
							var newFilterJson = JSON.parse(filter);
							var existingFilterJson = JSON.parse(existingFilter);
							var mergedFilter = {...existingFilterJson, ...newFilterJson};
							filter = JSON.stringify(mergedFilter);
						} else {
							let filterContent = filter.substring(1, filter.length-1);
							let existingFilterContent = existingFilter.substring(1, existingFilter.length-1);
							filter = "{" + filterContent + "," + existingFilterContent + "}";
						}
					}
				}
				urlParameters += "&filter=" + encodeURIComponent(filter);
			}

			if (keywords) {
				keywords = decodeURIComponent(keywords);
				urlParameters += "&keywords=" + encodeURIComponent(keywords);
			}

			if (urlParameters && urlParameters != "") {
				url += urlParameters;
			}

			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					if (showLoadMask !== "false") {
						if (!appendData || (appendData && appendData == "false")) {
							$target.html("");
						}
						aefis.ui.loadingShow("#" + targetid, loadingText, "quick");
					}
					//disable ajax button
					aefis.ui.initializeAjaxDisabled();
					$(
						'li.aefis-quick-filter--dropdown-item[data-aefis-template-id="' +
							templateid +
							'"]'
					)
						.addClass("disabled")
						.attr("disabled", "disabled");
				},
				onComplete: function () {
					aefis.ui.initializeAjaxEnable();
					if (onComplete) {
						onComplete.call();
					}
				},
				onSuccess: function (data) {
					var $partial = $("body").find(
						"script.aefis-handelbars-partial:not(.aefis-initialized)"
					);
					if ($partial.length) {
						$partial.each(function () {
							var $hPartial = $(this);
							var id = $hPartial.attr("id");
							Handlebars.registerPartial(id, $hPartial.html());
							$partial.addClass("aefis-initialized");
						});
					}
					var viewObject = {
						records: data
					};

					if (viewVariable) {
						viewObject = {};
						viewObject[viewVariable] = data;
					}

					if (!appendData || (appendData && appendData == "false")) {
						$target.html(template(viewObject));
						if (data && data.length) {
							$obj.parent()
								.find("button")
								.removeClass("disabled")
								.removeAttr("disabled");
							$(
								'li.aefis-quick-filter--dropdown-item[data-aefis-template-id="' +
									templateid +
									'"]'
							)
								.removeClass("disabled")
								.removeAttr("disabled");
						}
					} else {
						aefis.ui.loadingHide("#" + targetid, function () {
							$target.append(template(viewObject));
						});
					}
					$target.removeClass("fadeOut").addClass("fadeIn");
					$target.trigger("completed");
					$(window).trigger("refreshDOMObjects");
				}
			});
		});
	};

	this.createSkeletonContent = function (
		target,
		numberOfParents,
		numberOfChildren,
		additionalClasses
	) {
		var classes = "";
		if (additionalClasses) {
			classes = additionalClasses;
		}
		var html =
			'<div class="skeleton-content ' +
			classes +
			'"><div class="skeleton-content--right"><ul class="skeleton-content--items-wide">';
		if (!numberOfParents) {
			var numberOfParents = 5;
		}
		if (!numberOfChildren) {
			var numberOfChildren = 3;
		}
		for (var i = 0; i <= numberOfParents; i++) {
			html +=
				'<li class="skeleton--icon-parent"><div class="skeleton--icon-container aefis-flashit"></div><div class="skeleton--icon-description aefis-flashit"></div></li>';
			for (var ii = 0; ii <= numberOfChildren; ii++) {
				html +=
					'<li><div class="skeleton--icon-small aefis-flashit"></div><div class="skeleton-content--item-wide-content aefis-flashit"></div></li>';
			}
		}

		html += "</ul></div></div>";

		var $target = $(target);
		$target.fadeIn("fast", function () {
			$target.html(html);
		});
	};

	this.aefisProgressBar = function (el) {
		var $obj = $(el);
		var total = $obj.attr("data-aefis-total");
		var completed = $obj.attr("data-aefis-completed");
		var percent = $obj.attr("data-aefis-percent");
		var dualProgress = $obj.attr("data-aefis-dual-progress");
		var useColors = $obj.attr("data-aefis-use-colors");
		var title = $obj.attr("data-aefis-title");
		var totalPercentCompleted = 0;
		var progressClass = "";
		var alternateColors = $obj.attr("data-aefis-color-ranges");
		var type = $obj.attr("data-aefis-progress-type");
		var html = "";
		var large = false;
		var xlarge = false;
		var darker = false;
		var existingProgressBar = false;

		if ($obj.hasClass("aefis-progress-large")) {
			large = true;
		}

		if ($obj.hasClass("aefis-progress-xlarge")) {
			xlarge = true;
		}

		if ($obj.hasClass("progress-darker")) {
			darker = true;
		}

		if (type) {
			if (type == "success") {
				progressClass = "progress-success";
			} else if (type == "danger") {
				progressClass = "progress-danger";
			} else if (type == "warning") {
				progressClass = "progress-warning";
			}
		}

		if (percent && percent != "") {
			totalPercentCompleted = percent;
		} else {
			if (completed != 0) {
				totalPercentCompleted = Math.round(((completed / total) * 100).toFixed(1));
			}
		}

		if (!percent && (!completed || !total || isNaN(completed) || isNaN(total))) {
			totalPercentCompleted = 0;
			title = "NA";
		}

		if (useColors) {
			var range1 = 33;
			var range2 = 66;
			if (alternateColors) {
				var rangeArray = alternateColors.split(",");
				range1 = parseInt(rangeArray[0]);
				range2 = parseInt(rangeArray[1]);
			}

			if (totalPercentCompleted > 0 && totalPercentCompleted <= range1) {
				progressClass = "progress-danger";
			} else if (totalPercentCompleted > range1 && totalPercentCompleted <= range2) {
				progressClass = "progress-warning";
			} else {
				progressClass = "progress-success";
			}

			if (totalPercentCompleted > 100) {
				progressClass = "progress-danger";
			}
		}

		if (dualProgress) {
			progressClass = "progress-dual progress-success";
		}

		if (large) {
			progressClass = progressClass + " aefis-progress-large";
		}

		if (xlarge) {
			progressClass = progressClass + " aefis-progress-xlarge";
		}

		if (darker) {
			progressClass += " progress-darker";
		}

		if (title) {
			html =
				'<div class="progress ' +
				progressClass +
				'" ><div class="bar" style="width: ' +
				totalPercentCompleted +
				'%;"></div><span class="aefis-progress-text">' +
				title +
				"</span></div>";
			var newTitle = title;
		} else {
			html =
				'<div class="progress ' +
				progressClass +
				'" ><div class="bar" style="width: ' +
				totalPercentCompleted +
				'%;"></div><span class="aefis-progress-text">' +
				totalPercentCompleted +
				"%</span></div>";
			var newTitle = totalPercentCompleted + "%";
		}

		if ($obj.find(".bar").length) {
			$obj.find(".progress").removeClass(function (index, css) {
				return (css.match(/(^|\s)progress-\S+/g) || []).join(" ");
			});
			$obj.find(".progress").addClass(progressClass);
			$obj.find(".bar")
				.css("width", totalPercentCompleted + "%")
				.find(".aefis-progress-text")
				.html(newTitle);
			$obj.find(".aefis-progress-text").html(newTitle);
		} else {
			$obj.html(html);
		}
	};

	this.mainToolbarShadow = function (el) {
		var $window = $(el);
		var $navbar = $("header.aefis-main-toolbar");
		if ($window.scrollTop() > 0) {
			$navbar
				.removeClass("mdc-toolbar--flexible-space-maximized")
				.addClass("mdc-toolbar--flexible-space-minimized");
		} else {
			$navbar
				.removeClass("mdc-toolbar--flexible-space-minimized")
				.addClass("mdc-toolbar--flexible-space-maximized");
		}
	};

	this.runPreviewFramePageTour = function () {
		var iframe = document.getElementById("aefis-object-preview-iframe").contentWindow;
		if (iframe) {
			iframe.aefis.ui.initializePageTour(true);
		}
	};

	this.showTourButton = function () {
		var $button = $(".aefis-topnav-guided-tours");
		$button.show();
	};

	this.hideTourButton = function () {
		var $button = $(".aefis-topnav-guided-tours");
		$button.hide();
	};

	this.initializePageTour = function (showTour, $rootContainer) {
		var run = true;
		if (!$rootContainer) {
			$rootContainer = $("#aefis-main-container");
		}
		var $container = $rootContainer.find("#aefis-page-tour--container");
		var $customContainer = $rootContainer.find("#aefis-page-custom-tour--container");

		if ($customContainer.length && $customContainer.html().trim() != "") {
			var tourContent = $customContainer.html();
			var $tourContainer = $customContainer;
		} else if ($container.length && $container.html().trim() != "") {
			var tourContent = $container.html();
			var $tourContainer = $container;
		}

		if (tourContent) {
			if (window.parent) {
				window.parent.aefis.ui.showTourButton();
			} else {
				showTourButton();
			}
			var autoRun = $tourContainer.attr("data-aefis-auto-run-tour");
			if (autoRun || showTour) {
				run = autoRun;
			}
			if (showTour) {
				run = true;
			}
			if (!enjoyHint) {
				var enjoyHint = new EnjoyHint({
					onSkip: function () {
						saveViewedTour($tourContainer);
					},
					onEnd: function () {
						saveViewedTour($tourContainer);
					}
				});
			}
			var stepContent = tourContent.trim();
			var enjoyHintSteps = JSON.parse(stepContent);
			enjoyHint.set(enjoyHintSteps);
			if (run) {
				enjoyHint.run();
			}
		} else {
			if (window.parent) {
				window.parent.aefis.ui.hideTourButton();
			} else {
				hideTourButton();
			}
		}
	};

	function saveViewedTour($container) {
		var toursArray = [];
		var tourName = $container.attr("data-aefis-tour");
		var currentAction = $("#aefis-current-action").val();
		if (!tourName) {
			tourName = "default";
		}
		var tourEntry = currentAction + ":" + tourName;
		toursArray.push(tourEntry);
		var viewedGuidedTours = {
			ViewedGuidedTours: toursArray
		};

		var url = $container.attr("data-aefis-datasource");
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(viewedGuidedTours),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your guided tour information.");
				return false;
			}
		});
	}

	this.previewDialog = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var variable = $obj.attr("data-aefis-variable");
		var variableValue = $obj.attr("data-aefis-preview-id");
		var title = $obj.attr("data-aefis-title");
		var size = $obj.attr("data-aefis-size");

		if (!title) {
			title = "Preview";
		} else {
			title = "Preview " + title;
		}
		if (url.indexOf("?") !== -1) {
			url = url + "&" + variable + "=" + variableValue;
		} else {
			url = url + "?" + variable + "=" + variableValue;
		}

		var options = {
			showFooterCloseButton: "true",
			size: size,
			title: title,
			contentUrl: url
		};

		that.modalDialog(options);
	};

	this.confirmJuriedAssessmentSubmit = function (assignmentId, assessmentId) {
		var iframe = document.getElementById("aefis-object-preview-iframe");
		var innerDoc = iframe.contentDocument || iframe.contentWindow.document;
		var url = $(innerDoc)
			.find("#aefis-juried-assessment-submit-scores")
			.attr("data-aefis-submit-juried-assessment-scores");
		var canEdit = $(innerDoc)
			.find("#aefis-juried-assessment-can-edit")
			.attr("data-aefis-can-edit");

		if (canEdit == "false") {
			aefis.ui.alert(
				"Assessment Not Available",
				"This assessment is not longer available to score."
			);
		} else if (!url) {
			aefis.ui.alert(
				"Finish and Submit Scores",
				"We could not find the url to submit your scores. Try again after the page loads."
			);
		} else {
			var options = {
				successMessage: "Assessment scores were saved.",
				errorMessage: "There was an unexpected error while trying to submit your scores.",
				content:
					"You are about to submit your scores.  If you have not completed scoring ALL artifact submissions, you will not be allow to submit your scores.<br/><br/><b>Please Note:</b> Once you submit your scores, they are considered final and you MAY NOT return to make edits.<br/><br/>Are you sure?",
				title: "Finish and Submit Scores",
				data: {
					assignmentId: assignmentId,
					assessmentId: assessmentId
				},
				confirmAction: url,
				confirmActionName: "Ok, Submit Scores",
				cancelActionName: "Cancel",
				onConfirm: function () {
					that.showPreviewObjectLoadingBar();
					$("#aefis-object-preview-container-confirm-button").attr(
						"disabled",
						"disabled"
					);
				},
				onError: function () {
					that.hidePreviewObjectLoadingBar();
					$("#aefis-object-preview-container-confirm-button").removeAttr("disabled");
				},
				onSuccess: function () {
					that.hidePreviewObjectLoadingBar();
					$("#aefis-object-preview-container-confirm-button").removeAttr("disabled");
					$("#aefis-object-preview-container-exit-button").click();
					that.initializeNotifications();
				}
			};
			aefis.ui.confirm(options);
		}
	};

	this.previewObject = function (el) {
		var $previewContainer = $("#aefis-object-preview--container");
		var $previewContainerToolbar = $("#aefis-object-preview--toolbar");
		var $iframe = $("#aefis-object-preview--content").find("#aefis-object-preview-iframe");
		var $content = $("#aefis-object-preview--content").find("#aefis-object-preview");
		var $obj = $(el);

		var url = $obj.attr("data-aefis-datasource");
		var variable = $obj.attr("data-aefis-variable");
		var variableValue = $obj.attr("data-aefis-preview-id");
		var title = $obj.attr("data-aefis-title");
		var useiframe = $obj.attr("data-aefis-use-iframe");
		var showActionTrigger = $obj.attr("data-aefis-show-action-trigger");
		var showActionValue = $obj.attr("data-aefis-show-action-value");
		var icon = '<i class="fa fa-eye fa-fw" aria-hidden="true" ></i>';
		var useIcon = $obj.attr("data-aefis-icon");
		var iconType = $obj.attr("data-aefis-icon-type");
		var loadingMaskText = "Loading Preview";
		var newLoadingMaskText = $obj.attr("data-aefis-loading-mask-text");
		var hideExportOptions = $obj.attr("data-aefis-hide-export-options");
		var exitButtonText = $obj.attr("data-aefis-exit-button-text");
		var onShown = $obj.attr("data-aefis-onshown");
		var refresh = $obj.attr("data-aefis-refresh");
		var noMargin = $obj.attr("data-aefis-no-margin");
		var alternateColor = $obj.attr("data-aefis-alternate-toolbar-color");
		var hideExitButton = $obj.attr("data-aefis-hide-exit-button");
		var buttonTemplateId = $obj.attr("data-aefis-button-template-id");
		var browserCloseWarning = $obj.attr("data-aefis-browser-close-warning");
		var hasModal = false;
		var showHistory = $obj.attr("data-aefis-show-history");
		var showTableOfContents = $obj.attr("data-aefis-show-table-of-contents");
		var showReviewPreviousForm = $obj.attr("data-aefis-show-review-previous-form");
		var showLoadingBarAttr = $obj.attr("data-aefis-show-loading-bar");
		var showConfirmButton = $obj.attr("data-aefis-show-confirm-button");
		var confirmButtonText = $obj.attr("data-aefis-confirm-button-text");
		var onConfirmClick = $obj.attr("data-aefis-on-confirm");
		var showLoadingBar = true;
		var $confirmButton = $("#aefis-object-preview-container-confirm-button");
		var visualizecsvexport = $obj.attr("data-aefis-enable-csv-button");
		var hideAefisObjectPreview = $obj.attr("data-aefis-object-preview-hide");
		
		if (hideAefisObjectPreview == "true") {
			$("#aefis-object-preview").css("display", "none");
		}
		if (showLoadingBarAttr != undefined) {
			showLoadingBar = showLoadingBarAttr;
		}
		if (visualizecsvexport){
			var csvexportButton = document.querySelector("li.mdl-menu__item.aefis-object-action.csv");
			$previewContainer.find(csvexportButton).hide();
		}

		if (showConfirmButton) {
			$confirmButton.fadeIn();
			$confirmButton.css("visibility", "visible");
			if (confirmButtonText) {
				$confirmButton.attr("aria-label", confirmButtonText);
				$confirmButton.html(confirmButtonText);
			}
			$confirmButton.off("click").on("click", function (event) {
				eval(onConfirmClick);
			});
		}

		if ($(".aefis-ui-dialog").length) {
			hasModal = true;
			$(".aefis-ui-dialog").each(function () {
				var $modal = $(this);
				$modal.parent().addClass("aefis-low-zindex");
				$(".modal-backdrop").addClass("aefis-low-zindex");
			});
		}

		if (buttonTemplateId) {
			var $buttonTemplate = $("#" + buttonTemplateId);
			var $buttonContainer = $("#aefis-object-preview-container-toolbar-button--container");
			var source = $buttonTemplate.html();
			var template = Handlebars.compile(source);
			$buttonContainer.html(template);
		}

		var $exitButton = $("#aefis-object-preview-container-exit-button");

		if (useIcon) {
			icon = '<i class="' + useIcon + '" aria-hidden="true"></i>';
		}

		if (iconType && iconType == "material") {
			icon = '<i class="material-icons" aria-hidden="true" >' + useIcon + "</i>";
		}

		if (newLoadingMaskText) {
			loadingMaskText = newLoadingMaskText;
		}

		if (noMargin) {
			$("#aefis-object-preview--content").addClass("no-margin");
		}

		if (alternateColor) {
			$("#aefis-object-preview--toolbar").addClass("alternate-color");
			if (!buttonTemplateId) {
				$exitButton.removeClass("btn-danger").addClass("btn-primary");
			}
		}

		if (exitButtonText) {
			$exitButton.html(exitButtonText);
			$exitButton.attr("aria-label", exitButtonText);
		}

		if (refresh) {
			$exitButton.attr("data-aefis-refresh", refresh);
		} else {
			$exitButton.removeAttr("data-aefis-refresh");
		}

		if (hideExitButton) {
			$exitButton.hide();
		}

		if (showActionTrigger) {
			var showActionTriggerArray = $.parseJSON(showActionTrigger);
			var showActionMessage = $obj.attr("data-aefis-show-action-message");

			for (var i = 0; i < showActionTriggerArray.length; i++) {
				if (showActionTriggerArray[i] == showActionValue) {
					$("#aefis-preview-object-action-button").fadeIn();
					if (showActionMessage) {
						aefis.ui.alert("Simulation Available", showActionMessage);
					}
				}
			}
		}
		$("#aefis-table-of-contents-icons").hide();
		var showTableOfContentsParam =
			typeof showTableOfContents === "boolean"
				? showTableOfContents
				: showTableOfContents == "true";
		if (showTableOfContentsParam) {
			$("#aefis-table-of-contents-icons").show();
		}
		var showHistoryParam =
			typeof showHistory === "boolean" ? showHistory : showHistory == "true";
		if (showHistoryParam) {
			$("#aefis-object-show-history-icons").show();
		}
		var showReviewPreviousFormParam =
			typeof showReviewPreviousForm === "boolean"
				? showReviewPreviousForm
				: showReviewPreviousForm == "true";
		if (showReviewPreviousFormParam) {
			$("#aefis-object-show-review-previous-form-icons").show();
		} else {
			$("#aefis-object-show-review-previous-form-icons").hide();
		}

		if (hideExportOptions) {
			$("#aefis-object-preview-container-export-button").hide();
		}

		if (!title) {
			title = "Preview";
		}
		$iframe.attr("title", title);
		title = icon + title;

		if (variable && variableName) {
			url += "&" + variable + "=" + variableValue;
		}
		that.toggleAriaAttribute($previewContainer, "aria-hidden", "true,false");
		$previewContainer.find("#aefis-object-preview-container-toolbar-title").html(title);
		$previewContainer.show();
		$("#aefis-object-preview-container-toolbar-button--container").focus();
		$("body").addClass("no-overflow");
		aefis.ui.hideMainLandmarks();
		if (useiframe) {
			$previewContainer.attr("data-aefis-target", "#aefis-object-preview-iframe");
			$previewContainer.attr("data-aefis-target-type", "iframe");
			var $iframe = $("#aefis-object-preview-iframe");
			if (browserCloseWarning) {
				window.onbeforeunload = function () {
					return "Do you really want to leave? Changes you made may not be saved.";
				};
				document.getElementsByTagName("iframe")[0].contentWindow.onbeforeunload = null;
				document.getElementsByTagName("iframe")[0].contentWindow.onunload = null;
			}

			if (showLoadingBar === true) {
				that.showPreviewObjectLoadingBar();
			} else {
				aefis.ui.hidePreviewObjectLoadingBar();
			}
			aefis.ui.updatePreviewObjectContent($previewContainer, url, loadingMaskText);
			if (onShown) {
				if (typeof onShown === "function") {
					$iframe.on("load", onShown);
					aefis.ui.loadingHide("#aefis-object-preview--container");
					aefis.ui.hideMainLandmarks();
				} else {
					$iframe.off("load").on("load", function () {
						eval(onShown);
						aefis.ui.loadingHide("#aefis-object-preview--container");
						aefis.ui.hideMainLandmarks();
					});
				}
			}
			// aefis.ui.hidePreviewObjectLoadingBar();
		} else {
			aefis.ui.loadingShow(
				"#aefis-object-preview--container",
				loadingMaskText,
				"quick",
				true,
				false
			);
			new aefis.ApiWrapper().call(url, {
				onComplete: function (data) {
					aefis.ui.loadingHide("#aefis-object-preview--container");
					aefis.ui.hidePreviewObjectLoadingBar();
					aefis.ui.hideMainLandmarks();
				},
				onSuccess: function (data) {
					$content.html(data);
					$content.fadeIn();
					$previewContainer.attr("data-aefis-target", "#aefis-object-preview");
					$previewContainer.attr("data-aefis-target-type", "div");
				}
			});
		}
	};

	this.closeObjectPreview = function (el) {
		var $button = $(el);
		var $previewContainer = $("#aefis-object-preview--container");
		var $iframe = $("#aefis-object-preview--content").find("#aefis-object-preview-iframe");
		var refreshContainer = $button.attr("data-aefis-refresh");
		var totalProcessesCount = $button.attr("data-aefis-processing-queue-count");
		aefis.ui.hidePreviewObjectLoadingBar();
		if ($(".aefis-ui-dialog").length) {
			$(".aefis-ui-dialog").each(function () {
				var $modal = $(this);
				$modal.parent().removeClass("aefis-low-zindex");
				$(".modal-backdrop").removeClass("aefis-low-zindex");
			});
		}
		$iframe.attr("title", "");
		if (totalProcessesCount && $.isNumeric(totalProcessesCount) && totalProcessesCount > 0) {
			setTimeout(function () {
				var totalProcessesCountAgain = $button.attr("data-aefis-processing-queue-count");
				if (
					totalProcessesCountAgain &&
					$.isNumeric(totalProcessesCountAgain) &&
					totalProcessesCountAgain > 0
				) {
					aefis.ui.alert(
						"Save Pending",
						"Your requests are currently being saved.<br/>Please wait a moment and try your save again."
					);
				} else {
					that.closeObjectPreview(el);
				}
			}, 1000);
		} else {
			window.onbeforeunload = null;
			$previewContainer
				.fadeOut()
				.promise()
				.done(function () {
					var $content = $("#aefis-object-preview--content").find(
						"#aefis-object-preview"
					);
					$content.html("");
					aefis.ui.showMainLandmarks();
					// $content.hide();
				});
			$iframe.attr("src", "").hide();
			that.restoreAllManageButtons();
			$("body").removeClass("no-overflow");
			$("#aefis-preview-object-action-button").fadeOut();
			if (refreshContainer) {
				$(refreshContainer).trigger("refresh");
			}
		}
		aefis.ui.showMainLandmarks();
		$previewContainer.attr("aria-hidden", "true");
	};

	this.updatePreviewObjectProcessingQueueCount = function (count) {
		var $exitButton = $("#aefis-object-preview-container-exit-button");
		var totalProcessesCount = 0;
		if (count) {
			totalProcessesCount = count;
		}
		$exitButton.attr("data-aefis-processing-queue-count", totalProcessesCount);
	};

	this.openObjectPreviewDataDialog = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var title = $obj.attr("data-aefis-title");

		var options = {
			title: title,
			contentUrl: url,
			size: "small",
			titleIconClass: ""
		};

		aefis.ui.modalDialog(options);
	};

	this.toggleApplicationSidebar = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var isOpen = true;
		var $sidebar = $("#aefis-application-sidebar");

		if ($sidebar.hasClass("aefis-main-content-container--has-sidebar--closed")) {
			// $(window).trigger('AefisModuleSidebar:close');
			$("#aefis-application-sidebar").removeClass(
				"aefis-main-content-container--has-sidebar--closed"
			);
			$("#aefis-main-content-container--content")
				.addClass("aefis-main-content-container--has-sidebar")
				.removeClass("aefis-main-content-container--has-sidebar--closed");
			$(".aefis-application-sidebar--drag-action").find("span.mdc-fab__icon.backward").hide();
			$(".aefis-application-sidebar--drag-action").find("span.mdc-fab__icon.forward").show();
			isOpen = true;
		} else {
			// $(window).trigger('AefisModuleSidebar:open');
			$("#aefis-application-sidebar").addClass(
				"aefis-main-content-container--has-sidebar--closed"
			);
			$("#aefis-main-content-container--content")
				.removeClass("aefis-main-content-container--has-sidebar")
				.addClass("aefis-main-content-container--has-sidebar--closed");
			$(".aefis-application-sidebar--drag-action").find("span.mdc-fab__icon.backward").show();
			$(".aefis-application-sidebar--drag-action").find("span.mdc-fab__icon.forward").hide();
			isOpen = false;
		}

		var expandApplicationSidebar = {
			ExpandApplicationSidebar: isOpen
		};
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(expandApplicationSidebar),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your sidebar preference.");
				return false;
			}
		});
	};

	this.exportPreviewObject = function (el) {
		var $obj = $(el);
		var $previewContainer = $("#aefis-object-preview--container");
		var target = $previewContainer.attr("data-aefis-target");
		var renderTarget = $obj.attr("target");
		var returnType = $obj.attr("data-aefis-return-type");
		if (target) {
			var $target = $(target);
			var targetType = $previewContainer.attr("data-aefis-target-type");
			var url = "";
			if (returnType == "csv") {
				var csvDataSource = $target.contents().find("#data-aefis-csv-datasource");
				if (csvDataSource.length > 0) {
					url = $target.contents().find("#data-aefis-csv-datasource").val();
				} else {
					url = getPreviewObjectContentUrl($previewContainer);
				}
			} else {
				url = getPreviewObjectContentUrl($previewContainer);
			}
			url += "&rf=" + returnType;
			if (returnType == "print") {
				if (renderTarget) {
					window.open(url, renderTarget);
				} else {
					window.open(url);
				}
			} else {
				$obj.attr("href", url);
			}
		}
	};

	this.artifactPreviewInFrameContainer = function (button, artifactId, fullURL) {
		var $button = $(button);
		var $mainContainer = $("#aefis-document-preview--container");
		var urlVariable = $button.attr("data-aefis-variable");
		var url = $button.attr("data-aefis-datasource");
		var targetContainer = $button.attr("data-aefis-target");
		var idSource = $button.attr("data-aefis-id-source");
		var loadingMaskText = "Loading Preview";
		var $idSource = $(idSource);
		var idAttribute = $button.attr("data-aefis-id");
		if ($idSource.length) {
			var id = $idSource.selectpicker("val");
			url = url + "&" + urlVariable + "=" + id;
		}

		if (idAttribute) {
			var id = idAttribute;
			url = url + "&" + urlVariable + "=" + id;
		}

		if (artifactId) {
			var id = artifactId;
			url = url + "&" + urlVariable + "=" + id;
		}
		if (fullURL) {
			url = fullURL;
		}
		if ((id || fullURL) && targetContainer) {
			$mainContainer.fadeIn();
			aefis.ui.toggleAriaAttribute($mainContainer, "aria-hidden", "true,false");
			var $targetContainer = $(targetContainer);
			$targetContainer.fadeIn();
			var ifrm = document.getElementById(targetContainer);
			ifrm = ifrm.contentWindow || ifrm.contentDocument.document || ifrm.contentDocument;
			if (ifrm && ifrm.aefis) {
				ifrm.aefis.ui.filePreview("", url, targetContainer, true);
			}
			$(".aefis-object-preview-toolbar").find("button").focus();
			$mainContainer.keyup(function (e) {
				if (e.key == "Escape") {
					aefis.ui.exitArtifactPreviewInFrameContainer();
				}
			});
		}
	};

	this.exitArtifactPreviewInFrameContainer = function (button) {
		var $mainContainer = $("#aefis-document-preview--container");
		aefis.ui.toggleAriaAttribute($mainContainer, "aria-hidden", "true,false");
		$mainContainer.fadeOut();
	};

	this.updatePreviewObjectContent = function ($previewContainer, contentUrl, loadingMaskText) {
		var target = $previewContainer.attr("data-aefis-target");
		if (!loadingMaskText) {
			loadingMaskText = "Loading Preview";
		}
		if (target) {
			var $target = $(target);
			$target.show();
			var targetType = $previewContainer.attr("data-aefis-target-type");
			if (targetType == "iframe") {
				// $target.fadeOut();
				$target.attr("src", "");
				$target.attr("src", contentUrl);
				aefis.ui.loadingShow(
					"#aefis-object-preview--container",
					loadingMaskText,
					"quick",
					true,
					false
				);
				$target.on("load", function () {
					aefis.ui.loadingHide("#aefis-object-preview--container");
					//$target.fadeIn();
					aefis.ui.hidePreviewObjectLoadingBar();
					aefis.ui.updatePreviewObjectArtifactCount();
					var $historyButton = $("#aefis-object-preview-artifact-button--history");
					if ($historyButton.length) {
						$historyButton.removeClass("hidden");
					}
					var $tableOfContentsButton = $("#aefis-table-of-contents-button--artifacts");
					if ($tableOfContentsButton.length) {
						$tableOfContentsButton.removeClass("hidden");
						$tableOfContentsButton.removeClass("disabled");
						$tableOfContentsButton.removeAttr("disabled");
						$tableOfContentsButton.show();
					}
				});
			} else {
				$target.attr("data-aefis-datasource");
			}
		}
	};

	this.updatePreviewObjectArtifactCount = function (numberOfArtifacts) {
		var $iframeContainer = $("#aefis-object-preview-iframe");
		var $button = $("#aefis-object-preview-artifact-button--artifacts");
		var useArtifacts = false;
		if ($iframeContainer.contents().find("#aefis-use-form-artifacts").length) {
			useArtifacts = $iframeContainer.contents().find("#aefis-use-form-artifacts").val();
			if (useArtifacts) {
				$button.show();
			}
		}
		if (!numberOfArtifacts) {
			var numberOfArtifacts = $iframeContainer
				.contents()
				.find("#aefis-number-of-artifacts")
				.val();
		}
		if ($button.length) {
			var $badge = $("#aefis-object-preview--toolbar").find(
				"#aefis-object-preview-artifact-button--artifacts-count"
			);
			$button.removeClass("disabled").removeAttr("disabled");
			$badge.attr("data-badge", numberOfArtifacts);
			if (useArtifacts) {
				$badge.show();
				if (parseInt(numberOfArtifacts) == 0 || !numberOfArtifacts) {
					$badge.removeClass("bounceIn").addClass("bounceOut");
				} else {
					$badge.removeClass("bounceOut").addClass("bounceIn");
				}
			}
		}
	};

	function getPreviewObjectContentUrl($previewContainer) {
		var targetType = $previewContainer.attr("data-aefis-target-type");
		var target = $previewContainer.attr("data-aefis-target");
		var $target = $(target);
		if (targetType == "iframe") {
			return $target[0].contentWindow.location.href;
			// return $target.attr('src');
		} else {
			return $target.attr("data-aefis-datasource");
		}
	}

	this.applyParameterToPreviewObject = function (el) {
		var $button = $(el);
		var target = $button.attr("data-aefis-target");
		var variableName = $button.attr("data-aefis-url-variable");
		var $previewContainer = $("#aefis-object-preview--container");
		var currentContentUrl = getPreviewObjectContentUrl($previewContainer);
		var $PreviewObject = $("#PreviewObject");

		if (target) {
			var $target = $(target);
			var targetValue = $target.val();
			if ($target.hasClass("aefis-select")) {
				targetValue = $target.selectpicker("val");
			}
			if (!targetValue || targetValue == "") {
			} else {
				var url = aefis.util.removeQueryParameter(variableName, currentContentUrl);
				var newUrl = url + "&" + variableName + "=" + targetValue;
				if (newUrl) {
					aefis.ui.updatePreviewObjectContent($previewContainer, newUrl);
					aefis.ui.hideAllDialogs();
				}
			}
		}
	};

	this.initializePreviewButtons = function () {
		$(".aefis-select.aefis-add-preview-button").each(function () {
			var $obj = $(this);
			$obj.on("dataLoaded", function () {
				var previewTitle = $obj.attr("data-aefis-preview-title");
				var previewDialogSize = $obj.attr("data-aefis-preview-size");
				var previewUrl = $obj.attr("data-aefis-preview-datasource");
				var variable = $obj.attr("data-aefis-preview-object-variable");
				var noTooltip = $obj.attr("data-aefis-preview-tooltip-hide");
				var $objParent = $obj.parent();
				var newPreviewTitle = "Click to preview";
				var objectValue = $obj.val();
				var content = "";
				if (previewTitle) {
					newPreviewTitle = "Click to preview " + previewTitle;
				}

				if (!previewDialogSize) {
					previewDialogSize = "medium";
				}
				if (noTooltip) {
					content =
						'<button style="display: none;" type="button" disabled class="btn aefis-preview-button disabled" aria-label="preview" data-html="true" data-aefis-title="' +
						previewTitle +
						'" data-aefis-size="' +
						previewDialogSize +
						'" data-aefis-variable="' +
						variable +
						'" data-aefis-datasource="' +
						previewUrl +
						'" data-aefis-preview-id="" onclick="aefis.ui.previewDialog(this);" data-placement="top" data-original-title="' +
						newPreviewTitle +
						'"><i class="fa fa-eye aefis-font-icon medium" aria-hidden="true" ></i></button>';
				} else {
					content =
						'<button style="display: none;" type="button" disabled class="btn aefis-preview-button disabled aefis-tooltip" aria-label="preview" data-html="true" data-aefis-title="' +
						previewTitle +
						'" data-aefis-size="' +
						previewDialogSize +
						'" data-aefis-variable="' +
						variable +
						'" data-aefis-datasource="' +
						previewUrl +
						'" data-aefis-preview-id="" onclick="aefis.ui.previewDialog(this);" data-placement="top" data-original-title="' +
						newPreviewTitle +
						'" title="" data-toggle="tooltip"><i class="fa fa-eye aefis-font-icon medium" aria-hidden="true" ></i></button>';
				}
				if (!$objParent.find(".aefis-preview-button").length) {
					$objParent.append(content);
				}
				$obj.selectpicker("refresh");
				var button = $obj.parent().find(".aefis-preview-button");
				if ($obj.css("margin-bottom") == "10px") {
					$(button).css("margin-bottom", "10px");
				}
				if (objectValue) {
					$(button).removeAttr("disabled").removeClass("disabled");
					$(button).attr("data-aefis-preview-id", objectValue);
				} else {
					$(button).attr("disabled", "disabled").addClass("disabled");
					$(button).attr("data-aefis-preview-id", "");
				}
				$(button).fadeIn();
				$obj.on("change", function () {
					var button = $obj.parent().find(".aefis-preview-button");
					var value = $obj.val();
					if (value) {
						$(button).removeAttr("disabled").removeClass("disabled");
						$(button).attr("data-aefis-preview-id", value);
					} else {
						$(button).attr("disabled", "disabled").addClass("disabled");
						$(button).attr("data-aefis-preview-id", "");
					}
				});
			});
		});
	};

	this.initializeAefisTextarea = function (textarea) {
		var $textarea = $(textarea);
		var textareaId = $textarea.attr("id");
		var characterLimit = $textarea.attr("data-aefis-character-limit");
		var button = $textarea.attr("data-aefis-submit-button");
		if (button) {
			var $button = $(button);
		}

		if (characterLimit && characterLimit > 0) {
			var characterLimitId = "aefis-textarea-characters-remaining--" + textareaId;
			var characterLimitHtml =
				'<div class="aefis-textarea-character-limit-container"><span id="' +
				characterLimitId +
				'">' +
				characterLimit +
				"</span>&nbsp; characters remaining</div>";
			$textarea.after(characterLimitHtml);
			var $characterLimitContainer = $("#" + characterLimitId);
			$textarea.keyup(function () {
				var currentLength = $(this).val().length;
				var newLength = characterLimit - currentLength;
				$characterLimitContainer.text(newLength);
				if (newLength < 0) {
					$characterLimitContainer.addClass("aefis-textarea-character-limit--exceeded");
					if ($button) {
						$button.addClass("disabled").prop("disabled", "disabled");
					}
				} else {
					$characterLimitContainer.removeClass(
						"aefis-textarea-character-limit--exceeded"
					);
					if ($button) {
						$button.removeClass("disabled").removeAttr("disabled");
					}
				}
			});
		}
	};

	this.initializeSocialSharing = function (container) {
		var $container = $(container);
		var defaultShares = ["email", "linkedin", "facebook", "twitter"];
		var showLabel = false;
		var showCount = false;
		var shares = $container.attr("data-aefis-shares");
		var url = $container.attr("data-aefis-datasource");

		if (!shares) {
			shares = defaultShares;
		}

		var shareOptions = {
			showLabel: showLabel,
			showCount: showCount,
			shares: shares
		};

		if (url) {
			shareOptions.url = url;
		}

		$container.jsSocials(shareOptions);
	};

	this.initializeWordCloud = function (minimumOccurrencesThreshold) {
		var minimumOccurrences = 2;
		var minimumOccurrencesText = "2 times";
		var defaultMinimumWordLength = 1;
		if (minimumOccurrencesThreshold && minimumOccurrencesThreshold > 2) {
			minimumOccurrences = minimumOccurrencesThreshold;
			minimumOccurrencesText = minimumOccurrences + " times";
		}

		$("div.aefis-word-cloud").each(function () {
			var $container = $(this);
			var $wordContainer = $container.attr("data-aefis-target");
			var wordHighlightContainer = $container.attr("data-aefis-word-container");
			var autoHeight = $container.attr("data-aefis-match-height");
			var minimumWordLength = $container.attr("data-aefis-minimum-word-length");
			var wordstring = "";
			var $wordObject = $($wordContainer);
			var shape = "rectangular"; //elliptic
			var wordCloudArray = new Array();
			var noResultsContent =
				'<div class="aefis-word-cloud-no-results-container"><div class="aefis-word-cloud-no-results-title"><h4>Word Cloud Not Available</h4></div><div class="aefis-word-cloud-no-results-text">No text to process or the text does not contain words occurring at least ' +
				minimumOccurrencesText +
				".</div></div>";

			if (!minimumWordLength) {
				minimumWordLength = defaultMinimumWordLength;
			}
			$wordObject.each(function () {
				wordstring = wordstring + $(this).html();
			});
			var wordCountsArray = aefis.util.stringCount(wordstring); // array
			if (wordstring.length && wordCountsArray.length) {
				$.each(wordCountsArray, function (index, value) {
					if (value[1] >= minimumOccurrences && value[0].length >= minimumWordLength) {
						wordCloudArray.push({
							text: value[0],
							weight: value[1],
							html: {
								title: value[1] + " occurrences",
								class: "aefis-hover-alt"
							},
							handlers: {
								click: function () {
									var $word = $(this).children();
									$(wordHighlightContainer).unhighlight();
									if (!$word.hasClass("highlight")) {
										$(wordHighlightContainer).highlight(value[0], {
											wordsOnly: true
										});
										$(wordHighlightContainer)
											.find(".highlight")
											.addClass("animated bounceIn boldText");
									} else {
										$(wordHighlightContainer).unhighlight();
									}
								}
							}
						});
					}
				});
			}
			if (autoHeight) {
				var width = $container.width();
				var height = $(autoHeight).height();

				if (height > 500) {
					height = 500;
				}

				if (height < 350) {
					height = 350;
				}

				if (wordCloudArray.length) {
					$container.jQCloud(wordCloudArray, {
						width: width,
						height: height,
						shape: shape
					});
				} else {
					$container.html(noResultsContent);
				}
			} else {
				if (wordCloudArray.length) {
					$container.jQCloud(wordCloudArray, {
						shape: shape
					});
				} else {
					$container.html(noResultsContent);
				}
			}
		});
	};

	this.showNotifications = function () {
		$(window).trigger("AefisNotifications:open");
	};

	this.hideNotifications = function () {
		$(window).trigger("AefisNotifications:close");
	};

	this.showSearch = function () {
		$(window).trigger("AefisSearch:open");
	};

	this.hideSearch = function () {
		$(window).trigger("AefisSearch:close");
	};

	this.toggleSearchSettings = function (btn) {
		var $button = $(btn);
		var isOpen = false;
		var $container = $("#aefis-search--sidebar-settings");
		var $notificationContentContainer = $("#aefis-search--sidebar-content");
		if ($container.hasClass("aefis-search--sidebar-settings--active")) {
			isOpen = true;
		}

		if (isOpen) {
			$button.attr("aria-expanded", false);
			$container.removeClass("aefis-search--sidebar-settings--active");
			$notificationContentContainer.removeClass("aefis-search--sidebar-content--inactive");
			$notificationContentContainer.removeClass("aefis-no-scroll");
			$container.one(
				"webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
				function (event) {
					$container.addClass("hidden");
				}
			);
		} else {
			$container.removeClass("hidden");
			$button.attr("aria-expanded", true);
			$container.addClass("aefis-search--sidebar-settings--active");
			$notificationContentContainer.addClass("aefis-search--sidebar-content--inactive");
			$notificationContentContainer.addClass("aefis-no-scroll");
		}
		//that.toggleTabIndex($container);
		that.toggleAriaAttribute($container, "aria-hidden", "true,false");
	};

	this.toggleNotificationSettings = function () {
		var isOpen = false;
		var $container = $("#aefis-notification--sidebar-settings");
		var $notificationContentContainer = $("#aefis-notification--sidebar-content");
		if ($container.hasClass("aefis-notification--sidebar-settings--active")) {
			isOpen = true;
		}

		if (isOpen) {
			$container.removeClass("aefis-notification--sidebar-settings--active");
			//$notificationContentContainer.removeClass('aefis-notification--sidebar-content--inactive');
		} else {
			$container.addClass("aefis-notification--sidebar-settings--active");
			$container.focus();
			//$notificationContentContainer.addClass('aefis-notification--sidebar-content--inactive')
		}
		that.toggleAriaAttribute($container, "aria-hidden", "true,false");
	};

	this.toggleUserNotificationsForCategory = function (button) {
		var $button = $(button);
		var targetClass = $button.attr("data-aefis-target");
		var $targetClass = $(targetClass);
		var buttonState = $button.attr("data-aefis-state");
		var currentButtonText = $button.html();
		var buttonToggledText = $button.attr("data-aefis-button-toggle-text");
		var maxItemsShown = $button.attr("data-aefis-max-shown");
		var newButtonState = "show";
		if (buttonState == "hidden") {
			$targetClass.show();
		} else {
			$targetClass.each(function () {
				var $item = $(this);
				var index = $item.attr("data-aefis-index");
				if (parseInt(index) >= parseInt(maxItemsShown)) {
					$item.hide();
				}
			});
			newButtonState = "hidden";
		}
		$button.attr("data-aefis-state", newButtonState);
		$button.attr("data-aefis-button-toggle-text", currentButtonText);
		$button.html(buttonToggledText);
	};

	this.toggleAutoOpenNotifications = function (el) {
		var $checkbox = $(el);
		var url = $checkbox.attr("data-aefis-datasource");
		var isChecked = false;

		if ($checkbox.is(":checked")) {
			isChecked = true;
		}

		var data = {
			AutoOpenNotifications: isChecked
		};

		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(data),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your preference.");
				return false;
			}
		});
	};

	this.goToSearchResult = function (button) {
		var $button = $(button);
		var url = $button.attr("data-aefis-datasource");
		var businessObject = $button.attr("data-aefis-object");

		$(window).trigger("AefisSearch:close");
		that.fullPagePreloader(businessObject);
		window.location.href = url;
	};

	this.goToPage = function (button, showLoading, useText) {
		var $button = $(button);
		var url = $button.attr("data-aefis-datasource");
		if (showLoading) {
			var menuText = "My Dashboard";
			if (useText) {
				var text = $button.attr("data-aefis-name");
				menuText = text;
			}
			that.fullPagePreloader(menuText);
		}
		document.location.href = url;
	};

	this.initializeNotifications = function (waitTime) {
		//todo: move this too
		setTimeout(function () {
			var url = $("#aefis-user-notification-url").val();
			var $notificationCountContainer = $("#aefis-notification-count");
			var notificationContent = $notificationCountContainer.attr("data-badge");
			var source = $("#aefis-notification-content-action-items-template").html();
			var template = Handlebars.compile(source);
			var totalNotifications = 0;
			var $progress = $("#aefis-notification--sidebar-header--progress");
			if (notificationContent == 0) {
				$notificationCountContainer.hide();
			}
			var $sidebarContentContainer = $("#aefis-notification--sidebar-content");
			var $sidebar = $("#aefis-notification--sidebar");

			new aefis.ApiWrapper().call(url, {
				beforeSend: function () {
					$progress.fadeIn();
					$sidebarContentContainer.addClass("aefis-no-scroll");
					$sidebarContentContainer
						.fadeOut("fast")
						.promise()
						.done(function () {
							that.createSkeletonContent(
								"#aefis-notification--sidebar-content",
								6,
								4
							);
							$sidebarContentContainer.fadeIn("fast");
						});
				},
				onComplete: function () {
					$progress.fadeOut();
					$sidebarContentContainer.removeClass("aefis-no-scroll");
				},
				onSuccess: function (data) {
					if (data.length) {
						totalNotifications = 0;
						for (var i = 0; i < data.length; i++) {
							if (data[i].TotalItems) {
								totalNotifications = data[i].TotalItems;
								break;
							}
						}
						if (totalNotifications > 0) {
							$("#aefis-notication-action-item-count").html(totalNotifications);
						} else {
							$("#aefis-notication-action-item-count").html("");
						}
					}
					aefis.ui.updateTotalNotifications(totalNotifications);
					$(window).trigger("AefisNotifcations:loaded");
					that.initializeAefisActionButton();
					setTimeout(function () {
						$sidebarContentContainer
							.fadeOut()
							.promise()
							.done(function () {
								$sidebarContentContainer.html(template({ records: data }));
								$sidebarContentContainer.fadeIn();
								if ($sidebar.hasClass(" mdc-temporary-drawer--open")) {
									$sidebarContentContainer.focus();
								}
								that.refreshDOMObjects();
							});
					}, 500);
				}
			});
		}, waitTime);
	};

	this.reloadWidget = function (widgetName, waitTime) {
		setTimeout(function () {
			aefis.widget[widgetName].getFormData();
		}, waitTime);
	};

	// favorites
	this.initializeFavorites = function () {
		$("#aefis-topnav-favorite-dropdown a")
			.off("click", null, that.toggleNavDropdownsHandler)
			.on("click", null, that.toggleNavDropdownsHandler);

		$("body")
			.off("click")
			.on("click", function (e) {
				if (
					!$("button.close").is(e.target) &&
					!$("button.aefis-modal-footer-close-button").is(e.target) &&
					!$("#aefis-topnav-favorite-dropdown").is(e.target) &&
					$("#aefis-topnav-favorite-dropdown").has(e.target).length === 0 &&
					$(".open").has(e.target).length === 0
				) {
					that.closeAllNavDropdownsHandler();
					//$('#aefis-topnav-favorite-dropdown').removeClass('open');
					that.fadeInMainContent();
				}
			});

		// edit mode handler
		var enterEditMode = function () {
			event.preventDefault();
			// switch to edit mode
			$(".aefis-favorite-header-edit-link").html("done");
			$(".aefis-favorite-content-container")
				.find(".favorite-title-link")
				.addClass("editmode");
			$(".aefis-favorite-content-container").find(".favorite-edit-icon").show();
			$(".aefis-favorite-content-container").find(".favorite-delete-icon").show();
			$(".aefis-favorite-content-container").find(".favorite-sort-icon").show();
		};
		var enterDefaultMode = function () {
			// switch to default mode
			$(".aefis-favorite-header-edit-link").html("edit");
			$(".aefis-favorite-content-container")
				.find(".favorite-title-link")
				.removeClass("editmode");
			$(".aefis-favorite-content-container").find(".aefis-favorite-edit-form").hide();
			$(".aefis-favorite-content-container").find(".favorite-title-link").show();
			$(".aefis-favorite-content-container").find(".favorite-edit-icon").hide();
			$(".aefis-favorite-content-container").find(".favorite-delete-icon").hide();
			$(".aefis-favorite-content-container").find(".favorite-sort-icon").hide();
		};
		$(".aefis-favorite-header-edit-link")
			.off("click")
			.on("click", function (event) {
				event.preventDefault();
				if ($(this).html() == "edit") {
					enterEditMode();
				} else {
					enterDefaultMode();
				}
			});
		$("#aefis-topnav-favorite-dropdown").on("dropdownclose", enterDefaultMode);

		// favorite loading
		var loadFavorites = function () {
			var favsListUrl = $("#aefis-user-favorite-url").val();
			var templatesource = $("#aefis-favorite-content-template").html();
			var template = Handlebars.compile(templatesource);
			var currentdate = new Date();
			var updatedDate = dateFormat(currentdate, "customDefault");
			new aefis.ApiWrapper().call(favsListUrl, {
				beforeSend: function () {
					$("#aefis-favorite-content-items")
						.fadeOut()
						.promise()
						.done(function () {
							$("#aefis-favorite-content-items").html("");
							$("#aefis-favorite-content-items").fadeIn();
							that.loadingShow(
								"#aefis-favorite-content-items",
								"Loading Favorites",
								"quick"
							);
						});
				},
				onSuccess: function (data) {
					var currentUrl = $("#aefis-local-url").val().toLowerCase();
					data.sort(function (a, b) {
						var aUrl = a.Url.toLowerCase();
						var bUrl = b.Url.toLowerCase();
						if (currentUrl == aUrl) {
							return -1;
						} else if (currentUrl == bUrl) {
							return 1;
						} else {
							var aDesc = a.Description.toLowerCase();
							var bDesc = b.Description.toLowerCase();
							return aDesc < bDesc ? -1 : aDesc > bDesc ? 1 : 0;
						}
					});

					$(".aefis-favorite-header-edit-link").html("edit");
					$("#aefis-favorite-content-items").html(template({ records: data }));
					$("#aefis-favorite-footer-updated-date").html(updatedDate);
					$(".aefis-favorite-content-container")
						.find("div.favorite-edit-link")
						.each(function () {
							$(this)
								.off("click")
								.on("click", function (event) {
									// hide link, show edit
									//$(this).off('click');
									$(this).siblings(".favorite-title-link").hide();
									//$(this).siblings('.favorite-delete-link').hide();
									$(this).siblings(".aefis-favorite-edit-form").show();
									$(this)
										.siblings(".aefis-favorite-edit-form")
										.each(function () {
											$(this)
												.find(".aefis-favorite-button-edit-save")
												.off("click")
												.on("click", function () {
													// console.log('save');
												});
											$(this)
												.find(".aefis-favorite-button-edit-cancel")
												.off("click")
												.on("click", function () {
													//console.log('cancel');
												});
										});
								});
						});
					$(".aefis-favorite-content-container")
						.find("div.favorite-delete-link")
						.each(function () {
							$(this)
								.off("click")
								.on("click", function (e) {
									// delete
									var $el = $(this);
									var saveUrl = $("#aefis-user-favorite-save-url").val();
									var currentUrl = $("#aefis-local-url").val();
									$el.find(".favorite-delete-icon").each(function () {
										$(this).toggleClass("fa-spin");
									});
									new aefis.ApiWrapper().call(saveUrl, {
										data: {
											add: 0,
											url: currentUrl
										},
										beforeSend: function () {
											$el.off("click");
										},
										onSuccess: function (data) {
											$el.parents(".favorite-list-item").remove();
											var favUrl = $("#aefis-local-url").val();
											if (currentUrl.toLowerCase() == favUrl.toLowerCase()) {
												// toggle fav stars
												var $toggleEl = $(".aefis-favorite-toggle");
												$toggleEl
													.find(".aefis-favorite-save-icon")
													.toggle();
												$toggleEl
													.siblings(".aefis-favorite-save-text")
													.toggle();
												$("#aefis-topnav-favorite-icon").toggleClass(
													"selected"
												);
											}
										},
										onError: function (data) {
											$el.find(".favorite-delete-icon").each(function () {
												$(this).toggleClass("fa-spin");
											});
										}
									});
								});
						});
					$(".aefis-favorite-content-container .favorite-list").sortable({
						group: "no-drop",
						handle: "div.favorite-sort-link",
						axis: "y",
						nested: false,
						helper: "clone",
						start: function (e, ui) {
							var item = ui.item;
							var sortLink = $(item).find(".favorite-sort-link");
							ui.placeholder.height(item.height());

							sortLink.removeClass("grab");
							sortLink.addClass("grabbing");
						},
						stop: function (e, ui) {
							var item = ui.item;
							var sortLink = $(item).find(".favorite-sort-link");
							sortLink.removeClass("grabbing");
							sortLink.addClass("grab");
							saveFavorite(item);
						}
					});
				}
			});
		};
		loadFavorites();

		// toggle current page as favorite
		var favoriteSaveToggleEventHandler = function (event) {
			event.preventDefault();
			var $el = $(this);
			var url = $("#aefis-user-favorite-save-url").val();
			var favUrl = $("#aefis-local-url").val();
			var description = $("#aefis-page-title").val();
			var selected = $el.find(".aefis-favorite-save-icon.selected:visible").length
				? true
				: false;

			$el.find(".aefis-favorite-save-icon").each(function () {
				$(this).toggleClass("fa-spin");
			});

			new aefis.ApiWrapper().call(url, {
				data: {
					add: selected ? 0 : 1,
					url: favUrl,
					description: description
				},
				beforeSend: function () {
					$el.off("click");
				},
				onSuccess: function (data) {
					$el.find(".aefis-favorite-save-icon").toggle();
					$el.siblings(".aefis-favorite-save-text").toggle();
					$("#aefis-topnav-favorite-icon").toggleClass("selected");
				},
				onComplete: function (data) {
					$el.find(".aefis-favorite-save-icon").each(function () {
						$(this).toggleClass("fa-spin");
					});
					loadFavorites();
					$el.on("click", favoriteSaveToggleEventHandler);
				}
			});
		};
		$(".aefis-favorite-toggle").off("click").on("click", favoriteSaveToggleEventHandler);
	};
	// end favorites

	this.getCurrentReturnFormat = function () {
		return $("#aefis-current-returnFormat").val();
	};

	this.initializeAjaxDisabled = function () {
		$(".btn.aefis-ajax-disabled").each(function () {
			var $button = $(this);
			$button.addClass("disabled").prop("disabled", "disabled");
		});
	};

	this.initializeAjaxEnable = function () {
		$(".btn.aefis-ajax-disabled").each(function () {
			var $button = $(this);
			$button.removeClass("disabled").removeAttr("disabled");
		});
	};

	this.editableTableRowAction = function (button) {
		var minimumRows = 1;
		var $button = $(button);
		var action = "add";
		var $currentRow = $button.closest("tr");
		var $table = $currentRow.closest("table.aefis-editable-table");
		var numberOfCellsInRow = $currentRow.find("td:not(.editable-ignore)").length;
		var numberOfRows = $table.find("tbody tr").length;

		if ($button.hasClass("remove-row")) {
			action = "remove";
		}

		if (action == "add") {
			var newRow = $currentRow.clone();
			$(newRow)
				.find("td:not(.editable-ignore)")
				.each(function () {
					$(this).html("&nbsp;");
				});
			$currentRow.after(newRow);
		} else {
			if (numberOfRows == minimumRows) {
				aefis.ui.alert(
					"Cannot Remove Row",
					"A table requires a minimum of " + minimumRows + " row."
				);
			} else {
				$currentRow.remove();
			}
		}
	};

	this.accessibleDatePicker = function ($obj) {
		var picker = $obj;
		var DATE_FORMAT_US = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;

		picker.dateAdapter = {
			parse(value = "", createDate) {
				var matches = value.match(DATE_FORMAT_US);

				if (matches) {
					return createDate(matches[3], matches[1], matches[2]);
				}
			},
			format(date) {
				return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
			}
		};

		picker.localization = {
			buttonLabel: "Choose date",
			placeholder: "mm/dd/yyyy",
			selectedDateMessage: "Selected date is",
			prevMonthLabel: "Previous month",
			nextMonthLabel: "Next month",
			monthSelectLabel: "Month",
			yearSelectLabel: "Year",
			closeLabel: "Close window",
			calendarHeading: "Choose a date",
			dayNames: [
				"Sunday",
				"Monday",
				"Tuesday",
				"Wednesday",
				"Thursday",
				"Friday",
				"Saturday"
			],
			monthNames: [
				"January",
				"February",
				"March",
				"April",
				"May",
				"June",
				"July",
				"August",
				"September",
				"October",
				"November",
				"December"
			],
			monthNamesShort: [
				"Jan",
				"Feb",
				"Mar",
				"Apr",
				"May",
				"Jun",
				"Jul",
				"Aug",
				"Sep",
				"Oct",
				"Nov",
				"Dec"
			],
			locale: "en-US"
		};
	};

	this.initializeEmailQueue = function (notificationTotal) {
		//todo: move this
		var url = $("#aefis-user-emailQueue-url").val();
		var $notificationCountContainer = $("#aefis-notification-count");
		var notificationContent = $notificationCountContainer.attr("data-badge");
		var source = $("#aefis-notification-content-messages-template").html();
		var template = Handlebars.compile(source);
		var currentdate = new Date();
		var updatedDate = dateFormat(currentdate, "customDefault");

		new aefis.ApiWrapper().call(url, {
			beforeSend: function () {
				var $button = $("#aefis-messages-button");
				if ($button.hasClass("active")) {
					$("#aefis-notification-content-messages")
						.fadeOut()
						.promise()
						.done(function () {
							$("#aefis-notification-content-messages").html("");
							$("#aefis-notification-content-messages").fadeIn();
							that.loadingShow(
								"#aefis-notification-content-messages",
								"Loading Messages",
								"quick",
								true
							);
						});
				}
			},
			onSuccess: function (data) {
				var $button = $("#aefis-messages-button");
				var existingTotalNotifications = $("#aefis-notification-count").attr("data-badge");
				var totalNotifications = 0;
				if (data.length) {
					var nCount = 0;
					$(data).each(function () {
						var $item = $(this)[0];
						if (!$item.Delivered) {
							nCount++;
						}
					});
					totalNotifications = nCount;
					if (totalNotifications > 0) {
						$("#aefis-notication-messages-count").html(totalNotifications);
					} else {
						$("#aefis-notication-messages-count").html("");
					}
					if (notificationTotal) {
						totalNotifications = totalNotifications + parseInt(notificationTotal);
					}
				} else {
					$("#aefis-notication-messages-count").html("");
				}
				aefis.ui.updateTotalNotifications(totalNotifications);
				$("#aefis-notifcation-footer-updated-date").html(updatedDate);

				if ($button.hasClass("active")) {
					$("#aefis-notification-content-messages")
						.fadeOut()
						.promise()
						.done(function () {
							that.loadingHide("#aefis-notification-content-messages");
							$("#aefis-notification-content-messages").html(
								template({ records: data })
							);
							$("li .notification-email-list-item.read").hide();
							$("#aefis-notification-content-messages").fadeIn();
						});
				} else {
					$("#aefis-notification-content-messages").html(template({ records: data }));
					$("li .notification-email-list-item.read").hide();
				}
			}
		});
	};

	this.incrementTotalNotifications = function () {
		var $notificationCountContainer = $("#aefis-notification-count");
		var notificationContent = $notificationCountContainer.attr("data-badge");
		var currentTotal = 0;

		if (totalNotifications != "") {
			currentTotal = parseInt(notificationContent);
		}
		var totalNotifications = currentTotal;
		totalNotifications++;
		that.updateTotalNotifications(totalNotifications);
	};

	this.decrementTotalNotifications = function () {
		var $notificationCountContainer = $("#aefis-notification-count");
		var notificationContent = $notificationCountContainer.attr("data-badge");
		var totalNotifications = parseInt(notificationContent) - 1;
		that.updateTotalNotifications(totalNotifications);
	};

	this.updateTotalNotifications = function (totalNotifications) {
		//todo: move this too
		var $notificationCountContainer = $("#aefis-notification-count");
		var notificationContent = $notificationCountContainer.attr("data-badge");
		var objectKey = "aefis-notification-total-count";
		var objectId = "aefis-notication-action-item-count";
		var objectKey = "aefis-notification-total-count";
		var objectName = "aefis-notification-total-count";
		aefis.app.deleteAefisLocalStorage(objectKey);
		aefis.app.setAefisLocalStorage(objectKey, objectId, objectName, totalNotifications);
		if ((notificationContent == 0 && totalNotifications == 0) || totalNotifications == "") {
			$notificationCountContainer.hide();
			$("#aefis-topnav-notification-icon").html("notifications");
		} else {
			$notificationCountContainer.attr("data-badge", totalNotifications);
			$("#aefis-topnav-notification-icon").html("notifications_active");
			$notificationCountContainer.show();
		}
	};

	this.getTotalNotifications = function () {
		var $notificationCountContainer = $("#aefis-notification-count");
		return $notificationCountContainer.attr("data-badge");
	};

	this.openNotificationsDropDown = function () {
		$(window).trigger("AefisNotifications:open");
	};

	this.openNotificationsDropDownWithoutLoad = function () {
		$(window).trigger("AefisNotifications:openWithoutLoad");
	};

	this.toggleNotificationContainer = function (el) {
		//todo: move this
		var $obj = $(el);
		if ($obj.hasClass("aefis-message-read-toggle-button")) {
			$(".aefis-message-read-toggle-button").removeClass("active");
			$obj.addClass("active");
			if ($obj.attr("id") == "aefis-notifcation-messages-unread-button") {
				$(".notification-email-list-item.unread")
					.fadeOut("fast")
					.promise()
					.done(function () {
						$(".notification-email-list-item.read").fadeIn("fast");
					});
			} else {
				$(".notification-email-list-item.read")
					.fadeOut("fast")
					.promise()
					.done(function () {
						$(".notification-email-list-item.unread").fadeIn("fast");
					});
			}
		} else {
			var targetId = $obj.attr("data-aefis-target");
			var $target = $("#" + targetId);
			$(".btn.aefis-action-items-toggle-button").removeClass("active");
			$obj.addClass("active");
			$(".aefis-notification-content-container")
				.fadeOut("fast")
				.promise()
				.done(function () {
					$target.fadeIn("fast");
				});
		}
	};

	this.viewUserEmailDialog = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var title = $obj.attr("data-aefis-title");
		var options = {
			showFooterCloseButton: "true",
			size: "medium",
			title: title,
			titleIconClass: "fa fa-envelope fa-fw",
			contentUrl: url,
			closeCallback: function () {
				if ($("#aefis-notifcation-messages-read-button").hasClass("active")) {
					aefis.ui.initializeEmailQueue();
				}
			}
		};

		aefis.ui.modalDialog(options);
	};

	this.viewDashboardNotificationDialog = function (el) {
		var $obj = $(el);
		var title = $obj.attr("data-aefis-title");
		var target = $obj.attr("data-aefis-target");
		var content = $(target).html();
		var url = $obj.attr("data-aefis-datasource");
		var options = {
			showFooterCloseButton: "true",
			size: "medium",
			title: title,
			titleIconClass: "fa fa-envelope fa-fw",
			content: content,
			closeCallback: function () {
				new aefis.ApiWrapper().call(url, {
					onSuccess: function (data) {
						if ($("#aefis-notifcation-messages-read-button").hasClass("active")) {
							aefis.ui.initializeEmailQueue();
						}
					}
				});
			}
		};

		aefis.ui.modalDialog(options);
	};

	function manageBusinessObjectAccessOptions() {
		//todo: move this

		$("#aefis-business-object-access-form")
			.find('input[name="OwnerType"]:checked')
			.each(function () {
				aefis.ui.hideTarget($(this));
			});

		$("#aefis-business-object-access-form")
			.find('input[name="OwnerType"]')
			.on("change", function () {
				var $radio = $(this);
				var value = $radio.val();
				if (value == "aefis" || value == "user") {
					$("#aefis-business-object-access-form .aefis-select").each(function () {
						var $newObj = $(this);
						$newObj.val("");
						$newObj.selectpicker("refresh");
					});
				}
			});

		$("#aefis-business-object-access-form .aefis-select").on("change", function () {
			var $obj = $(this);
			var currentValue = $obj.val();
			var currentObjectId = $obj.attr("id");
			$('.modal .btn[type="submit"]').removeAttr("disabled").removeClass("disabled");
			if (currentValue != 0 && currentValue != "") {
				$("#aefis-business-object-access-form .aefis-select").each(function () {
					var $newObj = $(this);
					if ($newObj.attr("id") != currentObjectId) {
						$newObj.val("");
						$newObj.selectpicker("refresh");
					}
				});
			} else {
				var index = 0;
				var totalObjects = $("#aefis-business-object-access-form .aefis-select").length;
				$("#aefis-business-object-access-form .aefis-select").each(function () {
					var $countedObject = $(this);
					if ($countedObject.val() == "") {
						index = index + 1;
					}
				});
				//if (index == totalObjects) {
				//$('.modal .btn[type="submit"]').prop('disabled', 'disabled').removeClass('disabled');
				//};
			}
		});
	}

	this.goToSurvey = function (el) {
		var url = $(el).attr("data-destination");
		aefis.ui.hideAllDialogs();
		window.location = url;
	};

	this.initializePDFDownloadNotification = function ($rootContainer) {
		function readCookie(name) {
			var nameEQ = name + "=";
			var ca = document.cookie.split(";");
			for (var i = 0; i < ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == " ") c = c.substring(1, c.length);
				if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
			}
			return null;
		}
		//document.cookie = 'AEFIS-PDF-GENERATED=false;path=/';
		aefis.util.createCookie("AEFIS-PDF-GENERATED", false, undefined, true, "SameSite=None");

		$(".aefis-object-action.pdf:not(.disabled),.aefis-object-action.pdfzip:not(.disabled)")
			.off("click")
			.on("click", function (e) {
				if (!$rootContainer) {
					var parents = $(e.target).parents();
					var isModal = false;
					parents.map(function () {
						if (
							$(this).hasClass("aefis-modal-export-options") ||
							$(this).hasClass("aefis-modal-dialog")
						) {
							isModal = true;
						}
					});
					if (isModal) {
						$rootContainer = ".modal-body";
					} else {
						$rootContainer = "#aefis-main-container";
					}
				}
				//document.cookie = 'AEFIS-PDF-GENERATED=false;path=/';
				aefis.util.createCookie(
					"AEFIS-PDF-GENERATED",
					false,
					undefined,
					true,
					"SameSite=None"
				);

				aefis.ui.loadingShow($rootContainer, "Creating File", "", true, false, 650, "25%");
				window.scrollTo(0, 0);
				$("body").addClass("modal-open");
				e.preventDefault();
				var url = $(this).attr("href");
				var target = $(this).attr("target");
				if (!target) {
					target = "aefis-hidden-iframe";
				}
				var refreshIntervalId = window.setInterval(function () {
					var cookie = aefis.util.cookieExists("AEFIS-PDF-GENERATED");
					var cookieValue = readCookie("AEFIS-PDF-GENERATED");

					if (cookieValue == "true") {
						aefis.ui.loadingHide($rootContainer);
						$("body").removeClass("modal-open");
						clearInterval(refreshIntervalId);
					}
				}, 100);
				setTimeout(function () {
					if (target) {
						window.open(url, target);
					} else {
						window.location.href = url;
					}
				}, 1500); //for Safari
			});
	};

	this.processCSVExportButtonUrl = function (filter, keywords) {
		$(
			".aefis-object-action.csv,.aefis-object-action.excel,.aefis-object-action.print.refresh-href-with-filter,.aefis-object-action.pdf.refresh-href-with-filter"
		).each(function () {
			var $button = $(this);
			var url = $button.attr("href");
			if (url) {
				/*var asyncUrl = aefis.util.getQueryParameter('asyncUrl', url);
                asyncUrl = aefis.util.decode(asyncUrl);
                if (asyncUrl) {
                	if (filter) {
                		asyncUrl += '&filter='+filter;
                	};
                	if (keywords) {
                		asyncUrl += '&keywords='+keywords;
                	};
                };
                var newUrl = aefis.util.removeQueryParameter('asyncUrl', url);
                newUrl += '&asyncUrl='+ aefis.util.encode(asyncUrl); */
				url = aefis.util.removeQueryParameter("filter", url);
				url = aefis.util.removeQueryParameter("keywords", url);
				if (filter && !$.isEmptyObject(filter)) {
					url += "&filter=" + encodeURIComponent(filter);
				}
				if (keywords) {
					url += "&keywords=" + keywords;
				}
				//var newUrl = aefis.util.removeQueryParameter('asyncUrl', url);
				$button.prop("href", url);
			}
		});
	};

	this.addPDFHashToUrl = function () {
		$(".aefis-object-action.pdf").each(function () {
			var $pdfButton = $(this);
			if ($pdfButton.attr("data-aefis-add-url-hash")) {
				var sPageURL = window.location.hash.substr(1);
				var hashValue = sPageURL.split("#");
				if (hashValue != "") {
					var buttonHref = $pdfButton.attr("href");
					buttonHref = aefis.util.removeQueryParameter("hash", buttonHref);
					buttonHref += "&hash=" + hashValue;
					$pdfButton.attr("href", buttonHref);
				}
			}
		});

		$(".aefis-object-action.print").each(function () {
			var $pdfButton = $(this);
			if ($pdfButton.attr("data-aefis-add-url-hash")) {
				var sPageURL = window.location.hash.substr(1);
				var hashValue = sPageURL.split("#");
				if (hashValue != "") {
					var buttonHref = $pdfButton.attr("href").split("#")[0];
					buttonHref += "#" + hashValue;
					$pdfButton.attr("href", buttonHref);
				}
			}
		});
	};

	this.processActionItemClick = function (el) {
		var $obj = $(el);
		// document.cookie = 'AEFIS-FILE-GENERATED=false;path=/';
		aefis.util.createCookie("AEFIS-FILE-GENERATED", false, undefined, true, "SameSite=None");

		aefis.ui.loadingShow("body", "Creating Data File", "", true, false, 610, "25%");
		window.scrollTo(0, 0);
		$("body").addClass("modal-open");

		var url = $obj.attr("href");

		var getFormParams = $obj.attr("data-aefis-get-form-params");
		if (getFormParams) {
			var params = aefis.forms.getFormParameters(getFormParams);
			for (var key in params) {
				url += "&" + key + "=" + params[key];
			}
		}
		//console.log(url);
		var target = $obj.attr("target");
		if (!target) {
			target = "aefis-hidden-iframe";
		}

		function readCookie(name) {
			var nameEQ = name + "=";
			var ca = document.cookie.split(";");
			for (var i = 0; i < ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == " ") c = c.substring(1, c.length);
				if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
			}
			return null;
		}

		var refreshIntervalId = window.setInterval(function () {
			var cookie = aefis.util.cookieExists("AEFIS-FILE-GENERATED");
			var cookieValue = readCookie("AEFIS-FILE-GENERATED");
			if (cookieValue == "true") {
				aefis.ui.loadingHide("body");
				$("body").removeClass("modal-open");
				clearInterval(refreshIntervalId);
			}
		}, 100);
		setTimeout(function () {
			if (target) {
				if (that.checkParametersLengthFor414Error(url)) {
					that.openWindowWithPost(url, target);
				} else {
					window.open(url, target);
				}
			} else {
				window.location.href = url;
			}
		}, 1500); //for Safari
	};

	this.checkParametersLengthFor414Error = function (url) {
		var splittedUrl = url.split("?");
		if (splittedUrl.length > 1) {
			var strParams = splittedUrl[1];
			if (strParams) {
				return strParams.length > 2000;
			}
		}
		return false;
	};

	this.openWindowWithPost = function (url, target) {
		var splittedUrl = url.split("?");
		var url = splittedUrl[0];
		var strParams = splittedUrl[1];
		var form = document.createElement("form");
		form.setAttribute("method", "post");
		form.setAttribute("action", url);
		form.setAttribute("target", target);
		var params = strParams.split("&");
		for (var param of params) {
			var splitedParam = param.split("=");
			var input = document.createElement("input");
			input.type = "hidden";
			input.name = splitedParam[0];
			if (splitedParam.length > 1) {
				input.value = splitedParam[1];
			}
			if (input.name == "reportParameters") {
				input.value = decodeURIComponent(input.value);
			}
			form.appendChild(input);
		}
		document.body.appendChild(form);
		window.open("", target);
		form.submit();
		document.body.removeChild(form);
	};

	this.initializeCSVDownloadNotification = function (obj) {
		if (obj) {
			var $clickedObject = $(obj);
			that.processActionItemClick($clickedObject);
		}
		$(
			".aefis-object-action.csv:not(.disabled),.aefis-object-action.excel:not(.disabled),.aefis-jasper-export:not(.disabled)"
		)
			.off("click")
			.on("click", function (e) {
				e.preventDefault();
				var $obj = $(this);
				that.processActionItemClick($obj);
			});
	};

	this.closeQuickFilter = function (el) {
		var $obj = $(el);
		var target = $obj.attr("data-aefis-target");
		var $target = $(target);
		$target.hide();
	};

	this.closeAllQuickFilters = function () {
		$(".aefis-quick-filter").hide();
	};

	this.initializeSearchHeader = function (container, stateLoad, autoLoad) {
		var $container = $(container);
		var saveState = $container.attr("data-aefis-save-state");
		var searchContainer = $container.attr("data-aefis-search-input-selector");
		var tagsContainer = $container.attr("data-aefis-tags-container-selector");
		var $searchContainer = $container.find(searchContainer);
		var $tagsContainer = $container.find(tagsContainer);
		var templateContainer = $searchContainer.attr("data-aefis-target");
		var $templateContainer = $(templateContainer);
		var $reset = $container.find("button.aefis-search-reset");
		var processStateSave = true;
		var isModal = false;

		if (saveState) {
			processStateSave = saveState;
		}

		if (!autoLoad) {
			autoLoad = false;
		}

		if ($container.parents().find("div.aefis-modal-dialog").first()) {
			isModal = true;
			stateLoad = "false";
			var $modalDialog = $container.parents().find("div.aefis-modal-dialog").first();
			var modalId = $modalDialog.attr("id");
			$templateContainer = $("#" + modalId + " " + templateContainer);
			$tagsContainer = $("#" + modalId + " " + tagsContainer);
			$searchContainer = $("#" + modalId + " " + searchContainer);
		}

		var existingFilter = aefis.util.getQueryParameter("tag");
		var hasTags = 0;
		var loadState = true;
		if (stateLoad && stateLoad == "false") {
			loadState = false;
		}
		if ($tagsContainer.html()) {
			hasTags = $tagsContainer.html().length;
		}
		if (!existingFilter) {
			if (hasTags) {
				$tagsContainer.hide();
				$(".aefis-manager-tag-search").removeClass("aefis-has-tags");
				$reset.fadeIn();
			}
			if (loadState) {
				aefis.app.loadStateFromServer(function (data) {
					if (data) {
						if (aefis.util.isObject(data)) {
							data = JSON.stringify(data);
						}
						var tagContent = JSON.parse(data);
					}
					if (tagContent && tagContent["viewdata"] && tagContent["viewdata"].length) {
						var tags = tagContent.viewdata;
						$tagsContainer.html(tags);
						$(".aefis-manager-tag-search").addClass("aefis-has-tags");
						$reset.fadeIn();
						$tagsContainer.show();
						if (processStateSave) {
							processTagsForSearchHeader($container, processStateSave);
						} else {
							processTagsForSearchHeader($container);
						}
					} else {
						if (hasTags) {
							processTagsForSearchHeader($container, "false");
						}
					}
				});
			}
		}

		$tagsContainer.on("aefisTagAdded", function () {
			if (processStateSave) {
				processTagsForSearchHeader($container, processStateSave);
			} else {
				processTagsForSearchHeader($container);
			}
		});

		$tagsContainer.on("aefisTagRemoved", function () {
			if (processStateSave) {
				processTagsForSearchHeader($container, processStateSave);
			} else {
				processTagsForSearchHeader($container);
			}
		});

		$container.on("searchHeaderParamsAdded", function () {
			that.initializeHandlebarsTemplate($templateContainer);
		});
	};

	function processTagsForSearchHeader(container, processStateSave) {
		var $container = $(container);
		var searchContainer = $container.attr("data-aefis-search-input-selector");
		var tagContainer = $container.attr("data-aefis-tags-container-selector");
		var $searchContainer = $(searchContainer);
		var templateContainer = $container.attr("data-aefis-target");

		var $tagContainer = $(tagContainer);
		var $templateContainer = $(templateContainer);
		var $searchField = $(
			$tagContainer.find(".mdl-chip").first().attr("data-aefis-search-field-id")
		);
		var inModal = false;
		var stateSave = true;
		if ($container.parents().find("div.aefis-modal-dialog").first()) {
			inModal = true;
			var $modalDialog = $container.parents().find("div.aefis-modal-dialog").first();
			var modalId = $modalDialog.attr("id");
			$templateContainer = $("#" + modalId + " " + templateContainer);
			$tagContainer = $("#" + modalId + " " + tagContainer);
			$searchContainer = $("#" + modalId + " " + searchContainer);
			$searchField = $(
				$("#" + modalId + " " + tagContainer)
					.find(".mdl-chip")
					.first()
					.attr("data-aefis-search-field-id")
			);
			stateSave = false;
		}

		var filter = {};
		var keywordsArray = [];
		var keywords = "";
		var $tags = $tagContainer.find(".mdl-chip");
		var $template = $(templateContainer);

		if (processStateSave && processStateSave == "false") {
			stateSave = false;
		}

		if ($tags.length) {
			filter = aefis.forms.parseFilterFromTag($tagContainer);
			keywords = aefis.forms.parseKeywordFromTag($tagContainer);
			$tagContainer.show();
			$(".aefis-manager-tag-search").addClass("aefis-has-tags");
			var $searchField = $(
				"#" + $tagContainer.find(".mdl-chip").first().attr("data-aefis-search-field-id")
			);
			if (!$searchField.length) {
				$searchField = $tagContainer
					.parents()
					.find("input.aefis-typeahead-generated-field")
					.last();
			}
			$templateContainer.attr("data-aefis-filter", filter);
			$templateContainer.attr("data-aefis-keywords", keywords);
			$templateContainer.trigger("SearchParamsUpdated");
		} else {
			$tagContainer.hide();
			$(".aefis-manager-tag-search").removeClass("aefis-has-tags");
			$templateContainer.removeAttr("data-aefis-filter");
			$templateContainer.removeAttr("data-aefis-keywords");
			$templateContainer = $templateContainer;
			$templateContainer.trigger("SearchParamsUpdated");
		}
		if (stateSave) {
			if ($tagContainer.html().length || filter.length) {
				var stateData = { parameters: filter, viewdata: $tagContainer.html() };
				aefis.app.setState(stateData);
				aefis.app.saveStateOnServer(stateData);
			} else {
				aefis.app.clearState();
				aefis.app.saveStateOnServer({});
			}
		}

		setTimeout(function () {
			$templateContainer.trigger("refresh");
			$container.trigger("searchHeaderParamsAdded");
		}, 500);
	}

	this.showQuickFilter = function (el) {
		var $obj = $(el);
		var templateId = $obj.attr("data-aefis-template-id");
		var $container = $('.aefis-quick-filter[data-aefis-template-id="' + templateId + '"');
		var $search = $container.find("input.aefis-menu-search");
		$container
			.show()
			.promise()
			.done(function () {
				if ($search.length) {
					$search.focus();
				} else {
					$container.find(".aefis-quick-filter-list li:first-child").focus();
				}

				$container.off("keyup").on("keyup", function (event) {
					if (event.keyCode === 13) {
						$container.find("ul.aefis-quick-filter-list li").each(function () {
							var $selectedObject = $(this);
							if ($selectedObject.is(":focus")) {
								$selectedObject.click();
							}
						});
					}

					if (event.keyCode === 27) {
						aefis.ui.closeAllQuickFilters();
					}
				});
			});
	};

	this.addQuickFilterToContainer = function (el) {
		var $obj = $(el);
		$(".aefis-quick-filter").hide();
		var $parents = $obj.parents();
		var $tagContainer = $parents.find(".aefis-quick-filter").attr("data-aefis-tag-container");
		if ($parents.find(".aefis-modal-dialog").length) {
			var $modal = $obj.parents().find(".aefis-modal-dialog").first();
			var modalId = $modal.attr("id");
			var containerId = $modal.find(".aefis-quick-filter").attr("data-aefis-tag-container");
			$tagContainer = "#" + modalId + " " + containerId;
		}
		var suggestion = {};
		var suggestionCode = $obj.attr("data-aefis-code");
		var suggestionEntity = $obj.attr("data-aefis-entity");
		var suggestionId = $obj.attr("data-aefis-id");
		var suggestionCss = $obj.attr("data-aefis-css");
		var tooltipText = $obj.attr("data-aefis-tooltip-text");
		if (suggestionCode) {
			suggestion["Code"] = suggestionCode;
		}
		if (suggestionEntity) {
			suggestion["Entity"] = suggestionEntity;
		}
		if (suggestionId) {
			suggestion["Id"] = suggestionId;
		}
		if (suggestionCss) {
			suggestion["Css"] = suggestionCss;
		}
		if (tooltipText) {
			suggestion["TooltipText"] = tooltipText;
		}

		aefis.forms.addTagToContainer(suggestion, $tagContainer);
	};

	this.getFormattedTag = function (
		suggestion,
		allowRemove,
		showTooltip,
		field,
		additionalClasses
	) {
		var css = "";
		var code = suggestion["Code"];
		var id = suggestion["Id"];
		var name = suggestion["Name"];
		var code = suggestion["Code"];
		var description = suggestion["Description"];
		var token = "";
		var tooltip = true;
		var entityName = suggestion["Entity"];
		var tooltipText = suggestion["TooltipText"];
		var $field = $(field);
		var displayValueParam = $field.attr("data-aefis-display-value");
		var displayValue = code;
		var addClasses = "";

		if (additionalClasses) {
			addClasses = additionalClasses;
		}

		if (code.charAt(0) == code.charAt(0).toLowerCase()) {
			displayValue = aefis.util.toTitleCase(code);
		}

		if (showTooltip && showTooltip === false) {
			tooltip = false;
		}

		if (suggestion["Css"]) {
			css = suggestion["Css"];
		}

		token += '<span class="mdl-chip animated flipInX ' + addClasses + " ";
		if (tooltip) {
			token += "aefis-tooltip ";
		}
		if (allowRemove) {
			token += " mdl-chip--deletable aefis-quick-filter-param-chip ";
		}
		token += css + '"';
		if (tooltip && entityName) {
			token += ' data-toggle="tooltip" ';
			token += 'data-placement="top" ';
			token += 'data-container="body" ';
			if (tooltipText) {
				token += 'data-original-title="' + tooltipText + '" ';
			} else {
				token += 'data-original-title="' + entityName + '" ';
			}
		}
		if ($field) {
			token += 'data-aefis-search-field-id="' + $field.attr("id") + '"';
		}
		if (entityName) {
			token += 'data-aefis-entity-name="' + entityName + '"';
		}
		if (code) {
			token += 'data-aefis-code="' + encodeURIComponent(code) + '"';
		}
		if (id) {
			token += 'data-aefis-id="' + encodeURIComponent(id) + '"';
		}
		if (description) {
			token += 'data-aefis-description="' + encodeURIComponent(description) + '"';
		}
		if (name) {
			token += 'data-aefis-name="' + encodeURIComponent(name) + '"';
			if (!(displayValueParam !== undefined && displayValue.toLowerCase() != "code")) {
				displayValue = name;
			}
		}
		token += ">";
		token += '<span class="mdl-chip__text">' + displayValue + "</span>";
		if (allowRemove) {
			token +=
				'<a onclick="aefis.util.triggerEvent(this);" aria-label="remove tag" href="javascript:void(0);" data-aefis-event="aefisTagRemoving" data-aefis-event-selector="body" class="aefis-remove-tag mdl-chip__action" tabindex=0><i class="material-icons" aria-hidden="true" >cancel</i></a>';
		}
		token += "</span>";

		return token;
	};

	this.businessObjectAccess = function (el) {
		var $obj = $(el);
		var url = $obj.attr("data-aefis-datasource");
		var businessObject = $obj.attr("data-aefis-business-object");
		var businessObjectId = $obj.attr("data-aefis-business-object-id");
		var refreshObject = $obj.attr("data-aefis-refresh-id");
		var refreshContainerId = "";

		if (refreshObject) {
			refreshContainerId = refreshObject;
		}

		url =
			url +
			"&businessObject=" +
			businessObject +
			"&businessObjectId=" +
			businessObjectId +
			"&refreshContainerId=" +
			refreshContainerId;
		var options = {
			title: "Edit Owner",
			contentUrl: url,
			titleIconClass: "fa fa-key",
			onShown: function () {
				manageBusinessObjectAccessOptions();
			},
			onClose: function () {
				that.closeAllPopovers();
			}
		};

		that.modalDialog(options);
	};

	this.editNotification = function (el) {
		var $obj = $(el);
		var title = $obj.attr("data-aefis-title");
		var refreshId = $obj.attr("data-aefis-refresh-id");
		var entity = $obj.attr("data-aefis-setting-entity");
		var entityId = $obj.attr("data-aefis-setting-entity-id");
		var settingName = $obj.attr("data-aefis-setting-object");
		var settingGroup = $obj.attr("data-aefis-setting-group");
		var notificationKey = $obj.attr("data-aefis-notification-key");
		var refreshId = $obj.attr("data-aefis-refresh");
		var url = $obj.attr("data-aefis-datasource");
		url += "&entityName=" + entity;
		url += "&entityId=" + entityId;
		url += "&settingsName=" + settingName;
		url += "&settingsGroup=" + settingGroup;
		url += "&refreshContainerId=" + refreshId;

		if (notificationKey) {
			url += "&notificationKey=" + notificationKey;
		}

		var dialogOptions = {
			title: title,
			contentUrl: url,
			size: "large",
			titleIconClass: "fa fa-pencil-alt fa-fw",
			closeCallback: function () {
				if ($("#Notification").tinymce()) {
					$("#Notification").tinymce().remove();
				}
				that.initializeHandlebarsTemplate("#" + refreshId);
				that.initializeHandlebarsTemplate("#" + refreshId + "-reminder");
			}
		};

		that.modalDialog(dialogOptions);
	};

	this.deleteNotification = function (el) {
		var $obj = $(el);
		var title = $obj.attr("data-aefis-title");
		var refreshId = $obj.attr("data-aefis-refresh-id");
		var entity = $obj.attr("data-aefis-setting-entity");
		var entityId = $obj.attr("data-aefis-setting-entity-id");
		var settingName = $obj.attr("data-aefis-setting-object");
		var settingGroup = $obj.attr("data-aefis-setting-group");
		var notificationKey = $obj.attr("data-aefis-notification-key");
		var refreshId = $obj.attr("data-aefis-refresh");
		var url = $obj.attr("data-aefis-datasource");

		url += "&entityName=" + entity;
		url += "&entityId=" + entityId;
		url += "&settingsName=" + settingName;
		url += "&settingsGroup=" + settingGroup;
		url += "&refreshContainerId=" + refreshId;

		if (notificationKey) {
			url += "&notificationKey=" + notificationKey;
		}

		var dialogOptions = {
			title: title,
			content:
				"You are about to delete this notifcation.<br/><br/>Deleting this notificaiton will replace the notification text with inherited or default text.<br/><br/>Are you sure?",
			titleIconClass: "trash",
			successMessage: "The notifcation was deleted.",
			confirmAction: url,
			onSuccess: function () {
				that.initializeHandlebarsTemplate("#" + refreshId);
				that.initializeHandlebarsTemplate("#" + refreshId + "-reminder");
			}
		};

		that.confirm(dialogOptions);
	};

	this.showAndHide = function (el, toggle) {
		var $obj = $(el);
		var target = $obj.attr("data-aefis-target");
		var $target = $("#" + target);
		var $showmore = $target.find(".aefis-show-more");
		var $showless = $target.find(".aefis-show-less");

		var showmoreHeight = $showmore.height();
		var showlessHeight = $showless.height();

		if (toggle == "more") {
			$showless.hide();
			$showmore.show();
			showmoreHeight = $showmore.height();
			$target.animate({ height: showmoreHeight });
		} else {
			$target.animate({ height: showlessHeight });
			$showless.show();
			$showmore.hide();
		}
	};

	this.inIframe = function () {
		try {
			return window.self !== window.top;
		} catch (e) {
			return true;
		}
	};

	this.loadTarget = function (button) {
		var $button = $(button);
		var message = $button.attr("data-aefis-message");
		var url = $button.attr("data-aefis-datasource");
		var loadMaskTarget = $button.attr("data-aefis-load-mask-container");
		if (!message) {
			message = "Loading";
		}
		if (!loadMaskTarget) {
			that.fullPagePreloader(message);
		} else {
			aefis.ui.loadingShow(loadMaskTarget, message, "", true, false);
		}

		$(window).trigger("AefisNotifications:close");
		window.location.href = url;
		return false;
	};

	/* toolbar functions */

	this.loadAefisMenuItem = function (el, event) {
		if (event) {
			event.preventDefault();
			event.stopPropagation();
		}
		var $menuItem = $(el);
		var menuText = $menuItem.html();
		var menuLocation = $menuItem.attr("href");
		var menuName = $menuItem.attr("data-aefis-name");
		var iconClass = $menuItem.attr("data-aefis-icon-class");
		var noSaveHistory = $menuItem.attr("data-aefis-no-save-history");

		if (!menuLocation || $menuItem.attr("data-aefis-datasource")) {
			menuLocation = $menuItem.attr("data-aefis-datasource");
		}

		if (menuName) {
			menuText = menuName;
		}

		if (!$menuItem.hasClass("signout")) {
			var menuData = {
				Name: menuText,
				Location: menuLocation,
				IconClass: iconClass
			};
			if (!noSaveHistory) {
				that.addItemToUserHistory(menuData);
			}
			window.scrollTo(0, 0);
			$(".aefis-top-menu-item").removeClass("open");
			$("body").addClass("modal-open");
			that.fullPagePreloader(menuText);
			window.location.href = menuLocation;
			aefis.ui.screenreaderAnnouncement("loading " + menuText + ". please wait.");
		} else {
			aefis.ui.screenreaderAnnouncement("signing out. please wait.");
		}
		$(window).trigger("AefisMainMenu:close");

		return false;
	};

	this.addItemToUserHistory = function (data) {
		var $historyContainer = $("#aefis-main-toolbar--sidebar-maintain-history");
		var url = $historyContainer.attr("data-aefis-datasource");
		var currentHistory = $historyContainer.html();
		var maxHistory = parseInt($historyContainer.attr("data-aefis-max-history"));
		var valueFound = false;
		if (currentHistory == undefined) {
			return;
		}
		if (currentHistory.length && currentHistory.trim() != "") {
			currentHistory = $.parseJSON(currentHistory);
		} else {
			currentHistory = [];
		}

		if (currentHistory.length) {
			var valueExists = currentHistory.filter(function (e) {
				return e.Name == data.Name;
			});

			if (valueExists && valueExists.length > 0) {
				//currentHistory.splice(data,1);
				valueFound = true;
			}
		}

		if (!valueFound) {
			currentHistory.unshift(data);
			if (currentHistory.length > maxHistory) {
				currentHistory.pop();
			}
			var dataStruct = {
				UserAppHistory: currentHistory
			};
			new aefis.ApiWrapper().call(url, {
				data: JSON.stringify(dataStruct),
				type: "POST",
				onSuccess: function () {
					//
				},
				onError: function (jqXhr, error) {
					that.userError("Unable to save the app in your history.");
					return false;
				}
			});
		}
	};

	function showFullPageLoadingMask(loadingText) {
		that.fullPagePreloader(loadingText);
	}

	function hideFullPageLoadingMask() {
		that.hideFullPagePreloader();
	}

	this.toggleAppHistory = function (el) {
		var $obj = $(el);
		var toggled = true;
		var isToggled = false;

		if (
			$obj.find("i.material-icons").html() == "cloud_off" ||
			!$obj.hasClass("aefis-main-toolbar--sidebar-record-history--active")
		) {
			toggled = false;
			isToggled = true;
		}
		if (toggled) {
			$obj.find("i.material-icons").html("cloud_off");
			$obj.removeClass("aefis-main-toolbar--sidebar-record-history--active");
			hideAppHistory();
			$obj.attr("aria-label", "show history");
			$obj.attr("title", "show history");
			aefis.ui.screenreaderAnnouncement("Showing your app history menu items.");
		} else {
			$obj.find("i.material-icons").html("cloud");
			$obj.addClass("aefis-main-toolbar--sidebar-record-history--active");
			showAppHistory();
			$obj.attr("aria-label", "hide history");
			$obj.attr("title", "hide history");
			aefis.ui.screenreaderAnnouncement("Hiding your app history menu items.");
		}
		var url = $("#aefis-main-toolbar--sidebar-toggle-history").attr("data-aefis-datasource");
		var setting = {
			RecordUserAppHistory: isToggled
		};
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(setting),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("We were unable to save your app history settings.");
				return false;
			}
		});
	};

	function showAppHistory() {
		var $parentContainer = $("#aefis-sidebar-parent-history");
		var $childContainer = $("#aefis-sidebar-children-history");
		var $iconButton = $parentContainer.find("i");
		if (!$iconButton.hasClass("aefis-parent-menu-toggle--active")) {
			aefis.ui.toggleMenuChildren($iconButton);
		}
		$parentContainer.show();
		$childContainer.show();
		setTimeout(function () {
			if ($iconButton.hasClass("aefis-parent-menu-toggle--active")) {
				aefis.ui.toggleMenuChildren($iconButton);
			}
		}, 250);
	}

	function hideAppHistory() {
		var $parentContainer = $("#aefis-sidebar-parent-history");
		var $childContainer = $("#aefis-sidebar-children-history");
		var $iconButton = $parentContainer.find("i");
		if (!$iconButton.hasClass("aefis-parent-menu-toggle--active")) {
			aefis.ui.toggleMenuChildren($iconButton, true);
		}
		var $sidebarButton = $("#aefis-main-toolbar--sidebar-toggle-history");
		setTimeout(function () {
			if (!$sidebarButton.hasClass("aefis-main-toolbar--sidebar-record-history--active")) {
				$parentContainer.hide();
				$childContainer.hide();
			}
		}, 250);
	}

	this.toggleSideBarFavorites = function (el) {
		var $obj = $(el);
		var toggled = false;
		var isToggled = true;
		if ($obj.find("i.material-icons").html() == "star") {
			toggled = true;
			isToggled = false;
		}
		if (toggled) {
			$obj.find("i.material-icons").html("star_border");
			$(".aefis-container-filter-field-clear").click();
			aefis.ui.screenreaderAnnouncement("Showing all menu items.");
			$obj.attr("aria-label", "show only favorite menu items");
		} else {
			$obj.find("i.material-icons").html("star");
			that.searchFilter(el);
			aefis.ui.screenreaderAnnouncement("Showing only your menu item favorites.");
			$obj.attr("aria-label", "show all menu items");
		}

		var url = $("#aefis-main-toolbar--sidebar-favorite-filter").attr("data-aefis-datasource");
		var menuItemFavorites = {
			FilterMenuByFavorites: isToggled
		};
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(menuItemFavorites),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your favorites.");
				return false;
			}
		});
	};

	this.toggleSearchCollection = function (el) {
		var $collection = $(el);
		var $searchSidebarSettings = $("#aefis-search--sidebar-settings");
		var favoriteArray = [];
		$searchSidebarSettings.find('input[type="checkbox"]:checked').each(function () {
			var $favorite = $(this);
			var collection = $favorite.attr("data-aefis-input-value");
			favoriteArray.push(collection);
		});

		var menuItemFavorites = {
			SearchCollections: favoriteArray
		};

		var url = $searchSidebarSettings.attr("data-aefis-datasource");
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(menuItemFavorites),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your favorite.");
				return false;
			}
		});
	};

	this.toggleMenuFavorite = function (el, skipUpdate) {
		var $obj = $(el);
		var $mainSidebar = $("#aefis-main-toolbar--sidebar");
		var isActive = false;
		var target = $obj.attr("data-aefis-target");
		var $target = $(target);
		var favoriteArray = [];

		if ($obj.hasClass("aefis-user-favorite--active")) {
			isActive = true;
		}

		if (isActive) {
			$obj.html('<i class="material-icons" aria-hidden="true" >star_border</i>');
			$obj.removeClass("aefis-user-favorite--active");
			$target.removeClass("aefis-menu-item--favorite");
			$(".aefis-container-filter-field-clear").click();
			$obj.attr("aria-pressed", false);
		} else {
			$obj.html('<i class="material-icons" aria-hidden="true" >star</i>');
			$obj.addClass("aefis-user-favorite--active");
			$target.addClass("aefis-menu-item--favorite");
			$obj.attr("aria-pressed", true);
		}

		if (!skipUpdate) {
			$mainSidebar
				.find(
					".aefis-user-favorite.aefis-user-favorite--active:not(.aefis-user-favorite--default)"
				)
				.each(function () {
					var $favorite = $(this);
					var menuItemId = $favorite.attr("data-aefis-menu-item-id");
					favoriteArray.push(parseInt(menuItemId));
				});

			var menuItemFavorites = {
				MenuItemFavorites: favoriteArray
			};

			var url = $("#aefis-main-toolbar--sidebar-favorite-filter").attr(
				"data-aefis-datasource"
			);
			new aefis.ApiWrapper().call(url, {
				data: JSON.stringify(menuItemFavorites),
				type: "POST",
				onSuccess: function () {
					if (isActive) {
						aefis.ui.screenreaderAnnouncement(
							"The menu item was removed from your favorites."
						);
					} else {
						aefis.ui.screenreaderAnnouncement(
							"The menu item was added to your favorites."
						);
					}
				},
				onError: function (jqXhr, error) {
					that.userError("Unable to save your favorite.");
					return false;
				}
			});
		}
	};

	this.screenreaderAnnouncement = function (text, container) {
		var $container = container ? $(container) : $("#aefis-main--announce-content");
		$container.html(text);
	};

	this.toggleAllSideBarChildren = function (button) {
		var $button = $(button);
		var shown = true;
		var buttonHtml = "visibility_off";
		var hide = false;
		if ($button.hasClass("children-closed")) {
			shown = false;
		}

		if (shown) {
			$button.addClass("children-closed");
			hide = true;
			aefis.ui.screenreaderAnnouncement("All menu items were collapsed.");
			$button.attr("aria-label", "expand all menu items");
			$button.attr("title", "expand all menu items");
		} else {
			buttonHtml = "visibility";
			$button.removeClass("children-closed");
			aefis.ui.screenreaderAnnouncement("All menu items were expanded.");
			$button.attr("aria-label", "collapse all menu items");
			$button.attr("title", "collapse all menu items");
		}
		$button.find("i.material-icons").html(buttonHtml);
		$("#aefis-main-toolbar--sidebar-content")
			.find(".aefis-parent-menu-toggle")
			.each(function () {
				var $parent = $(this);
				aefis.ui.toggleMenuChildren($parent, hide);
			});
		var url = $("#aefis-main-toolbar--sidebar-visibility-filter").attr("data-aefis-datasource");
		var menuItemFavorites = {
			FilterMenuByVisibility: shown
		};
		new aefis.ApiWrapper().call(url, {
			data: JSON.stringify(menuItemFavorites),
			type: "POST",
			onSuccess: function () {
				//
			},
			onError: function (jqXhr, error) {
				that.userError("Unable to save your setting.");
				return false;
			}
		});
	};

	this.toggleMenuChildren = function (el, forceHide) {
		var $obj = $(el);
		var isActive = false;
		var target = $obj.attr("data-aefis-target");
		var $target = $(target);

		if ($obj.find("i").hasClass("aefis-parent-menu-toggle--active")) {
			isActive = true;
		}

		if (forceHide) {
			isActive = false;
		}

		if (isActive) {
			$obj.find("i").removeClass("aefis-parent-menu-toggle--active");
			$target.removeClass("aefis-child-menu--collapsed");
			$target.attr("aria-hidden", false);
			$(".aefis-container-filter-field-clear").click();
			$obj.attr("aria-expanded", "true");
			$target.trigger("opened");
			$target.css("visibility", "visible");
		} else {
			$obj.find("i").addClass("aefis-parent-menu-toggle--active");
			$target.addClass("aefis-child-menu--collapsed");
			$obj.attr("aria-expanded", "false");
			$target.attr("aria-hidden", true);
			$target.trigger("closed");
			$target.css("visibility", "hidden");
		}
	};

	this.showPreviewObjectLoadingBar = function () {
		var $loadingBar = $("#aefis-object-preview-toolbar-load--progress");
		$loadingBar.fadeIn();
	};

	this.hidePreviewObjectLoadingBar = function () {
		var $loadingBar = $("#aefis-object-preview-toolbar-load--progress");
		$loadingBar.fadeOut();
	};

	this.highlightOutcomeContainer = function ($selectedContainer) {
		var $allContainers = $(".aefis-selectable-container");
		$allContainers.addClass("aefis-selectable-container--not-selected");
		$selectedContainer
			.removeClass("aefis-selectable-container--not-selected")
			.addClass("aefis-selectable-container--selected");
	};

	this.unhighlightAllOutcomeContainer = function () {
		var $allContainers = $("li.aefis-selectable-container");
		$allContainers.removeClass("aefis-selectable-container--not-selected");
		$allContainers.removeClass("aefis-selectable-container--selected");
	};

	this.showSecondaryApplicationLoadingBar = function () {
		var $loadingBar = $("#aefis-secondary-toolbar-application-load--progress");
		$loadingBar.fadeIn();
	};

	this.hideSecondaryApplicationLoadingBar = function () {
		var $loadingBar = $("#aefis-secondary-toolbar-application-load--progress");
		$loadingBar.fadeOut();
	};

	this.showApplicationLoadingBar = function () {
		var $loadingBar = $("#aefis-main-toolbar-application-load--progress");
		$loadingBar.fadeIn();
	};

	this.hideApplicationLoadingBar = function () {
		var $loadingBar = $("#aefis-main-toolbar-application-load--progress");
		$loadingBar.fadeOut();
	};

	this.loadSidebarApplication = function (el) {
		var $sidebarItem = $(el);
		$("#aefis-application-sidebar--container")
			.find(".aefis-application-sidebar-container-item--child-container a")
			.removeClass("aefis-application-sidebar--container--item--active");
		$sidebarItem.addClass(
			"current-selected aefis-application-sidebar--container--item--active"
		);
		$(window).trigger("AefisFramework.UI.Application:load");
	};

	this.searchFilter = function (el) {
		var $input = $(el);
		var tableObj = $input.attr("data-aefis-target");
		var findOneOf = $input.attr("data-aefis-find-item");
		var rows = $(tableObj).find(findOneOf + ":not(.aefis-search-ignore)");

		var inputValue = $input.attr("data-aefis-value");
		var filterClass = $input.attr("data-aefis-filter-class");

		if (!inputValue) {
			var inputValue = $input.val();
		}
		var data = inputValue.split(" ");
		var valueLength = inputValue.length;
		var alsoHide = $input.attr("data-aefis-also-hide");

		if (valueLength > 0) {
			$(".aefis-container-filter-field-clear").fadeIn();
		} else {
			$(".aefis-container-filter-field-clear").fadeOut();
		}

		$(tableObj).find(findOneOf).hide();
		$(alsoHide).hide();
		$.each(data, function (i, v) {
			rows = rows.filter(function () {
				var $item = $(this);
				if (filterClass) {
					return $item.hasClass(filterClass);
				} else {
					if (
						$item
							.find(".aefis-main-menu--item-title")
							.text()
							.toLowerCase()
							.indexOf(v.toLowerCase()) > -1
					) {
						return $item;
					} else if (
						$item
							.find(".aefis-search-item--container")
							.text()
							.toLowerCase()
							.indexOf(v.toLowerCase()) > -1
					) {
						return $item;
					}
				}
			});
		});
		$(rows).each(function () {
			var childOf = $(this).attr("data-aefis-child-of");
			if (childOf) {
				$(childOf).show();
				/*if (filterClass) {
                    $(childOf).find('.aefis-parent-menu-toggle').each(function() {
                        var $parent = $(this);
                        aefis.ui.toggleMenuChildren($parent, false);
                    });
                };*/
			}
		});
		rows.show();
	};

	this.clearSearchFilterField = function (el) {
		var $obj = $(el);
		var target = $obj.attr("data-aefis-target");
		var showItems = $obj.attr("data-aefis-show-item");
		$obj.fadeOut();
		if (target) {
			$(target).val("");
		} else {
			var $searchField = $obj.parent().find("input.aefis-container-filter-field");
			$searchField.val("");
			$searchField.focus();
			setTimeout(function () {
				$searchField.focus();
			});
		}
		if (showItems) {
			$(showItems).show();
		}
	};

	this.toggleSideBarSearch = function (el) {
		var $obj = $(el);
		var toolbar = $obj.attr("data-aefis-target");
		var $toolbar = $(toolbar);
		var toolbarHeight = $toolbar.height();
		var container = $("#aefis-main-toolbar--sidebar-content-container");
		var isOpen = false;
		var $searchInput = $toolbar.find("input.aefis-container-filter-field");

		if ($toolbar.hasClass("aefis-initialized")) {
			$toolbar.removeClass("aefis-initialized");
			isOpen = true;
			$toolbar.removeClass("aefis-search-active");
			$("#aefis-main-toolbar--sidebar-content").removeClass(
				"aefis-main-toolbar--sidebar-content-search-active"
			);
			$(".aefis-toolbar-menu--menu-toggle").focus();
			$obj.attr("aria-label", "hide main menu search");
			$obj.attr("title", "hide main menu search");
		} else {
			$toolbar.addClass("aefis-initialized");
			$toolbar.addClass("aefis-search-active");
			$(".aefis-container-filter-field-clear").click();
			$("#aefis-main-toolbar--sidebar-content").addClass(
				"aefis-main-toolbar--sidebar-content-search-active"
			);
			$obj.attr("aria-label", "show main menu search");
			$obj.attr("title", "show main menu search");
		}
		that.toggleAriaAttribute($toolbar, "aria-hidden", "true,false");
		setTimeout(function () {
			$searchInput.focus();
		});
	};

	this.dismissObject = function (el, remove) {
		var $obj = $(el);
		var target = $obj.attr("data-aefis-target");
		var $target = $(target);
		$target
			.fadeOut()
			.promise()
			.done(function () {
				if (remove) {
					$target.remove();
				}
			});
	};

	this.formatFormFieldMarkup = function ($element, isValid) {
		var errorInputName = $element.attr("name");

		if ($element.is(".relational-data-form-item")) {
			var $container = $element.closest(".relational-data-form-item-container");
			if ($container.length) {
				if (!isValid) {
					$container.addClass("aefis-form-validation-error");
					$element.on("change", function () {
						that.formatFormFieldMarkup($element, true);
					});
					if ($element.hasClass("aefis-table-formitem-validator")) {
						$element.on("onFormatFormFieldMarkup", function () {
							that.formatFormFieldMarkup($element, true);
						});
					}
				} else {
					$container.removeClass("aefis-form-validation-error");
				}
			}
			return;
		}
		if ($element.is("input.program-requirement-rule-required-item")) {
			var $container = $element.parents(".program-requirement-rule-container");
			if ($container.length) {
				if (!isValid) {
					$container.addClass("aefis-form-validation-error");
					$element.on("change", function () {
						that.formatFormFieldMarkup($element, true);
					});
				} else {
					$container.removeClass("aefis-form-validation-error");
				}
			}
			return;
		}

		if ($element.is("select")) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$element.on("change", function () {
					that.formatFormFieldMarkup($element, true);
				});
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="radio"].aefis-form-control')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$container.find('input[type="radio"]').on("ifChecked", function () {
					that.formatFormFieldMarkup($element, true);
				});
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("click", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="checkbox"].aefis-form-control')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$container.find('input[type="checkbox"]').on("ifChecked", function () {
					that.formatFormFieldMarkup($element, true);
				});
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("click", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is("textarea")) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$element.on("change", function () {
					that.formatFormFieldMarkup($element, true);
				});
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("click", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="text"]')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("change", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="radio"].matrix-question-item')) {
			var $container = $element.parent().closest(".aefis-formitem");
			if ($container.length) {
				$element.on("ifChecked", function () {
					that.formatFormFieldMarkup($container, true);
				});

				that.formatFormFieldMarkup($container, false);
			}
		}

		if ($element.is('input[type="hidden"].survey-form-doc-upload')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				var $numberContainer = $container.find(
					".aefis-question-number-container.survey-number-container"
				);
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("click", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="hidden"].file-upload-validator')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				var $numberContainer = $container.find(
					".aefis-question-number-container.survey-number-container"
				);
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);
				$container.on("click", function () {
					that.formatFormFieldMarkup($element, true);
				});

				that.formatFormFieldMarkup($element, true);
			}
		}

		if ($element.is('input[type="hidden"].select-user-business-object')) {
			var $container = $element.parent().closest(".survey-question-container");
			var $select = $container.find("select");
			$select.on("change", function () {
				that.formatFormFieldMarkup($select, true);
			});
			that.formatFormFieldMarkup($select, false);
		}

		if ($element.is('input[type="hidden"].require-answer-at-least-one-item-hidden')) {
			var $container = $element.parent().closest(".survey-question-container");
			var $checkbox = $container.find(".require-answer-at-least-one-item-checkbox");
			$checkbox.on("ifToggled", function () {
				var $chk = $(this);
				var $qContainer = $chk
					.closest(".survey-question-container")
					.find("> .aefis-question-number-container.survey-number-container");
				$qContainer.removeClass("aefis-form-validation-error");
			});
			$container
				.find("> .aefis-question-number-container.survey-number-container")
				.addClass("aefis-form-validation-error");
			return;
		}

		if ($element.is('input[type="hidden"].table-hidden-form-item')) {
			var $container = $element.parent().closest(".survey-question-container");
			if ($container.length) {
				$element.on("onFormatFormFieldMarkup", function () {
					that.formatFormFieldMarkup($element, true);
				});
				$element = $container.find(
					"legend,.aefis-question-number-container.survey-number-container"
				);

				that.formatFormFieldMarkup($element, true);
			}
		}

		if (!isValid) {
			$element.addClass("aefis-form-validation-error");
			$('label[for="' + errorInputName + '"]').addClass("aefis-form-validation-error");
			$element.on("focus", function () {
				that.formatFormFieldMarkup($element, true);
			});
		} else {
			$element.removeClass("aefis-form-validation-error");
			$('label[for="' + errorInputName + '"]').removeClass("aefis-form-validation-error");
		}
	};

	function initializeAefisSearch() {
		var $aefisSearchSidebar = $("#aefis-search--sidebar");
		var $aefisSearchSidebarContent = $("#aefis-search--sidebar-content");
		var $aefisSearchProgress = $("#aefis-search--sidebar-results-header--progress");
		var templateContainer = $("#aefis-search-sidebar--settings-collection-template");

		if (!$aefisSearchSidebar.hasClass("aefis-search-initialized")) {
			that.initializeHandlebarsTemplate(templateContainer);
			$(window).on("AefisSearch:searching", function () {
				$aefisSearchSidebar.find("#aefis-search--sidebar-results-count").fadeOut();
				$aefisSearchSidebarContent.fadeOut();
				$aefisSearchSidebar
					.find("div.aefis-search--sidebar-results-header")
					.addClass("aefis-show");
				$aefisSearchProgress.fadeIn();
				$("#aefis-search--sidebar-settings").removeClass(
					"aefis-search--sidebar-settings--active"
				);
				$aefisSearchSidebarContent.removeClass("aefis-search--sidebar-content--inactive");
				$aefisSearchSidebarContent.addClass("aefis-no-scroll");
				that.createSkeletonContent("#aefis-search--sidebar-content", 6, 4);
			});
			$(window).on("AefisSearch:completed", function () {
				$aefisSearchSidebarContent.fadeIn();
				$aefisSearchSidebar.find("#aefis-search--sidebar-results-count").fadeIn();
				$aefisSearchProgress.fadeOut();
				$aefisSearchSidebarContent.removeClass("aefis-no-scroll");
			});
			$(window).on("AefisSearch:success", function () {});
			$(window).on("AefisSearch:opened", function () {
				// $('#aefisGlobalSearchInputField').val('');
				setFocusToFirstItemInObject($aefisSearchSidebar);

				$aefisSearchSidebar.keydown(function (e) {
					trapTabKey($(this), e);
				});
				$("#aefisGlobalSearchInputField").focus();
			});

			$(window).on("AefisSearch:closed", function () {
				$("#aefis-search--sidebar-settings").removeClass(
					"aefis-search--sidebar-settings--active"
				);
				$aefisSearchSidebarContent.removeClass("aefis-search--sidebar-content--inactive");
			});

			$aefisSearchSidebar.addClass("aefis-search-initialized");
		}
	}

	this.formItemResponseMergeDialog = function (
		data,
		resultTrueCallback,
		acceptCurrentCallback,
		acceptIncomingCallback
	) {
		if (data.hasOwnProperty("result")) {
			if (data.result == true) {
				resultTrueCallback.call();
			} else {
				var $dialog = $("#aefis-form--merge-request-dialog");
				$(document)
					.off("click", "#accept-current")
					.on("click", "#accept-current", function () {
						acceptCurrentCallback.call();
					});
				$(document)
					.off("click", "#accept-incoming")
					.on("click", "#accept-incoming", function () {
						acceptIncomingCallback.call();
					});
				var $content = $dialog.find(".aefis-content");
				$content.html("");
				var $userInfo = $dialog.find("#merge-request--user-info");
				var $emptyContent = $dialog.find("#merge-request--empty-content");
				if (data.hasOwnProperty("updatedFormItem") && data.updatedFormItem.trim() != "") {
					var contentData =
						'<div class="aefis-formItem-options-container row-fluid">' +
						data.updatedFormItem +
						"</div>";
					$content.append(contentData);
					$userInfo.show();
					$emptyContent.hide();
				} else {
					$userInfo.hide();
					$emptyContent.show();
				}
				$dialog.find(".updated-by-first-name").text(data.updatedBy.firstName);
				$dialog.find(".updated-by-last-name").text(data.updatedBy.lastName);
				$dialog.find(".updated-date").text(moment(data.updatedDate).fromNow());
				//aefis.app.initializePage($listItem.closest('.aefis-formitem'));
				var options = {
					title: "Changes",
					content: $dialog.html(),
					titleIconClass: "fa fa-code-merge",
					hideHeaderClose: true,
					onShown: function () {
						setTimeout(function () {
							var items = $dialog.find(
								"input.aefis-radio-input, input.aefis-checkbox-input"
							);
							aefis.ui.initializeAefisInput(items);
						}, 1000);
					},
					showFooterCloseButton: false
				};
				aefis.ui.modalDialog(options);
			}
		}
	};

	this.formArtifactPreviewInFrameContainer = function (button) {
		var $button = $(button);
		var $mainContainer = $("#aefis-document-preview--container");
		var urlVariable = $button.attr("data-aefis-variable");
		var url = $button.attr("data-aefis-datasource");
		var targetContainer = $button.attr("data-aefis-target");
		var idSource = $button.attr("data-aefis-id-source");
		var loadingMaskText = "Loading Preview";
		var $idSource = $(idSource);
		var idAttribute = $button.attr("data-aefis-id");
		if ($idSource.length) {
			var id = $idSource.selectpicker("val");
			url = url + "&" + urlVariable + "=" + id;
		}

		if (idAttribute) {
			var id = idAttribute;
			url = url + "&" + urlVariable + "=" + id;
		}

		if (id && targetContainer) {
			$mainContainer.fadeIn();
			var $targetContainer = $(targetContainer);
			$targetContainer.fadeIn();
			var ifrm = document.getElementById(targetContainer);
			ifrm = ifrm.contentWindow || ifrm.contentDocument.document || ifrm.contentDocument;
			if (ifrm && ifrm.aefis) {
				ifrm.aefis.ui.filePreview("", url, targetContainer, true);
			}
		}
	};

	this.hidePrintAndPDFOptions = function () {
		if ($(".aefis-object-action.print").length) {
			var $print = $(".aefis-object-action.print");
			$print.hide();
		}

		if ($(".aefis-object-action.pdf").length) {
			var $pdf = $(".aefis-object-action.pdf");
			$pdf.hide();
		}
	};

	this.showPrintAndPDFOptions = function () {
		if ($(".aefis-object-action.print").length) {
			var $print = $(".aefis-object-action.print");
			$print.show();
		}

		if ($(".aefis-object-action.pdf").length) {
			var $pdf = $(".aefis-object-action.pdf");
			$pdf.show();
		}
	};

	this.scrollToFormSection = function (el) {
		var $obj = $(el);
		var $iframe = $("#aefis-object-preview-iframe");
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var sectionId = $obj.attr("data-aefis-survey-section-id");
		var selector = $obj.attr("data-aefis-survey-section-selector");
		var $item = null;
		if (typeof selector !== "undefined") {
			var $selector = $container.find(selector);
			if (typeof sectionId !== "undefined") {
				$item = $selector.find("div[data-aefis-survey-section-id=" + sectionId + "]");
			} else {
				$item = $selector;
			}
		} else {
			$item = $container.find("div[data-aefis-survey-section-id=" + sectionId + "]");
		}
		if ($iframe.length) {
			var w = document.getElementById("aefis-object-preview-iframe").contentWindow;
			$(w).animate({ scrollTop: $item.offset().top - 50 }, 500);
		}
	};

	this.highlightFormItem = function (el) {
		var $obj = $(el);
		var $iframe = $("#aefis-object-preview-iframe");
		var $container = $("body");
		if ($iframe.length) {
			$container = $iframe.contents();
		}
		var itemIsCurrentlyChecked = false;
		if ($obj.hasClass("active-timeline-item")) {
			itemIsCurrentlyChecked = true;
		}

		if (itemIsCurrentlyChecked) {
			$obj.removeClass("active-timeline-item");
			$container.find(".use-highlight-border").removeClass("use-highlight-border");
		} else {
			$("div.timeline-container")
				.find("div.timeline-item")
				.removeClass("active-timeline-item");
			$obj.addClass("active-timeline-item");
			$container.find(".use-highlight-border").removeClass("use-highlight-border");
			var formItemId = $obj.attr("data-aefis-form-item-id");
			var formItemKey = $obj.attr("data-aefis-form-item-key");
			var embededParentOptionId = $obj.attr("data-aefis-embeded-parent-option-id");
			var embededParentSecondaryId = $obj.attr("data-aefis-embeded-parent-secondary-id");
			if (
				typeof embededParentOptionId !== typeof undefined &&
				typeof embededParentSecondaryId !== typeof undefined
			) {
				$container = $container.find(
					"div[data-aefis-embedded-questions-parent-option-id=" +
						embededParentOptionId +
						"][data-aefis-embedded-questions-parent-secondary-id=" +
						embededParentSecondaryId +
						"]"
				);
			}
			if (typeof formItemKey !== typeof undefined) {
				var $item = $container.find("div[data-aefis-formitem-id=" + formItemKey + "]");
			} else {
				var $item = $container.find("div[data-aefis-formitem-id=" + formItemId + "]");
			}
			//$item.css("background-color", "green");
			$item.addClass("use-highlight-border");
			if ($iframe.length) {
				var w = document.getElementById("aefis-object-preview-iframe").contentWindow;
				$(w).animate({ scrollTop: $item.offset().top - 50 }, 500);
			}
		}
	};
};
