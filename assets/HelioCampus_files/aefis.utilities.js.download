// Copyright (c) 2013 AEFIS, all rights reserved.
// http://www.aefis.com/

"use strict";

window.aefis = window.aefis || {};
var aefis = window.aefis;

aefis.Utilities = function () {
	var that = this;

	this.getAefisBrowserType = function() {
		var $browser = $('#aefis-browser-type');
		var browserType = '';
		if ($browser.length) {
			browserType = $browser.val();
		};

		if (browserType != '') {
			if (browserType.includes('Chrome')) {
				browserType = 'Chrome';
			};
			if (browserType.includes('Firefox')) {
				browserType = 'Firefox';
			};
			if (browserType.includes('Safari')) {
				browserType = 'Safari';
			};
			if (browserType.includes('MSIE')) {
				browserType = 'MSIE';
			};
			if (browserType.includes('Edge')) {
				browserType = 'Edge';
			};
		};

		return browserType;
	};

	this.loadScript = function(name, location, callback) {
		if (loadedScripts.indexOf(name) != -1) {
			callback.call();
		} else {
			$.getScript(location, function() {
				loadedScripts.push[name];
				callback.call();
			});
		}
	}

	this.isMobileDevice = function () {
		var isMobile = false;
		if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
			|| /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) { 
			isMobile = true;
		};
		return isMobile;
	}

	this.getElementText = function (e) {
		if (e.text != undefined)
			return e.text;
		return e.textContent;
	};

	this.getQueryString = function () {
		return window.location.search.substring(1);
	};

	this.getHostUrl = function () {
		var url = window.location.protocol + '//' + window.location.hostname;
		if (window.location.port != '') {
			url += ':' + window.location.port;
		}
		return url;
	};

	this.getHash = function () {
		return window.location.hash.substring(1);
	};

	this.decode = function(value) {
		return Base64.decode(value);
	}

	this.encode = function(value) {
		return Base64.encode(value);
	}
	
	this.getQueryParameter = function (name, url) {
		name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
		var regexS = "[\\?&]" + name + "=([^&#]*)";
		var regex = new RegExp(regexS);
		if (!url) {
			url = window.location.href;
		};
		var results = regex.exec(url);
		if (results == null)
			return "";
		else
			return decodeURIComponent(results[1]);
	};

	this.cleanArray = function(array) {
		var newArray = new Array();
		for (var i = 0; i < array.length; i++) {
			if (array[i]) {
				newArray.push(array[i]);
			}
		}
  	return newArray;
	};

	this.removeQueryParameter = function(parameter, url) {
	    var urlparts= url.split('?');   
	    if (urlparts.length>=2) {

	        var prefix= encodeURIComponent(parameter)+'=';
	        var pars= urlparts[1].split(/[&;]/g);

	        //reverse iteration as may be destructive
	        for (var i= pars.length; i-- > 0;) {    
	            //idiom for string.startsWith
	            if (pars[i].lastIndexOf(prefix, 0) !== -1) {  
	                pars.splice(i, 1);
	            }
	        }

	        url= urlparts[0]+'?'+pars.join('&');
	        return url;
	    } else {
	        return url;
	    }
	}

	this.reloadPage = function(loadmaskDivId,loadMaskText) {
		if (loadmaskDivId) {
			aefis.ui.loadingShow('#'+loadmaskDivId,loadMaskText,'',true,false);
		};
		window.location.reload();
	}

	this.isObject = function(val) {
		if (val === null) { return false;}
		return ( (typeof val === 'function') || (typeof val === 'object') );
	}

	this.triggerEvent = function (el) {
		var $obj = $(el);
		var eventName = $obj.attr('data-aefis-event');
		var selector = $obj.attr('data-aefis-event-selector');

		$(selector).trigger(eventName, $obj);
		return;
	}

	this.triggerEventByParams = function (eventName, selector) {
		$(selector).trigger(eventName);
		return;
	}

	this.supportsLocalStorage = function() {
    	return ('localStorage' in window) && window['localStorage'] !== null;
	}

	this.cookieExists = function(name) {
		var dc = document.cookie;
		var prefix = name + "=";
		var begin = dc.indexOf("; " + prefix);
		if (begin == -1) {
			begin = dc.indexOf(prefix);
			if (begin != 0) return null;
		} else {
			begin += 2;
			var end = document.cookie.indexOf(";", begin);
			if (end == -1) {
	        	end = dc.length;
			}
		}
		return unescape(dc.substring(begin + prefix.length, end));
	}

	function createCookie(name, value, days,isSecure, sameSiteParam, httpOnlyParam) {
		that.createCookie(name, value, days,isSecure, sameSiteParam, httpOnlyParam);
	}

	function eraseCookie(name) {
		that.eraseCookie(name);
	}

	this.createCookie = function(name, value, days, sameSiteParam, httpOnlyParam) {
		var expires='';
		var sameSite = '; SameSite=Lax';
		var secure='';
		var httpOnly='';

		if (sameSiteParam) {
			sameSite = '; ' + sameSiteParam;
		};

		if (httpOnlyParam) {
			var httpOnly = '; HttpOnly=true';
		};

		if (window.location.protocol == 'https:') {
			secure = '; Secure';
		};
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
			expires = "; expires=" + date.toGMTString();
		};
		var cookieValue = name + "=" + value + expires + secure + sameSite + httpOnly + "; path=/";
		document.cookie = cookieValue;
	}

	function readCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	this.eraseCookie = function(name) {
		createCookie(name, "", -1);
	}

	this.createUUID = function() {
		function s4() {
			return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
		}
 		return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	};

	this.getRandomInt = function(min, max) {
		if (!min) {
			min = 1;
		};
		if (!max) {
			max = 9999;
		};
		return Math.floor(Math.random() * (max - min + 1)) + min;
	}

	this.getUrlForTitle = function (title) {
		var reg = /\b[a-zA-Z]+\b/g;
		var nameUrl = reg.exec(title);
		var next;

		while (next = reg.exec(title))
			nameUrl += '-' + next;
		return nameUrl;
	};

	this.formatNumberWithCommas = function(x) {
		var parts = x.toString().split(".");
		parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		return parts.join(".");
	}

	this.ellipsify = function (text, length) {
		return text.length > length ? text.substr(0, length - 1) + 'â€¦' : text;
	};
	
	this.toTitleCase = function (str) {
    	return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
	};

	this.splitCamelCase = function (str) {
		return str.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3').replace(/^./, function(str){ return str.toUpperCase(); })
	}

	this.browserNotificationsEnabled = function() {
		var notification = window.Notification;
console.log(notification)
var enabled;
		if (notification) {
			var permitted = notification.permission == 'denied' ? false : true;
			console.log(permitted)
			if (!permitted) {
	            notification.requestPermission().then(function(result) {
	            	if (result == 'granted') {
	            		enabled = true;
	            	};
	            	return enabled;
	            });
	        } else {
	        	enabled = true;
	        };
		};
		return enabled;
	};

	this.requestBrowserNotification = function(title, opts) {
		var enabled = aefis.util.browserNotificationsEnabled();
		var notification = window.Notification;
		if (enabled) {
			var defaults = {
				body: '',
				dir: 'auto',
				lang: 'EN',
				tag: 'notificationPopup',
				icon: ''
			};
			var options = $.extend({}, defaults, opts);
			var n = new notification(title, options);
			console.log(n)
		};
	};

	this.stripTags = function(str, allowed_tags) {
	    var key = '', allowed = false;
	    var matches = [];    var allowed_array = [];
	    var allowed_tag = '';
	    var i = 0;
	    var k = '';
	    var html = ''; 
	    var replacer = function (search, replace, str) {
	        return str.split(search).join(replace);
	    };
	    // Build allowes tags associative array
	    if (allowed_tags) {
	        allowed_array = allowed_tags.match(/([a-zA-Z0-9]+)/gi);
	    }
	    str += '';

	    // Match tags
	    matches = str.match(/(<\/?[\S][^>]*>)/gi);
	    // Go through all HTML tags
	    for (key in matches) {
	        if (isNaN(key)) {
	                // IE7 Hack
	            continue;
	        }

	        // Save HTML tag
	        html = matches[key].toString();
	        // Is tag not in allowed list? Remove from str!
	        allowed = false;

	        // Go through all allowed tags
	        for (k in allowed_array) {            // Init
	            allowed_tag = allowed_array[k];
	            i = -1;

	            if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+'>');}
	            if (i != 0) { i = html.toLowerCase().indexOf('<'+allowed_tag+' ');}
	            if (i != 0) { i = html.toLowerCase().indexOf('</'+allowed_tag)   ;}

	            // Determine
	            if (i == 0) {                allowed = true;
	                break;
	            }
	        }
	        if (!allowed) {
	            str = replacer(html, "", str); // Custom replace. No regexing
	        }
	    }
	    return str;
	}

	this.removeClassStartsWith = function($obj, filter) {
		$obj.removeClass (function (index, className) {
			var regx = new RegExp('\\b' + filter + '.*?\\b', 'g');
			return (className.match(regx) || []).join(' ');
		});
		return $obj;
	}

	this.setFileUpload = function ($fileUpload, $idInput, $removeButton) {
		var apiWrapper = new aefis.ApiWrapper();

		$fileUpload.fileupload({
			url: '/api/media/' + $idInput.val(),
			sequentialUploads: true,
			singleFileUploads: false,
			dataType: 'json',
			progressall: function (e, data) {
				var progress = parseInt(data.loaded / data.total * 100, 10);
				$('#progress').removeClass('hidden');
				$('#progress .bar').css(
					'width',
					progress + '%'
					);
			},
		}).bind('fileuploadalways', function (e, data) {
			if (data && data.xhr() && data.xhr().status === 200 && (JSON.parse(data.xhr().response))[0]) {
				$('#progress').addClass('hidden');
				$('.fileupload').removeClass('fileupload-new').addClass('fileupload-exists');
				$('.fileupload').find('.fileupload-preview img').attr('src', '/api/media/' + (JSON.parse(data.xhr().response))[0]._id);
				$('.fileupload').find('span.fileupload-preview').html((JSON.parse(data.xhr().response))[0].fileName);
				$idInput.val((JSON.parse(data.xhr().response))[0]._id);
				that.setFileUpload($fileUpload, $idInput, $removeButton);
			}
		});

		function fileDeleted(response, jqXhr) {
			$('.fileupload').addClass('fileupload-new').removeClass('fileupload-exists');			
			$('.fileupload').find('span.fileupload-preview').html('');
			$idInput.val('');
			that.setFileUpload($fileUpload, $idInput, $removeButton);
		}

		$removeButton.click(function(event){
			var command = 'media/' + $idInput.val();

			apiWrapper.apiCall(command, null, 'DELETE', fileDeleted, fileDeleted);
		});
	};

	/////////////////////////////
	// boolean comparePropertySet(propertyListString,obj1,obj2)
	// Utility Function: Returns true if keys in propertyListString exist in both objects and values for both are the same, otherwise false.
	this.comparePropertySet = function(propertyListString,obj1,obj2){
		var keyArray = propertyListString.split(',');
		if(!keyArray.length){
			return true;
		}
		var curKey;
		for(var i=0; i < keyArray.length; i++){
			if(!(keyArray[i] in obj1) || !(keyArray[i] in obj2) || obj1[keyArray[i]] != obj2[keyArray[i]]){
				return false;
			}
		}
		return true;
	};
	
	/*
	// sorts array by property using optional descending (boolean. asc by default)
	this.arraySort = function(array,property,descending){
		if(jQuery.type(array) != 'array'){
			return array; // not array, just return
		}
		if(array.length == 0){
			return array;
		}
		if(!(property in array[0])){ // nothing to sort by
			return array;
		}
		if(descending){
			var sortFn = function(a, b){
				var aProp = a[property].toLowerCase();
				var bProp = b[property].toLowerCase();
				return ((aProp > bProp) ? -1 : ((aProp < bProp) ? 1 : 0));
			}
		}else{
			// ascending
			var sortFn = function(a, b){
				var aProp = a[property].toLowerCase();
				var bProp = b[property].toLowerCase();
				return ((aProp < bProp) ? -1 : ((aProp > bProp) ? 1 : 0));
			}
		}
		return array.sort(sortFn);
	};
	*/
	
	// new array sort
	// sorts array by property using optional descending (boolean. asc by default)
	// sortBy can be in the form of {'property1','property2'} or any sort property 
	// can be an object with additional parameters for that individual property:
	// {'property1'{name:'property2', primer:parseInt, reverse:true},{name:'property3,reverse:true}}
	// both primer and reverse are optional. primer is a function to prime (or convert) a property 
	// prior to comparison
	this.objectArraySort = function(objectArray,sortBy){
		var sort_by = function() {
			var fields = [].slice.call(arguments),
				n_fields = fields.length;

			return function(A, B) {
				var a, b, field, key, primer, reverse, result;
				for (var i = 0, l = n_fields; i < l; i++) {
					result = 0;
					field = fields[i];

					key = typeof field === 'string' ? field : field.name;

					a = A[key];
					b = B[key];

					if (typeof field.primer !== 'undefined') {
						a = field.primer(a);
						b = field.primer(b);
					}

					reverse = (field.reverse) ? -1 : 1;

					if (a < b) result = reverse * -1;
					if (a > b) result = reverse * 1;
					if (result !== 0) break;
				}
				return result;
			}
		};
		return objectArray.sort(sort_by(sortBy));
	};
	
	// converts functionNameString to a function call (example: 'aefis.ui.modalDialog') without the need to use eval().
	// applies arguments in the argumentsArray. called in the undefined scope.
	this.callFunctionByStringName = function(functionNameString, argumentsArray) {
		that.getFunctionByStringName(functionNameString).apply(undefined,argumentsArray);
	};
	
	// returns function in path functionNameString
	this.getFunctionByStringName = function(functionNameString) {
		var nameArray = functionNameString.split('.');
		var fn = window;
		for ( var i=0; i < nameArray.length; i++ ) {
			fn = fn[nameArray[i]];
		}
		return fn;
	};
	
	this.getDataColor = function (value, minValue, maxValue) {
		value = Math.max(value, minValue);
		value = Math.min(value, maxValue);

		var colors = ['green', 'lightgreen', 'yellow', 'tomato', 'red'];
		var index = Math.round(((value - minValue) * 1.0 * colors.length) / (maxValue - minValue));

		return colors[index]; 
	}

    function parseColorComponent(color, component) {
        var c = "";

        if (component == "r") {
            c = color.substring(1, 3);
        } else if (component == "g") {
            c = color.substring(3, 5);
        } else if (component == "b") {
            c = color.substring(5, 7);
        }
        return parseInt("0x" + c);
    }

    this.getRainbow = function (mincolor, maxcolor, value, range) {
        if (value < 0)
            value = 0;
        if (value > range)
            value = range;

        var minred = parseColorComponent(mincolor, "r");
        var mingreen = parseColorComponent(mincolor, "g");
        var minblue = parseColorComponent(mincolor, "b");
        var maxred = parseColorComponent(maxcolor, "r");
        var maxgreen = parseColorComponent(maxcolor, "g");
        var maxblue = parseColorComponent(maxcolor, "b");
        var red = "0" + Math.floor(minred + ((maxred - minred) * value / range)).toString(16);
        var green = "0" + Math.floor(mingreen + ((maxgreen - mingreen) * value / range)).toString(16);
        var blue = "0" + Math.floor(minblue + ((maxblue - minblue) * value / range)).toString(16);

        red = red.substring(red.length - 2, red.length);
        green = green.substring(green.length - 2, green.length);
        blue = blue.substring(blue.length - 2, blue.length);
        return "#" + red + green + blue;
    }	

    this.getRedToGreen = function (value, range) {
    	if (value < range / 2) {
    		return this.getRainbow('#ee4444', '#eeee44', value, range / 2);
    	}
    	return this.getRainbow('#eeee44', '#44ee44', value - range / 2, range / 2);
    }
    
	this.hexToRgba = function (hex,opacity) {
		hex = hex.replace('#','');
		var r = parseInt(hex.substring(0,2), 16);
		var g = parseInt(hex.substring(2,4), 16);
		var b = parseInt(hex.substring(4,6), 16);

		return 'rgba('+r+','+g+','+b+','+opacity/100+')';
	}

	this.formatFilesize = function(bytes) {
		if (bytes >= 1073741824) { return that.roundNumber(bytes / 1073741824, 2) + ' GB'; }
		if (bytes >= 1048576)    { return that.roundNumber(bytes / 1048576, 2) + ' MB'; }
		if (bytes >= 1024)       { return that.roundNumber(bytes / 1024, 0) + ' KB'; }
		return bytes + ' B';
	}
	
	this.roundNumber = function(number, decimalPlaces) {
		return Math.round(number*Math.pow(10,decimalPlaces))/Math.pow(10,decimalPlaces);
	}
	
	this.htmlEncode = function(value){
		if (value) {
			return jQuery('<div />').text(value).html();
		} else {
			return '';
		}
	}
	 
	this.htmlDecode = function(value) {
		if (value) {
			return $('<div />').html(value).text();
		} else {
			return '';
		}
	}

	this.removeCommonWordsFromString = function(sentence) {
		//var wordArr = sentence.match(/\w+/g);
		sentence = sentence.replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()?]/g,"");
		var wordArr = sentence.match(/\S+/g);
        var commonObj = {};
        var uncommonArr = [];
       	var common = "the,be,to,of,I,and,a,not,thing,in,that,was,very,isn't,is,too,got,are,have,I,it,for,on,with,he,as,you,do,at,this,but,his,by,from,they,we,say,her,she,or,an,will,my,one,all,would,there,their,what,so,up,out,if,about,who,get,which,go,me,when,make,can,like,no,just,him,know,take,people,into,year,your,some,could,them,see,other,than,then,now,look,only,come,its,over,think,also,back,after,use,two,how,our,well,way,even,want,because,any,these,give,day,most,us,used,did,via,weren't,wasn't,didn't,am,i'll,i've,i'd,we'll,we've,they've,where,were,why,shouldn't";
        var ignoreWordsContainer = $('#aefis-word-cloud-ignore-words');
        if (ignoreWordsContainer && ignoreWordsContainer.html() && ignoreWordsContainer.html().length) {
        	common = ignoreWordsContainer.html()
        };

        var word;
        
        if (sentence && sentence.length) {
        	common = common.split(",");
		    for ( var i = 0; i < common.length; i++ ) {
		        commonObj[ common[i].trim().toLowerCase() ] = true;
		    }

		    if (wordArr){
		    	for ( var i = 0; i < wordArr.length; i++ ) {
			        word = wordArr[i].trim().toLowerCase();
			        if ( !commonObj[word] ) {
			            uncommonArr.push(word);
			        }
			    }
		    };
        };
	    
	    return uncommonArr;
	};

	this.stringCount = function(sentence) {
		var wordArray = that.removeCommonWordsFromString(sentence); // array
	    if (!wordArray.length || !sentence) {
	        return false;
	    } else {
	    	var words = [];
	        var counts = [];
	        var tempIndex = 0;
	        for ( var i = 0; i < wordArray.length; i++ ) {
	        	tempIndex = $.inArray(wordArray[i], words);
	        	if ( tempIndex >= 0 ) {
	        		counts[tempIndex] = counts[tempIndex] + 1;
	            } else {
	            	words[words.length] = wordArray[i];
	            	counts[counts.length] = 1;
	            }
	        }
	        var returnArray = [];
	        for ( var j = 0; j < words.length; j++ ) {
	        	returnArray[j] = [words[j], counts[j]];
	        }
	        return returnArray;
	    }
	}

	this.isJson = function(data) {
		var isJson = true;
		try {
			var jsonstr = $.parseJSON(data);
		} catch(e) {
			isJson = false;
		}
		return isJson;
	};

	this.isValidUrl = function (url) {
        var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
		if(!pattern.test(url)) {
		    return false;
	  	} else {
		    return true;
		}
    }

    this.replaceUrlParameter = function (existingUrl, name, value) {
		var urlArray = existingUrl.split('?');
		var url = urlArray[0] + "?";
		var params = urlArray[1];
		var paramsArray = params.split('&');
		for (var i=0; i<paramsArray.length; i++) {
			if (i>0) { url += "&"; }
			var val = paramsArray[i].split('=');
			if (val[0]==name) {
				url += val[0] + "=" + value;
				var hasReportParameter = true;
			} else {
				url += val[0] + "=" + val[1];
			}
		}

		if (!hasReportParameter) {
			url += '&' + name + "=" + value;
		}

		return url;
 	}

 	this.removeUrlParameter = function (existingUrl, name) {
		var urlArray = existingUrl.split('?');
		var url = urlArray[0] + "?";
		var params = urlArray[1];
		var paramsArray = params.split('&');
		var isAddSeparator = false;
		for (var i=0; i<paramsArray.length; i++) {
			var val = paramsArray[i].split('=');
			if (val[0] != name) {
				if (isAddSeparator) { 
					url += "&"; 
				} else {
					isAddSeparator = true;
				}
				url += val[0] + "=" + val[1];
			}
		}
		return url;
 	}

 	this.getUrlParameterValue = function (existingUrl, name) {
		var urlArray = existingUrl.split('?');
		var params = urlArray[1];
		var paramsArray = params.split('&');
		for (var i=0; i<paramsArray.length; i++) {
			var val = paramsArray[i].split('=');
			if (val[0] == name) {
				return val[1];
			}
		}
		return null;
 	}
};

/*
* Date Format 1.2.3
* (c) 2007-2009 Steven Levithan <stevenlevithan.com>
* MIT license
*
* Includes enhancements by Scott Trenda <scott.trenda.net>
* and Kris Kowal <cixar.com/~kris.kowal/>
*
* Accepts a date, a mask, or a date and a mask.
* Returns a formatted version of the given date.
* The date defaults to the current date/time.
* The mask defaults to dateFormat.masks.default.
*/

var dateFormat = function () {
	var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
	timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
	timezoneClip = /[^-+\dA-Z]/g,
	pad = function (val, len) {
		val = String(val);
		len = len || 2;
		while (val.length < len) val = "0" + val;
		return val;
	};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var _ = utc ? "getUTC" : "get",
		d = date[_ + "Date"](),
		D = date[_ + "Day"](),
		m = date[_ + "Month"](),
		y = date[_ + "FullYear"](),
		H = date[_ + "Hours"](),
		M = date[_ + "Minutes"](),
		s = date[_ + "Seconds"](),
		L = date[_ + "Milliseconds"](),
		o = utc ? 0 : date.getTimezoneOffset(),
		flags = {
			d: d,
			dd: pad(d),
			ddd: dF.i18n.dayNames[D],
			dddd: dF.i18n.dayNames[D + 7],
			m: m + 1,
			mm: pad(m + 1),
			mmm: dF.i18n.monthNames[m],
			mmmm: dF.i18n.monthNames[m + 12],
			yy: String(y).slice(2),
			yyyy: y,
			h: H % 12 || 12,
			hh: pad(H % 12 || 12),
			H: H,
			HH: pad(H),
			M: M,
			MM: pad(M),
			s: s,
			ss: pad(s),
			l: pad(L, 3),
			L: pad(L > 99 ? Math.round(L / 10) : L),
			t: H < 12 ? "a" : "p",
			tt: H < 12 ? "am" : "pm",
			T: H < 12 ? "A" : "P",
			TT: H < 12 ? "AM" : "PM",
			Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
			o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
			S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
		};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
} ();

// Some common format strings
dateFormat.masks = {
	"default": "ddd mmm dd yyyy HH:MM:ss",
	customDefault: "mmm d, yyyy @ h:MM:ss TT",
	shortDate: "m/d/yy",
	mediumDate: "mmm d, yyyy",
	longDate: "mmmm d, yyyy",
	fullDate: "dddd, mmmm d, yyyy",
	shortTime: "h:MM TT",
	mediumTime: "h:MM:ss TT",
	longTime: "h:MM:ss TT Z",
	isoDate: "yyyy-mm-dd",
	isoTime: "HH:MM:ss",
	isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
	"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
	"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
	"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
	"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
	try {
		return dateFormat(this, mask, utc);
	} catch (e)
	{
		return 'Invalid Date';
	}
};

if (typeof (Number.prototype.toRad) === "undefined") {
	Number.prototype.toRad = function () {
		return this * Math.PI / 180;
	};
}
if (typeof Number.prototype.toDeg == 'undefined') {
	Number.prototype.toDeg = function () {
		return this * 180 / Math.PI;
	};
}

/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/
 
var Base64 = {
 
    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
 
        input = Base64._utf8_encode(input);
 
        while (i < input.length) {
 
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
 
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
 
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
 
            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
        }
 
        return output;
    },
 
    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
 
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
        while (i < input.length) {
 
            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));
 
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
 
            output = output + String.fromCharCode(chr1);
 
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
 
        }
 
        output = Base64._utf8_decode(output);
 
        return output;
    },
 
    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
 
        for (var n = 0; n < string.length; n++) {
 
            var c = string.charCodeAt(n);
 
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
 
        }
 
        return utftext;
    },
 
    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c, c1, c2, c3;

        c = c1 = c2 = 0;
 
        while ( i < utftext.length ) {
 
            c = utftext.charCodeAt(i);
 
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
 
        }
 
        return string;
    }
 	
}
