// Copyright (c) 2013 AEFIS, all rights reserved.
// http://www.aefis.com/

"use strict";
var ajaxRequest = {};
var aefisselect = {
    _init: function() {
        var $selectContainer = $(this.element);
        var container = 'body';
        var defaultSize = 'auto';
        var options = $.extend(this.defaultOptions, this.options);
        var loadTarget = this.isLoadTarget($selectContainer);
        var that = this;
        var ajaxRequest = {};
        if ($selectContainer.attr('data-container')) {
            container = $selectContainer.attr('data-container');
        };

        options.container = container;

        if ($selectContainer.attr('data-size')) {
            options.defaultSize = $selectContainer.attr('data-size');
        };

        $selectContainer.selectpicker(options);

        if (!loadTarget || options.forceLoad) {
            this.loadOptions();
        };

        $selectContainer.off('defaultValueSet').on('defaultValueSet', function() {
            that.removeDefaultValue($selectContainer);
            $selectContainer.selectpicker('refresh');
            that.loadLinkedSelect($selectContainer);
            if ($selectContainer.attr('data-aefis-force-value')) {
                that.forceTargetSelectValue($selectContainer);
            };
        });
        var multipleOptionArray = [];

        $selectContainer.on('change', function(e) {
            var hasDefault = that.hasDefaultValue($selectContainer);
            var allOption = $selectContainer.attr('data-aefis-all-option');
            //$selectContainer.selectpicker('refresh');
            if (!hasDefault || $selectContainer.attr('multiple')) {
                that.loadLinkedSelect($selectContainer);
            };

            if ($selectContainer.attr('data-aefis-force-value')) {
                that.forceTargetSelectValue($selectContainer);
            };
            if (allOption && $selectContainer.attr('multiple')) {
                var id;
                $(this).find("option").each(function() {
                    if ($(this).is(":selected")) {
                        id = $(this).attr("value");
                        if (multipleOptionArray.indexOf(id) == -1) {
                            multipleOptionArray.push(id);
                        }
                    } else {
                        id = $(this).attr("value");
                        multipleOptionArray = jQuery.grep(multipleOptionArray, function(value) {
                            return value != id;
                        });
                    };
                });

                var value = multipleOptionArray[multipleOptionArray.length - 1];

                if (value == '') {
                    if ($selectContainer.find('option:not(.aefis-select-all-value):selected').length) {
                        $selectContainer.selectpicker('deselectAll');
                        $selectContainer.selectpicker('val', '');
                        $selectContainer.find('option.aefis-select-all-value:selected').prop('selected', true);
                        $selectContainer.selectpicker('refresh')
                    }
                } else {
                    if ($selectContainer.find('option.aefis-select-all-value:selected').length) {
                        $selectContainer.find('option.aefis-select-all-value:selected').prop('selected', false);
                        $selectContainer.selectpicker('refresh')
                    };
                }

            };

            $selectContainer.trigger('selectChanged');
        });

        this.extendSelectpicker();
    },

    forceTargetSelectValue: function(container) {
        var $container = $(container);
        var $parentForm = $container.closest('form');
        var target = $container.attr('data-aefis-target');
        var $target = $($parentForm.find(target));
        var forceValue = $container.attr('data-aefis-force-value');
        var triggerValue = $container.attr('data-aefis-trigger-value');
        var currentValue = $container.val();

        if (currentValue == triggerValue) {
            $target.selectpicker('val', forceValue);
            $target.find('option').each(function() {
                var $option = $(this);
                if ($option.val() != forceValue) {
                    $option.addClass('disabled').attr('disabled', 'disabled');
                };
            });
            $target.selectpicker('refresh');
        } else {
            $target.find('option').each(function() {
                var $option = $(this);
                $option.removeClass('disabled').removeAttr('disabled');
            });
            $target.selectpicker('refresh');
        };
    },

    isLoadTarget: function(container) {
        var isTarget = false;
        var thisId = $(container).attr('id');

        $('select.aefis-select').each(function() {
            var $select = $(this);
            if ($select.attr('data-aefis-update-controls')) {
                var $container = $(this);
                var targets = $container.attr('data-aefis-update-controls');
                var isList = targets.indexOf(',');
                if (isList > -1) {
                    var targetsArray = targets.split(',');
                    for (var ii = 0; ii < targetsArray.length; ii++) {
                        if (targetsArray[ii] == '#' + thisId) {
                            var $target = $('#' + thisId);
                            isTarget = true;
                            $target.prop('disabled', true);
                            $target.html('');
                            $target.selectpicker('refresh');
                        }
                    };
                } else {
                    if (targets == '#' + thisId) {
                        var $target = $('#' + thisId);
                        isTarget = true;
                        $target.prop('disabled', true);
                        $target.html('');
                        $target.selectpicker('refresh');
                    }
                }
            };
        });
        return isTarget;
    },

    loadStaticOptions: function() {
        var $container = $(this.element);
        var containerId = $container.attr('id');
        var staticOptions = $container.attr('data-aefis-template');
        var that = this;

        $container.prop('disabled', true);
        $container.html(staticOptions);
        that.removeExcludeValues($container);
        if (!$container.hasClass('aefis-prev-disabled')) {
            $container.prop('disabled', false);
        };
        that.hasAllOption($container);
        $container.selectpicker('refresh');
        $container.selectpicker('val', $container.val());
        that.setDefaultValue($container);
        that.extendSelectpicker();
        $container.trigger('dataLoaded');
    },

    loadOptions: function() {
        var $container = $(this.element);
        var containerId = $container.attr('id');
        var $selectPicker = $('.selectpicker[data-id="' + containerId + '"]');
        var url = this.options.datasource || $container.attr('data-aefis-datasource');
        var params = $container.attr('data-aefis-parameters');
        var paramsNames = $container.attr('data-aefis-parameters-name');
        var isLoadTarget = this.isLoadTarget($container);
        var useFilters = $container.attr('data-aefis-use-filter');
        var hasRequiredParameters = $container.attr('data-aefis-required-parameters');

        var that = this;
        if (!url) {
            that.loadStaticOptions();
        };

        if (isLoadTarget && params && params.length == 0) {
            $container.prop('disabled', true);
            $container.html('');
            $container.selectpicker('refresh');
            return false;
        };
        if (params && isLoadTarget || hasRequiredParameters) {
            if (!params) {
                $container.prop('disabled', true);
                $container.html('');
                $container.selectpicker('refresh');
                if (ajaxRequest.hasOwnProperty(containerId)) {
                    ajaxRequest[containerId].abort();
                    $container.removeClass('aefis-ajaxLoading');
                };
                return false;
            };

            if (useFilters) {
                var filter = params.substring(1, params.length - 1).replaceAll('{', '').replaceAll('}', '');
                var originalParams = params;
                filter = filter.replaceAll('{', '').replaceAll('}', '');

                var additionalParameters = $container.attr('data-aefis-additional-parameters');
                if ( additionalParameters !== undefined ) {
                    var isParamList = additionalParameters.indexOf(',');
                    if (isParamList > -1) {
                        var additionalParametersArray = String(additionalParameters).split(',');
                        for (var additionalParameter in additionalParameters) {
                           var val = $('#'+additionalParameter).val();
                            if ( val !== undefined && val!=null && val!='') {
                                filter += ',' + additionalParameter + '=' + val;
                            } 
                        }
                    } else {
                        var val = $('#'+additionalParameters).val();
                        if ( val !== undefined && val!=null && val!='') {
                            filter += ',' + additionalParameters + '=' + val;
                        }
                    }
                }

                filter = '{' + filter + '}';
                params = 'filter=' + encodeURIComponent(filter);

                var requiredParameters = $container.attr('data-aefis-required-parameters');
                if (requiredParameters) {
                    var requiredParametersArray = String(requiredParameters).split(',');
                    var paramObject = JSON.parse(originalParams);
                    var numberOfRequiredParams = requiredParametersArray.length;
                    var numberOfParams = 0;
                    for (var property in paramObject) {
                        for (var p in paramObject[property]) {
                            if ($.inArray(p, requiredParametersArray) > -1) {
                                numberOfParams++;
                            }
                        }
                    };
                    if (numberOfRequiredParams != numberOfParams) {
                        return false;
                    }
                };

            } else {
                var isParamList = params.indexOf(',');
                if (isParamList > -1) {
                    var paramNameArray = paramsNames.split(',');
                    var paramValueArray = params.split(',');
                    var newParams = '';
                    if (paramsNames.indexOf(',') == -1) {
                        params = paramsNames + '=' + params;
                    } else {
                        for (var i = 0; i < paramNameArray.length; i++) {
                            newParams = newParams + paramNameArray[i] + '=' + paramValueArray[i] + '&';
                        };
                        params = newParams;
                    };
                } else {
                    params = paramsNames + '=' + params;
                };
            };

        };

        if (!url) {
            that.setDefaultValue($container);
            return;
        };

        $container.prop('disabled', true);
        $container.html('');
        $container.selectpicker('refresh');
        //$container.addClass('aefis-ajaxLoading');
        if (ajaxRequest.hasOwnProperty(containerId)) {
            ajaxRequest[containerId].abort();
            $container.removeClass('aefis-ajaxLoading');
        };

        ajaxRequest[containerId] = new aefis.ApiWrapper().call(url, {
            data: params,
            onComplete: function() {
                that.animateLoading($selectPicker, 'stop');
                delete ajaxRequest[containerId];
                //$container.removeClass('aefis-ajaxLoading');
            },
            beforeSend: function() {
                that.animateLoading($selectPicker, 'start');
            },
            onSuccess: function(data) {
                if (data.length) {
                    $container.trigger('dataLoadedWithRecords');
                } else {
                    $container.trigger('dataLoadedNoRecords');
                    $container.prop('disabled', true);
                };
                var source = that.getDataTemplate($container);
                source = that.hasAllOption($container, source);
                if (source) {
                    var template = Handlebars.compile(source);
                    $container.html(template({ records: data }));
                };

                that.removeExcludeValues($container);

                if (!$container.hasClass('aefis-processed-published') && !$container.hasClass('aefis-prev-disabled')) {
                    $container.prop('disabled', false);
                };
                $container.selectpicker('refresh');
                var isSetDefault = true;
                var isSetDefaultParameter = $container.attr('data-aefis-set-default-after-load'); // this attribute prevents auto submit of docartifact form item after load options
                if ( typeof isSetDefaultParameter !== typeof undefined ) {
                    isSetDefault = (typeof isSetDefaultParameter === "boolean" ? isSetDefaultParameter : isSetDefaultParameter == 'true');
                }
                //this attribute is used in report pages to initiliaze controls
                var defaultValue = $container.attr('data-aefis-defaultvalue');
                if ( isSetDefault && !defaultValue ) {
                    $container.selectpicker('val', $container.val());
                }
                that.setDefaultValue($container);
                that.extendSelectpicker();
                $container.trigger('dataLoaded');
                var isNotDisableForNoData = false;
                var isNotDisableForNoDataParameter = $container.attr('data-aefis-not-disable-for-no-data');
                if ( typeof isNotDisableForNoDataParameter !== typeof undefined ) {
                    isNotDisableForNoData = (typeof isNotDisableForNoDataParameter === "boolean" ? isNotDisableForNoDataParameter : isNotDisableForNoDataParameter == 'true');
                }
                if (!isNotDisableForNoData && data.length == 0) {
                    $container.prop('disabled', true);
                };
            }
        });
    },

    animateLoading: function(selectpicker, action) {
        var $selectpicker = $(selectpicker);
        //var containerWidth = $selectpicker.width();
        //var containerLoadingWidth = containerWidth - 33;
        if (action == 'start') {
            //$selectPicker.animate({width: containerLoadingWidth},200);
            $selectpicker.addClass('aefis-ajaxLoading').selectpicker('setStyle');
            $selectpicker.find('span.caret').hide();
        } else {
            $selectpicker.find('span.caret').show();
            //$selectPicker.animate({width: containerWidth},200);
            //$selectpicker.parent().removeClass('aefis-ajaxLoading');
            $selectpicker.removeClass('aefis-ajaxLoading').selectpicker('setStyle');
        }
    },

    removeExcludeValues: function(container) {
        var $container = $(container);
        var excludeValueId = $container.attr('data-aefis-exclude-values');

        if (excludeValueId) {
            $container.find('option').each(function() {
                var $option = $(this);
                var currentValue = $option.attr('value');
                if (excludeValueId.indexOf(currentValue) > -1) {
                    $option.attr('disabled', 'disabled');
                };
            });
        };
    },

    setDefaultValue: function(container) {
        var $container = $(container);
        if (this.hasDefaultValue($container)) {
            var defaultValue = $container.attr('data-select-default-value');
            var alternativeValueAttribute = $container.attr('data-select-default-value-attribute');
            if (defaultValue) {
                try {
                    if ($container.attr('Multiple')) {
                        defaultValue = $.parseJSON(defaultValue);
                    };
                } catch (e) {
                    //
                };
                if (alternativeValueAttribute) {
                    var $option = $container.find('option['+alternativeValueAttribute+'="'+defaultValue+'"]');
                    $option.prop('selected','selected');
                    //$container.selectpicker('refresh');
                } else {
                    $container.selectpicker('val', defaultValue); //set default value if defined
                    $container.selectpicker('refresh');
                };
            } else {
                var autoDefault = $container.attr('value');
                if (autoDefault) {
                    $container.selectpicker('val', autoDefault); //set default value if defined
                    $container.selectpicker('refresh');
                };
            };

            $container.trigger('defaultValueSet');
        } else {
            var allOption = $container.attr('data-aefis-all-option');
            if (allOption) {
                $container.selectpicker('val', ''); //set default value if defined
                $container.selectpicker('refresh');
            };
        };
    },

    removeDefaultValue: function(container) {
        var $container = $(container);
        $container.removeAttr('value').removeAttr('data-select-default-value');
    },

    hasAllOption: function(container, template) {
        var $container = $(container);
        var allOption = $container.attr('data-aefis-all-option');
        var templateContent = template;
        var option = '<option class="aefis-select-all-value" value="">';
        option += allOption;
        option += '</option>';
        if (allOption) {
            templateContent = option + templateContent;
        };
        return templateContent;
    },

    hasDefaultValue: function(container) {
        var $container = $(container);
        var defaultValue = $container.attr('data-select-default-value');
        var defaultValueSetByObject = $container.attr('value');
        var hasDefault = false;

        if (defaultValue || defaultValueSetByObject) {
            hasDefault = true;
        };

        return hasDefault;
    },

    setNullOption: function(container) {
        var $container = $(container);
        var nullOption = $container.attr('data-aefis-select-null-option');

        if (nullOption) {
            $container.prepend($('<option>', {
                value: '',
                text: nullOption
            }));
            $container.selectpicker('refresh');
        };
    },

    loadLinkedSelect: function(container) {
        var $container = $(container);
        var updateParamValue = $container.selectpicker('val');
        var updateParamName = $container.attr('id');
        var updateControl = $container.attr('data-aefis-update-controls');
        var alternateUpdateParamName = $container.attr('data-aefis-alternate-parameter-id');
        var loadLinkedIfNull = $container.attr('data-allow-null-update');
        var autoLoadTarget = $container.attr('data-auto-load-target');
        var loadLinked = true;

        var useFilters = $container.attr('data-aefis-use-filter');
        var alternateParameterValueKey = $container.attr('data-aefis-alternate-parameter-value');
        if ( alternateParameterValueKey !== undefined ) {
            if ( $container.find('option:selected').length >= 1 ){
                updateParamValue = [];
                $container.find('option:selected').each(function(){
                    updateParamValue.push( $(this).attr(alternateParameterValueKey) );
                });
            } else {
                updateParamValue = $container.find('option:selected').attr(alternateParameterValueKey);
            }
        }
        if (alternateUpdateParamName) {
            updateParamName = alternateUpdateParamName;
        };

        if (useFilters && updateParamValue && updateParamValue.length) {
            var controlAndValueArray = [];
            var updateValues = {};

            if (updateParamValue) {
                updateValues[updateParamName] = updateParamValue;
                controlAndValueArray.push(updateValues);
                updateParamValue = controlAndValueArray;
            }
        };
        if (loadLinkedIfNull && loadLinkedIfNull == 'false' && !updateParamValue) {
            loadLinked = false;
        };
        if (updateControl && $(updateControl) && loadLinked) {
            var isParamList = updateControl.indexOf(',');
            var forceLoad = true;
            if (isParamList > -1) {
                var updateControlArray = updateControl.split(',');
                for (var i = 0; i < updateControlArray.length; i++) {
                    forceLoad = true;
                    if (useFilters) {
                        this.updateControlWithValueArray(updateControlArray[i], updateParamValue);
                    } else {
                        this.setLinkedSelectIds(container, updateControlArray[i]);
                        this.updateControl(updateControlArray[i], updateParamName, updateParamValue);
                    };
                    if (autoLoadTarget && autoLoadTarget != updateControlArray[i]) {
                        forceLoad = false;
                    };
                    $(updateControlArray[i]).aefisselect({
                        forceLoad: forceLoad
                    });
                };
            } else {
                if (useFilters) {
                    this.updateControlWithValueArray(updateControl, updateParamValue);
                } else {
                    this.setLinkedSelectIds(container, updateControl);
                    this.updateControl(updateControl, updateParamName, updateParamValue);
                };
                if (autoLoadTarget && autoLoadTarget != updateControl) {
                    forceLoad = false;
                };
                $(updateControl).aefisselect({
                    forceLoad: forceLoad
                });
            };
        };
    },

    setLinkedSelectIds: function(container, targetContainer) {
        var $container = $(container);
        var $targetContainer = $(targetContainer);
        var containerId = '#' + $container.attr('id');
        var linkedSelectId = $targetContainer.attr('data-aefis-linked-select');
        if (!containerId) {
            //error
        };
        if (linkedSelectId) {
            if (linkedSelectId.indexOf(containerId) == -1) {
                var newValue = linkedSelectId + ',' + containerId;
                $targetContainer.attr('data-aefis-linked-select', newValue);
            };
        } else {
            $targetContainer.attr('data-aefis-linked-select', containerId);
        };
    },

    updateControl: function(control, parameterName, parameterValue) {
        var $control = $(control);
        if (!parameterValue || !parameterValue.length || parameterValue == '') {
            return;
        }
        var controlHasExistingParams = $control.attr('data-aefis-parameters');
        if (!controlHasExistingParams) {
            $control.attr('data-aefis-parameters', parameterValue);
            $control.attr('data-aefis-parameters-name', parameterName);
        } else {
            var existingParameterNames = $control.attr('data-aefis-parameters-name');
            var existingParameterValues = $control.attr('data-aefis-parameters');
            var isParamList = -1;
            if (existingParameterNames) {
                isParamList = existingParameterNames.indexOf(',');
            }

            if (isParamList > -1) {
                var existingParameterNamesArray = existingParameterNames.split(',');
                var existingParameterValuesArray = existingParameterValues.split(',');
                var nameFoundAtIndex = $.inArray(parameterName, existingParameterNamesArray);

                if (nameFoundAtIndex > -1) {
                    existingParameterValuesArray[nameFoundAtIndex] = parameterValue;
                    $control.attr('data-aefis-parameters', existingParameterValuesArray);
                } else {
                    $control.attr('data-aefis-parameters', existingParameterValues + ',' + parameterValue);
                    $control.attr('data-aefis-parameters-name', existingParameterNames + ',' + parameterName);
                }
            } else {
                if (parameterName == existingParameterNames) {
                    $control.attr('data-aefis-parameters', parameterValue);
                } else {
                    $control.attr('data-aefis-parameters', existingParameterValues + ',' + parameterValue);
                    $control.attr('data-aefis-parameters-name', existingParameterNames + ',' + parameterName);
                }
            }
        };
    },

    updateControlWithValueArray: function(updateControl, parameterArray) {
        var $control = $(updateControl);
        var controlHasExistingParams = $control.attr('data-aefis-parameters');

        if (parameterArray && parameterArray.length) {
            if (!controlHasExistingParams || controlHasExistingParams == 'null') {
                $control.attr('data-aefis-parameters', JSON.stringify(parameterArray));
            } else {
                var existingParametersArray = JSON.parse(controlHasExistingParams);
                var incomingParametersArray = parameterArray[0];
                $.each(incomingParametersArray, function(iKey, iValue) {
                    for (var i = existingParametersArray.length - 1; i >= 0; i--) {
                        if (existingParametersArray[i][iKey]) {
                            existingParametersArray.splice(i, 1);
                        };
                    };
                });
                existingParametersArray.push(incomingParametersArray);
                $control.attr('data-aefis-parameters', JSON.stringify(existingParametersArray))
            }
        } else {
            $control.removeAttr('data-aefis-parameters');
        };
    },

    getDataTemplate: function(item) {
        // This returns the data template attribute of creates a template for the select controls.
        var template = $(item).attr("data-aefis-template");

        if (template) {
            return template;
        }

        var idField = $(item).attr("data-aefis-id-field");
        var nameTemplate = $(item).attr("data-aefis-name-template");
        var nameField = $(item).attr("data-aefis-name-field");
        var notFound = $(item).attr("data-aefis-notfound");

        if (nameField) {
            nameField = '{{' + nameField + '}}';
        } else {
            nameField = nameTemplate;
        }
        if (!(idField && nameField)) {
            aefis.app.error('Invalid screen initialization.');
            return '';
        }

        var template = '{{#each records}}\
							<option value="{{' + idField + '}}">' + nameField + '</option>\
						{{else}}\
							<option value="">' + notFound + '</option>\
						{{/each}}';
        if (!($(item).attr("multiple")) && $(item).attr("title")) {
            var title = $(item).attr("title")

            template = '<option disabled="disabled" selected="selected" value="">' + title + '</option>' + template;
        }
        return template;
    },

    extendSelectpicker: function() {
        var $container = $(this.element);
        var that = this;

        that.setNullOption($container);
    },

    defaultOptions: {
        setIcons: false,
        dropupAuto: false,
        forceLoad: false,
        //size: defaultSize,
        title: 'No Option Selected'
            //width: 'auto'
    }
};

$.widget("aefis.aefisselect", aefisselect);