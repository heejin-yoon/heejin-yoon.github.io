// Copyright (c) 2013 AEFIS, all rights reserved.
// http://www.aefis.com/

"use strict";

var editableTable = {
	_init: function () {
		var that = this;
		var editor = null;
		var active = {};

		function rowChanged() {
			var $row = $(that.element)
				.find("tr:nth-child(" + (active.row + 1) + ")")
				.first();
			$row.trigger("changedRow", that.rowData(that.element, active.row + 1));
		}

		function initializeTable() {
			var $table = $(that.element);
			var rowOptions = $table.attr("data-aefis-row-options");
			var canEdit = $table.attr("data-aefis-can-edit");
			var numberOfTableRows = $table.find("tbody tr").length;
			var evt = $.Event("tableInitialized");
			var canEditRow = true;

			if (canEdit && canEdit == "false") {
				canEditRow = false;
			}

			if (rowOptions) {
				var headerOptions = '<th class="editable-cell-options"></th>';
				$table.find("thead tr").append(headerOptions);
				$table.find("tbody tr").each(function () {
					var cellButtons =
						'<td class="editable-ignore editable-cell-options"><button class="btn btn-small btn-success aefis-editable-table-button add-row" type="button"><i class="fa fa-plus" aria-hidden="true" ></i></button><button class="btn btn-small btn-danger aefis-editable-table-button remove-row" type="button"><i class="fa fa-times" aria-hidden="true" ></i></button></td>';
					var $tableRow = $(this);
					$tableRow.find("td.editable-cell-options, th.editable-cell-options").remove();
					$tableRow.append(cellButtons);
					$tableRow.find(".aefis-editable-table-button").on("click", rowAction);
					resetRow($tableRow, false, true);
				});
			}
			$table.addClass("table aefis-data-table");
			if (numberOfTableRows == 0) {
				rowAction("add");
			} else {
				$table.fadeIn("fast");
			}

			$table.trigger(evt);
		}

		/*
		 * @row used like the resetRow function
		 * @newRow used like the resetRow function
		 * @justStyle if true, just styles the input and doesn't apply selectpicker
		 */
		/*
		function setRowSelects(row, newRow, justStyle) {
			for (var i = 0; i < columnCount; i++) {
				var $th = element.find('th:nth-child(' + (i + 1) + ')');
				var $td = $(row).find('td:nth-child(' + (i + 1) + ')');
				if ($th.attr('data-edit-type') == 'aefisselect') {
					setSelect($th, $td, justStyle);
				}
			}
		}
		*/

		// returns -1 if not found, otherwise index found
		function findStringInArrayNoType(arrayOfAnyType, searchString) {
			for (var i = 0; i < arrayOfAnyType.length; i++) {
				var tempArVal = arrayOfAnyType[i] + "";
				if (tempArVal == searchString) {
					return i;
				}
			}
			return -1;
		}

		// returns array minus any duplicate values
		function removeArrayDuplicateElements(theArray) {
			var newArray = [];
			for (var i = 0; i < theArray.length; i++) {
				if ($.inArray(theArray[i], newArray) < 0) {
					newArray[newArray.length] = theArray[i];
				}
			}
			return newArray;
		}

		/*
		 * @$th header cell corresponding to the td cell
		 * @$td cell to set
		 * @dataAttribute attribute string to use for retrieving data
		 * @justStyle if true, just styles the input and doesn't apply selectpicker
		 */
		function setSelect($th, $td, dataAttribute, justStyle, openSelect) {
			var dataValueLen = 0;
			var data = $td.attr(dataAttribute);
			if (data) {
				var dataValueArray = JSON.parse(data);
				if (
					!$.isArray(dataValueArray) &&
					($.type(dataValueArray) === "string" || $.type(dataValueArray) === "number")
				) {
					dataValueArray = [dataValueArray];
				} else {
					dataValueArray = removeArrayDuplicateElements(dataValueArray);
				}
				dataValueLen = $(dataValueArray).length;
			}

			var selectOptions = $th.find("select option[id!='no-faculty']");

			var buttonText = "";
			if (justStyle) {
				var isMultiple = $th.attr("multiple") ? true : false;
				if (dataValueLen == 0) {
					if ($th.attr("title")) {
						buttonText = $th.attr("title");
					} else {
						buttonText = "Nothing Selected";
					}
				} else if (!isMultiple && dataValueLen == 1) {
					buttonText = $th
						.find('select option[value="' + dataValueArray[0] + '"]')
						.html();
				} else if (isMultiple && dataValueLen <= 2) {
					// get data len there, match with values... up to two
					var select = $th.find("select");
					var foundValueCount = 0;
					buttonText = "";
					for (var i = 0; i < selectOptions.length; i++) {
						var tempOptionValue = $(selectOptions[i]).val();
						if (findStringInArrayNoType(dataValueArray, tempOptionValue) >= 0) {
							if (foundValueCount) {
								buttonText = buttonText + ", " + $(selectOptions[i]).html();
							} else {
								buttonText = $(selectOptions[i]).html();
							}
							foundValueCount++;
						}
					}
				} else {
					buttonText = dataValueLen + " of " + selectOptions.length + " selected";
				}
				var fakeSelectButton =
					'<div class="btn-group bootstrap-select show-tick" style="width: 100%;">';
				fakeSelectButton +=
					'<button id="fakeSelectButton" type="button" class="btn selectpicker btn-default" title="3 of 4 selected">';
				fakeSelectButton +=
					'<span class="filter-option pull-left">' +
					buttonText +
					'</span>&nbsp;<span class="caret"></span>';
				fakeSelectButton += "</button></div>";
				$td.append(fakeSelectButton);
				$td.find("#fakeSelectButton").on("click", function () {
					setSelect($th, $td, dataAttribute, false, true);
				});
			} else {
				var $select = $th.find("select").clone();
				$td.find("#fakeSelectButton").parent().remove();
				$td.append($select);
				$select.aefisselect({ width: "100%", dropupAuto: true });
				$select.on("change", function (e) {
					var value = $(this).val();
					editorClosed(value);
				});
				if (dataValueArray) {
					if ($td.hasClass("newCell")) {
						var defaultVal = $select.find("option:first-child").val();
						if (defaultVal) {
							dataValueArray = defaultVal;
						}
					}
					$select.val(dataValueArray);
					$td.data("aefis-data", dataValueArray);
					$select.selectpicker("refresh");
				}
				if (openSelect) {
					setTimeout(function () {
						$($select.next().find("button")[0]).click();
					}, 200);
				}
			}
		}

		function resetRow(row, newRow, initializeCall) {
			if (newRow) {
				$(row)
					.find("td:not(.editable-cell-options,.copy-cell-contents-on-add)")
					.each(function () {
						$(this).html("");
					});
			}
			if (initializeCall) {
				var initCall = true;
			} else {
				var initCall = false;
			}
			var columnCount = element.find("th").length;

			for (var i = 0; i < columnCount; i++) {
				var $th = element.find("th:nth-child(" + (i + 1) + ")");
				var $td = $(row).find("td:nth-child(" + (i + 1) + ")");

				if ($th.attr("data-edit-type") == "aefisselect") {
					if (newRow && $th.attr("data-aefis-default-value")) {
						var defaultVal = $th.attr("data-aefis-default-value");
						$td.attr("data-aefis-data", defaultVal);
					}
					/*if (newRow) {
						var dataAttr = 'data-aefis-default-value';
					} else {*/
					var dataAttr = "data-aefis-data";
					/*}*/
					if (initCall) {
						setSelect($th, $td, dataAttr, true);
					} else {
						setSelect($th, $td, dataAttr, false);
					}
				} else if ($th.attr("data-edit-type") == "date") {
					if (!newRow) {
						var data = newRow
							? $td.attr("data-aefis-default-value")
							: $td.attr("data-aefis-data");

						if (data) {
							$td.data("aefis-data", data);
							$td.text(data);
						}
					} else {
						$td.attr("data-aefis-data", "");
					}
				} else if ($th.attr("data-edit-type") == "checkbox") {
					var id = "course-section-checkbox-" + aefis.util.createUUID();
					if (newRow) {
						var content = $th.attr("data-aefis-template");
						$td.html(content);
					}
					var $label = $td.find("label.checkbox-parent");
					var $input = $td.find("input");
					$label.attr("for", id);
					$input.attr("id", id);
				} else {
					var data = newRow
						? $td.attr("data-aefis-default-value")
						: $td.attr("data-aefis-data");

					if (data) {
						$td.data("aefis-data", data);
						$td.text(data);
					}
				}
				$table.trigger("rowReset");
			}
			$td.removeAttr("data-aefis-data");
		}

		function editorClosed(newValue) {
			var editorValue = "";

			if (editor) {
				editorValue = editor.val();
			}

			var newContent = newValue ? newValue : editorValue;

			if (
				active.cell.data("aefis-data") === newContent ||
				(editor && editor.hasClass("error"))
			) {
				return true;
			}
			var edittype = getEditType();

			if (edittype == "vtext") {
				if (text !== "") {
					var num = numeral(text);
					text = num.format("0,0");
				}
			}
			active.cell.data("aefis-data", newContent);

			if (edittype != "aefisselect") {
				active.cell.text(newContent);
			}
			var evt = $.Event("change");
			active.cell.trigger(evt, newContent);
			if (evt.result === false) {
				active.cell.html(originalContent);
			} else {
				rowChanged();
			}
		}

		var buildDefaultOptions = function () {
				var opts = $.extend({}, that.options);
				opts.editors.number = opts.editors.number.clone();
				opts.editors.text = opts.editors.text.clone();
				opts.editors.textarea = opts.editors.textarea.clone();
				opts.editors.vtext = opts.editors.vtext.clone();
				opts.editors.date = opts.editors.date.clone();
				opts.editors.select = opts.editors.select.clone();
				opts.editors.time = opts.editors.time.clone();
				return opts;
			},
			activeOptions = $.extend(buildDefaultOptions(), this.options),
			ARROW_LEFT = 37,
			ARROW_UP = 38,
			ARROW_RIGHT = 39,
			ARROW_DOWN = 40,
			ENTER = 13,
			ESC = 27,
			TAB = 9,
			element = $(this.element),
			editors = {
				number: activeOptions.editors.number
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent()),
				text: activeOptions.editors.text
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent()),
				textarea: activeOptions.editors.textarea
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent()),
				vtext: activeOptions.editors.vtext
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent()),
				date: activeOptions.editors.date
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent())
					.addClass("datepicker"),
				time: activeOptions.editors.time
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent())
					.datetimepicker({
						pickDate: false,
						pickTime: true,
						useMinutes: true,
						useSeconds: false,
						useCurrent: true,
						minuteStepping: 1,
						minDate: "1/1/1900",
						showToday: true,
						language: "en",
						defaultDate: "",
						disabledDates: [],
						enabledDates: [],
						icons: {
							time: "fa fa-time",
							date: "fa fa-calendar",
							up: "fa fa-chevron-up",
							down: "fa fa-chevron-down"
						},
						useStrict: false,
						sideBySide: false,
						daysOfWeekDisabled: []
					}),
				select: activeOptions.editors.select
					.css("position", "absolute")
					.hide()
					.appendTo(element.parent())
			},
			getEditType = function () {
				var edittype =
					active.cell.attr("data-edit-type") ||
					element
						.find("th:nth-child(" + (active.column + 1) + ")")
						.attr("data-edit-type");
				if (edittype == null || !edittype) {
					edittype = "text";
				}
				return edittype;
			},
			showEditor = function (select) {
				if ($(select.target).hasClass("table-header")) {
					return;
				}
				active.cell = element.find("td:focus");

				if (!active.cell.length) {
					active.cell = $(select.target).closest("td");
				}

				var $cell = $(active.cell);
				active.column = $cell.parent().children().index($cell);
				active.row = $cell.parent().parent().children().index($cell.parent());

				if ($cell.hasClass("disabled")) {
					var $table = $cell.parent().parent().parent();
					var evt = $.Event("cellDisabled");
					$table.trigger(evt);
					return;
				}

				var notEditable = active.cell.hasClass("editable-ignore");
				if (active.cell.length && !notEditable) {
					var edittype = getEditType();
					if (edittype == "date") {
						editors["date"].datepicker("update", active.cell.text());
					} else if (edittype == "date") {
						editors["time"].datetimepicker("update", active.cell.text());
					} else if (edittype == "select") {
						var $th = element.find("th:nth-child(" + (active.column + 1) + ")");
						var $selectOptions = $th.find("select > option").clone();

						editors["select"].find("option").remove().end().append($selectOptions);
					} else if (edittype == "aefisselect") {
						// Selects are already shown! We don't hide/show select boxes. They are there.
					}
					editor = editors[edittype];
					if (editor) {
						editor
							.val(active.cell.text())
							.removeClass("error")
							.show()
							.offset(active.cell.offset())
							.css(active.cell.css(activeOptions.cloneProperties))
							.width(active.cell.width())
							.height(active.cell.height())
							.focus();
						if (edittype == "select") {
							editor.mousedown();
						}
						if (select) {
							editor.select();
						}
					}
				}
			},
			movement = function (element, keycode) {
				if (keycode === ARROW_RIGHT) {
					return element.next("td");
				} else if (keycode === ARROW_LEFT) {
					return element.prev("td");
				} else if (keycode === ARROW_UP) {
					return element.parent().prev().children().eq(element.index());
				} else if (keycode === ARROW_DOWN) {
					return element.parent().next().children().eq(element.index());
				}
				return [];
			},
			rowAction = function (evt) {
				var minimumRows = 1;
				var $button = evt ? $(evt.target).closest("button") : null;
				var action = "add";
				var $table = $(that.element);
				var numberOfRows = $table.find("tbody tr").length;

				if ($button && $button.hasClass("remove-row")) {
					action = "remove";
				}

				if (action == "add") {
					var $newRow;

					if ($button.length) {
						var $currentRow = $button.closest("tr");
						$currentRow.removeClass("newRow");
						$currentRow.find("td").removeClass("newCell");
						$newRow = $currentRow.clone();
						$newRow.addClass("newRow");
						$newRow.find("td").addClass("newCell");
						$newRow.find('td').each(function(){
							var $cell = $(this);
							$cell.attr('data-aefis-data','');
						});
						$currentRow.after($newRow);

						resetRow($newRow, true, true);
					} else {
						var columnCount = $table.find("th").length;
						var $newRow = $("<tr />");
						var $td = $("<td />");
						// Very hard core
						for (var i = 0; i < columnCount - 1; i++) {
							var cellStyle = $table.find("th:nth-child(" + i + ")").attr("style");
							$newRow.append($td.clone());
							if (cellStyle) {
								$newRow.find("td:nth-child(" + i + ")").attr("style", cellStyle);
							}
						}
						$table.find("tbody:last").append($newRow);
						resetRow($newRow, true);
					}
					$newRow.find(".aefis-editable-table-button").on("click", rowAction);
					$newRow.trigger("addedRow", $newRow);
				} else if (action == "remove") {
					var evt = $.Event("deletingRow");
					var $currentRow = $button.closest("tr");
					var confirmDelete = $table.attr("data-aefis-row-delete-confirm");

					if (numberOfRows == minimumRows) {
						aefis.ui.alert(
							"Cannot Remove Row",
							"Table requires a minimum of " + minimumRows + " row."
						);
					} else {
						$currentRow.trigger(evt, $currentRow);
						if (evt.result === false) {
							return;
						}
						if (confirmDelete) {
							var content = "Are you sure you want to delete the row from the table?";
							var options = {
								content: content,
								confirmActionName: "Delete",
								cancelActionName: "Cancel",
								confirmAction: function () {
									$currentRow
										.remove()
										.promise()
										.done(function () {
											var evt = $.Event("deletedRow");
											$table.trigger(evt, $currentRow);
										});
								}
							};
							aefis.ui.confirm(options);
						} else {
							$currentRow
								.remove()
								.promise()
								.done(function () {
									var evt = $.Event("deletedRow");
									$table.trigger(evt, $currentRow);
								});
						}
					}
				}
			};

		var $table = element;
		var ajaxCalls = 0;
		// Initilize selects in header
		$table.hide();
		$table
			.find("th[data-edit-type='select'], th[data-edit-type='aefisselect']")
			.each(function () {
				var $container = $(this).remove("select");
				var url = $container.attr("data-aefis-datasource");
				var params = $container.attr("data-aefis-parameters");
				var that = this;

				if (!url) {
					return;
				}

				var $select = $("<select></select>")
					.hide()
					.attr("class", $container.attr("data-aefis-class"))
					.attr("title", $container.attr("title"))
					.attr(
						"data-aefis-select-null-option",
						$container.attr("data-aefis-select-null-option")
					)
					.attr(
						"data-aefis-select-null-option",
						$container.attr("data-aefis-select-null-option")
					)
					.width($container.width());

				if ($container.attr("multiple")) {
					$select.attr("multiple", "");
					$select.attr("data-selected-text-format", "count>2");
				}
				ajaxCalls += 1;
				new aefis.ApiWrapper().call(url, {
					data: params,
					onSuccess: function (data) {
						var source = aefis.forms.getDataTemplate($container);
						if (source) {
							var template = Handlebars.compile(source);

							$select.html(template({ records: data }));
							$container.append($select);
						}
					},
					onComplete: function () {
						ajaxCalls -= 1;
						if (ajaxCalls == 0) {
							initializeTable();
						}
					}
				});
			});

		// Editor initilization.
		$.each(editors, function (key, value) {
			value
				.blur(function () {
					editorClosed();
					editor.hide();
				})
				.keydown(function (e) {
					if (e.which === ENTER) {
						editorClosed();
						editor.hide();
						active.cell.focus();
						e.preventDefault();
						e.stopPropagation();
					} else if (e.which === ESC) {
						editor.val(active.cell.text());
						e.preventDefault();
						e.stopPropagation();
						editor.hide();
						active.cell.focus();
					} else if (e.which === TAB) {
						active.cell.focus();
					} else if (
						this.type != "number" &&
						this.selectionEnd - this.selectionStart === this.value.length
					) {
						var possibleMove = movement(active.cell, e.which);
						if (possibleMove.length > 0) {
							possibleMove.focus();
							e.preventDefault();
							e.stopPropagation();
						}
					}
				})
				.on("input paste", function () {
					var evt = $.Event("validate");
					active.cell.trigger(evt, editor.val());
					if (evt.result === false) {
						editor.addClass("error");
					} else {
						editor.removeClass("error");
					}
				})
				.on("changeDate", function (e) {
					//active.text(e.format());
					editorClosed(e.currentTarget.value);
					editor.datepicker("hide");
				})
				.on("change", function (e) {
					// This makes sure editor change event are not propogated so that only TC changes are received.
					e.stopPropagation();
				});
		});
		element
			.on("click keypress dblclick", showEditor)
			.css("cursor", "pointer")
			.keydown(function (e) {
				var prevent = true,
					possibleMove = movement($(e.target), e.which);
				if (possibleMove.length > 0) {
					possibleMove.focus();
				} else if (e.which === ENTER) {
					showEditor(false);
				} else if (e.which === 17 || e.which === 91 || e.which === 93) {
					showEditor(true);
					prevent = false;
				} else {
					prevent = false;
				}
				if (prevent) {
					e.stopPropagation();
					e.preventDefault();
				}
			});

		if (ajaxCalls == 0) {
			initializeTable();
		}

		element.find("td:not(.editable-ignore)").prop("tabindex", 1);

		$(window).on("resize", function () {
			if (editor == null) {
				return;
			}
			if (editor.is(":visible")) {
				editor
					.offset(active.cell.offset())
					.width(active.cell.width())
					.height(active.cell.height());
			}
		});
	},

	rowData: function (tableEl, rowIndex) {
		var $table = $(tableEl);
		var $row = $table.find("tr:nth-child(" + rowIndex + ")");
		var rowdata = {};

		var columnCount = $table.find("th").length;

		for (var i = 0; i < columnCount; i++) {
			var $th = $table.find("th:nth-child(" + (i + 1) + ")");
			var $td = $row.find("td:nth-child(" + (i + 1) + ")");

			if (!$th.hasClass("editable-ignore")) {
				var objectName = $th.attr("data-aefis-object");
				var fieldName = $th.attr("data-aefis-field");
				if (objectName && fieldName) {
					if (objectName && !rowdata[objectName]) {
						rowdata[objectName] = {};
					}
					if ($th.attr("data-edit-type") == "aefisselect") {
						rowdata[objectName][fieldName] = $td.data("aefis-data");
					} else {
						rowdata[objectName][fieldName] = $td.html();
					}
				}
			}
		}
		return rowdata;
	},

	val: function () {
		var that = this;
		var tableValueObject = [];
		$(this.element)
			.find("tr:has(td)")
			.each(function (index, row) {
				tableValueObject[index] = that.rowData(that.element, index + 1);
			});
		return tableValueObject;
	},
	options: {
		cloneProperties: [
			"padding",
			"padding-top",
			"padding-bottom",
			"padding-left",
			"padding-right",
			"text-align",
			"font",
			"font-size",
			"font-family",
			"font-weight",
			"border",
			"border-top",
			"border-bottom",
			"border-left",
			"border-right"
		],
		editors: {
			number: $('<input type="number" class="text-right aefis-editable-table-cell-input">'),
			text: $('<input class="aefis-editable-table-cell-input">'),
			textarea: $('<textarea class="aefis-editable-table-cell-input">'),
			vtext: $('<input class="aefis-editable-table-cell-input">'),
			date: $('<input data-provide="datepicker aefis-editable-table-cell-input">'),
			time: $('<input class="aefis-timepicker aefis-editable-table-cell-input">'),
			select: $('<select class="aefis-editable-table-cell-input">')
		},
		editor: null,
		active: {}
	}
};

$.widget("aefis.editableTable", editableTable);

/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
(function () {
	function a(a) {
		this._value = a;
	}
	function b(a, b, c, d) {
		var e,
			f,
			g = Math.pow(10, b);
		return (
			(f = (c(a * g) / g).toFixed(b)),
			d && ((e = new RegExp("0{1," + d + "}$")), (f = f.replace(e, ""))),
			f
		);
	}
	function c(a, b, c) {
		var d;
		return (d =
			b.indexOf("$") > -1
				? e(a, b, c)
				: b.indexOf("%") > -1
				? f(a, b, c)
				: b.indexOf(":") > -1
				? g(a, b)
				: i(a._value, b, c));
	}
	function d(a, b) {
		var c,
			d,
			e,
			f,
			g,
			i = b,
			j = ["KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
			k = !1;
		if (b.indexOf(":") > -1) a._value = h(b);
		else if (b === q) a._value = 0;
		else {
			for (
				"." !== o[p].delimiters.decimal &&
					(b = b.replace(/\./g, "").replace(o[p].delimiters.decimal, ".")),
					c = new RegExp(
						"[^a-zA-Z]" +
							o[p].abbreviations.thousand +
							"(?:\\)|(\\" +
							o[p].currency.symbol +
							")?(?:\\))?)?$"
					),
					d = new RegExp(
						"[^a-zA-Z]" +
							o[p].abbreviations.million +
							"(?:\\)|(\\" +
							o[p].currency.symbol +
							")?(?:\\))?)?$"
					),
					e = new RegExp(
						"[^a-zA-Z]" +
							o[p].abbreviations.billion +
							"(?:\\)|(\\" +
							o[p].currency.symbol +
							")?(?:\\))?)?$"
					),
					f = new RegExp(
						"[^a-zA-Z]" +
							o[p].abbreviations.trillion +
							"(?:\\)|(\\" +
							o[p].currency.symbol +
							")?(?:\\))?)?$"
					),
					g = 0;
				g <= j.length && !(k = b.indexOf(j[g]) > -1 ? Math.pow(1024, g + 1) : !1);
				g++
			);
			(a._value =
				(k ? k : 1) *
				(i.match(c) ? Math.pow(10, 3) : 1) *
				(i.match(d) ? Math.pow(10, 6) : 1) *
				(i.match(e) ? Math.pow(10, 9) : 1) *
				(i.match(f) ? Math.pow(10, 12) : 1) *
				(b.indexOf("%") > -1 ? 0.01 : 1) *
				((b.split("-").length +
					Math.min(b.split("(").length - 1, b.split(")").length - 1)) %
				2
					? 1
					: -1) *
				Number(b.replace(/[^0-9\.]+/g, ""))),
				(a._value = k ? Math.ceil(a._value) : a._value);
		}
		return a._value;
	}
	function e(a, b, c) {
		var d,
			e,
			f = b.indexOf("$"),
			g = b.indexOf("("),
			h = b.indexOf("-"),
			j = "";
		return (
			b.indexOf(" $") > -1
				? ((j = " "), (b = b.replace(" $", "")))
				: b.indexOf("$ ") > -1
				? ((j = " "), (b = b.replace("$ ", "")))
				: (b = b.replace("$", "")),
			(e = i(a._value, b, c)),
			1 >= f
				? e.indexOf("(") > -1 || e.indexOf("-") > -1
					? ((e = e.split("")),
					  (d = 1),
					  (g > f || h > f) && (d = 0),
					  e.splice(d, 0, o[p].currency.symbol + j),
					  (e = e.join("")))
					: (e = o[p].currency.symbol + j + e)
				: e.indexOf(")") > -1
				? ((e = e.split("")), e.splice(-1, 0, j + o[p].currency.symbol), (e = e.join("")))
				: (e = e + j + o[p].currency.symbol),
			e
		);
	}
	function f(a, b, c) {
		var d,
			e = "",
			f = 100 * a._value;
		return (
			b.indexOf(" %") > -1
				? ((e = " "), (b = b.replace(" %", "")))
				: (b = b.replace("%", "")),
			(d = i(f, b, c)),
			d.indexOf(")") > -1
				? ((d = d.split("")), d.splice(-1, 0, e + "%"), (d = d.join("")))
				: (d = d + e + "%"),
			d
		);
	}
	function g(a) {
		var b = Math.floor(a._value / 60 / 60),
			c = Math.floor((a._value - 60 * b * 60) / 60),
			d = Math.round(a._value - 60 * b * 60 - 60 * c);
		return b + ":" + (10 > c ? "0" + c : c) + ":" + (10 > d ? "0" + d : d);
	}
	function h(a) {
		var b = a.split(":"),
			c = 0;
		return (
			3 === b.length
				? ((c += 60 * Number(b[0]) * 60), (c += 60 * Number(b[1])), (c += Number(b[2])))
				: 2 === b.length && ((c += 60 * Number(b[0])), (c += Number(b[1]))),
			Number(c)
		);
	}
	function i(a, c, d) {
		var e,
			f,
			g,
			h,
			i,
			j,
			k = !1,
			l = !1,
			m = !1,
			n = "",
			r = !1,
			s = !1,
			t = !1,
			u = !1,
			v = !1,
			w = "",
			x = "",
			y = Math.abs(a),
			z = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
			A = "",
			B = !1;
		if (0 === a && null !== q) return q;
		if (
			(c.indexOf("(") > -1
				? ((k = !0), (c = c.slice(1, -1)))
				: c.indexOf("+") > -1 && ((l = !0), (c = c.replace(/\+/g, ""))),
			c.indexOf("a") > -1 &&
				((r = c.indexOf("aK") >= 0),
				(s = c.indexOf("aM") >= 0),
				(t = c.indexOf("aB") >= 0),
				(u = c.indexOf("aT") >= 0),
				(v = r || s || t || u),
				c.indexOf(" a") > -1
					? ((n = " "), (c = c.replace(" a", "")))
					: (c = c.replace("a", "")),
				(y >= Math.pow(10, 12) && !v) || u
					? ((n += o[p].abbreviations.trillion), (a /= Math.pow(10, 12)))
					: (y < Math.pow(10, 12) && y >= Math.pow(10, 9) && !v) || t
					? ((n += o[p].abbreviations.billion), (a /= Math.pow(10, 9)))
					: (y < Math.pow(10, 9) && y >= Math.pow(10, 6) && !v) || s
					? ((n += o[p].abbreviations.million), (a /= Math.pow(10, 6)))
					: ((y < Math.pow(10, 6) && y >= Math.pow(10, 3) && !v) || r) &&
					  ((n += o[p].abbreviations.thousand), (a /= Math.pow(10, 3)))),
			c.indexOf("b") > -1)
		)
			for (
				c.indexOf(" b") > -1
					? ((w = " "), (c = c.replace(" b", "")))
					: (c = c.replace("b", "")),
					g = 0;
				g <= z.length;
				g++
			)
				if (((e = Math.pow(1024, g)), (f = Math.pow(1024, g + 1)), a >= e && f > a)) {
					(w += z[g]), e > 0 && (a /= e);
					break;
				}
		return (
			c.indexOf("o") > -1 &&
				(c.indexOf(" o") > -1
					? ((x = " "), (c = c.replace(" o", "")))
					: (c = c.replace("o", "")),
				(x += o[p].ordinal(a))),
			c.indexOf("[.]") > -1 && ((m = !0), (c = c.replace("[.]", "."))),
			(h = a.toString().split(".")[0]),
			(i = c.split(".")[1]),
			(j = c.indexOf(",")),
			i
				? (i.indexOf("[") > -1
						? ((i = i.replace("]", "")),
						  (i = i.split("[")),
						  (A = b(a, i[0].length + i[1].length, d, i[1].length)))
						: (A = b(a, i.length, d)),
				  (h = A.split(".")[0]),
				  (A = A.split(".")[1].length ? o[p].delimiters.decimal + A.split(".")[1] : ""),
				  m && 0 === Number(A.slice(1)) && (A = ""))
				: (h = b(a, null, d)),
			h.indexOf("-") > -1 && ((h = h.slice(1)), (B = !0)),
			j > -1 &&
				(h = h
					.toString()
					.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + o[p].delimiters.thousands)),
			0 === c.indexOf(".") && (h = ""),
			(k && B ? "(" : "") +
				(!k && B ? "-" : "") +
				(!B && l ? "+" : "") +
				h +
				A +
				(x ? x : "") +
				(n ? n : "") +
				(w ? w : "") +
				(k && B ? ")" : "")
		);
	}
	function j(a, b) {
		o[a] = b;
	}
	function k(a) {
		var b = a.toString().split(".");
		return b.length < 2 ? 1 : Math.pow(10, b[1].length);
	}
	function l() {
		var a = Array.prototype.slice.call(arguments);
		return a.reduce(function (a, b) {
			var c = k(a),
				d = k(b);
			return c > d ? c : d;
		}, -1 / 0);
	}
	var m,
		n = "1.5.3",
		o = {},
		p = "en",
		q = null,
		r = "0,0",
		s = "undefined" != typeof module && module.exports;
	(m = function (b) {
		return (
			m.isNumeral(b)
				? (b = b.value())
				: 0 === b || "undefined" == typeof b
				? (b = 0)
				: Number(b) || (b = m.fn.unformat(b)),
			new a(Number(b))
		);
	}),
		(m.version = n),
		(m.isNumeral = function (b) {
			return b instanceof a;
		}),
		(m.language = function (a, b) {
			if (!a) return p;
			if (a && !b) {
				if (!o[a]) throw new Error("Unknown language : " + a);
				p = a;
			}
			return (b || !o[a]) && j(a, b), m;
		}),
		(m.languageData = function (a) {
			if (!a) return o[p];
			if (!o[a]) throw new Error("Unknown language : " + a);
			return o[a];
		}),
		m.language("en", {
			delimiters: { thousands: ",", decimal: "." },
			abbreviations: { thousand: "k", million: "m", billion: "b", trillion: "t" },
			ordinal: function (a) {
				var b = a % 10;
				return 1 === ~~((a % 100) / 10)
					? "th"
					: 1 === b
					? "st"
					: 2 === b
					? "nd"
					: 3 === b
					? "rd"
					: "th";
			},
			currency: { symbol: "$" }
		}),
		(m.zeroFormat = function (a) {
			q = "string" == typeof a ? a : null;
		}),
		(m.defaultFormat = function (a) {
			r = "string" == typeof a ? a : "0.0";
		}),
		"function" != typeof Array.prototype.reduce &&
			(Array.prototype.reduce = function (a, b) {
				"use strict";
				if (null === this || "undefined" == typeof this)
					throw new TypeError("Array.prototype.reduce called on null or undefined");
				if ("function" != typeof a) throw new TypeError(a + " is not a function");
				var c,
					d,
					e = this.length >>> 0,
					f = !1;
				for (1 < arguments.length && ((d = b), (f = !0)), c = 0; e > c; ++c)
					this.hasOwnProperty(c) &&
						(f ? (d = a(d, this[c], c, this)) : ((d = this[c]), (f = !0)));
				if (!f) throw new TypeError("Reduce of empty array with no initial value");
				return d;
			}),
		(m.fn = a.prototype =
			{
				clone: function () {
					return m(this);
				},
				format: function (a, b) {
					return c(this, a ? a : r, void 0 !== b ? b : Math.round);
				},
				unformat: function (a) {
					return "[object Number]" === Object.prototype.toString.call(a)
						? a
						: d(this, a ? a : r);
				},
				value: function () {
					return this._value;
				},
				valueOf: function () {
					return this._value;
				},
				set: function (a) {
					return (this._value = Number(a)), this;
				},
				add: function (a) {
					function b(a, b) {
						return a + c * b;
					}
					var c = l.call(null, this._value, a);
					return (this._value = [this._value, a].reduce(b, 0) / c), this;
				},
				subtract: function (a) {
					function b(a, b) {
						return a - c * b;
					}
					var c = l.call(null, this._value, a);
					return (this._value = [a].reduce(b, this._value * c) / c), this;
				},
				multiply: function (a) {
					function b(a, b) {
						var c = l(a, b);
						return (a * c * b * c) / (c * c);
					}
					return (this._value = [this._value, a].reduce(b, 1)), this;
				},
				divide: function (a) {
					function b(a, b) {
						var c = l(a, b);
						return (a * c) / (b * c);
					}
					return (this._value = [this._value, a].reduce(b)), this;
				},
				difference: function (a) {
					return Math.abs(m(this._value).subtract(a).value());
				}
			}),
		s && (module.exports = m),
		"undefined" == typeof ender && (this.numeral = m),
		"function" == typeof define &&
			define.amd &&
			define([], function () {
				return m;
			});
}.call(this));
